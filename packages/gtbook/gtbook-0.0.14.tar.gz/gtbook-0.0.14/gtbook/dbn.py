# AUTOGENERATED! DO NOT EDIT! File to edit: dbn.ipynb (unless otherwise specified).

__all__ = ['dbn_writer', 'has_positions']

# Cell
import gtsam

# Cell
def dbn_writer(writer=None, hints: dict = None, positions: dict = None,
               boxes: set = None, **kwargs):
    """ Create a DotWriter depending on input arguments:
        If writer is supplied, we will add but not overwrite hints or positions.
    """
    if writer is None and hints is None and positions is None and boxes is None:
        return None
    writer = gtsam.DotWriter() if writer is None else writer
    # Copy hints without overwriting
    if hints is not None:
        assert isinstance(hints, dict)
        ph: dict = writer.positionHints
        for key, y in hints.items():
            if key not in ph:
                ph[key] = y
        writer.positionHints = ph
    # Copy positions without overwriting
    if positions is not None:
        assert isinstance(positions, dict)
        kp: dict = writer.variablePositions
        for key, position in positions.items():
            if key not in kp:
                kp[key] = position
        writer.variablePositions = kp
    # Add boxes
    if boxes is not None:
        assert isinstance(boxes, set)
        bx: set = writer.boxes
        for key in boxes:
            bx.add(key)
        writer.boxes = bx
    return writer


def has_positions(writer):
    """Check if writer has positions for engine selection"""
    if writer is None:
        return False
    return len(writer.positionHints) > 0 or len(writer.variablePositions) > 0
