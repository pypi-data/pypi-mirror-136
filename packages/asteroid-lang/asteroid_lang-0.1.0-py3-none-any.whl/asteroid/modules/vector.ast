------------------------------------------------------------------
-- vector.ast
--
-- this module defines functions useful for vector arithmetic
--
-- (c) University of Rhode Island
------------------------------------------------------------------

load system util.
load system type.

------------------------------------------------------------------
function vop
------------------------------------------------------------------
-- worker function for actual vector arithmetic
-- Note: it also implements vector/scalar arithmetic
with (f:%function,a:%list,b:%list) do
  if a @length() =/= b @length() do
      throw Error("vops only defined on lists of the same length").
  end
  let v = zip(a,b).
  return v @map(f).
with (f:%function,a:%list,b if isscalar(b)) do
  -- promote b to a vector
  let bv = [1 to a @length()] @map(lambda with _ do return b).
  let v = zip(a,bv).
  return v @map(f).
with (f:%function,a if isscalar(a),b:%list) do
  -- promote a to a vector
  let av = [1 to b @length()] @map(lambda with _ do return a).
  let v = zip(av,b).
  return v @map(f).
end

------------------------------------------------------------------
function vadd
------------------------------------------------------------------
with (a,b) do
  return vop(lambda with (x,y) do return x+y,a,b).
end

------------------------------------------------------------------
function vsub
------------------------------------------------------------------
with (a,b) do
  return vop(lambda with (x,y) do return x-y,a,b).
end

------------------------------------------------------------------
function vmult
------------------------------------------------------------------
with (a,b) do
  return vop(lambda with (x,y) do return x*y,a,b).
end

------------------------------------------------------------------
function dot
-- computes the dot product of two lists
------------------------------------------------------------------
with (a:%list,b:%list) do
  return vmult(a,b) @reduce(lambda with (x,y) do return x+y).
end
