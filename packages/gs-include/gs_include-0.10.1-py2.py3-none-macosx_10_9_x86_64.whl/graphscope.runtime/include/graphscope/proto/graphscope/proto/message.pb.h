// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graphscope/proto/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "graphscope/proto/error_codes.pb.h"
#include "graphscope/proto/op_def.pb.h"
#include "graphscope/proto/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graphscope_2fproto_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graphscope_2fproto_2fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graphscope_2fproto_2fmessage_2eproto;
namespace gs {
namespace rpc {
class CloseSessionRequest;
struct CloseSessionRequestDefaultTypeInternal;
extern CloseSessionRequestDefaultTypeInternal _CloseSessionRequest_default_instance_;
class CloseSessionResponse;
struct CloseSessionResponseDefaultTypeInternal;
extern CloseSessionResponseDefaultTypeInternal _CloseSessionResponse_default_instance_;
class ConnectSessionRequest;
struct ConnectSessionRequestDefaultTypeInternal;
extern ConnectSessionRequestDefaultTypeInternal _ConnectSessionRequest_default_instance_;
class ConnectSessionResponse;
struct ConnectSessionResponseDefaultTypeInternal;
extern ConnectSessionResponseDefaultTypeInternal _ConnectSessionResponse_default_instance_;
class FetchLogsRequest;
struct FetchLogsRequestDefaultTypeInternal;
extern FetchLogsRequestDefaultTypeInternal _FetchLogsRequest_default_instance_;
class FetchLogsResponse;
struct FetchLogsResponseDefaultTypeInternal;
extern FetchLogsResponseDefaultTypeInternal _FetchLogsResponse_default_instance_;
class HeartBeatRequest;
struct HeartBeatRequestDefaultTypeInternal;
extern HeartBeatRequestDefaultTypeInternal _HeartBeatRequest_default_instance_;
class HeartBeatResponse;
struct HeartBeatResponseDefaultTypeInternal;
extern HeartBeatResponseDefaultTypeInternal _HeartBeatResponse_default_instance_;
class RunStepRequest;
struct RunStepRequestDefaultTypeInternal;
extern RunStepRequestDefaultTypeInternal _RunStepRequest_default_instance_;
class RunStepResponse;
struct RunStepResponseDefaultTypeInternal;
extern RunStepResponseDefaultTypeInternal _RunStepResponse_default_instance_;
}  // namespace rpc
}  // namespace gs
PROTOBUF_NAMESPACE_OPEN
template<> ::gs::rpc::CloseSessionRequest* Arena::CreateMaybeMessage<::gs::rpc::CloseSessionRequest>(Arena*);
template<> ::gs::rpc::CloseSessionResponse* Arena::CreateMaybeMessage<::gs::rpc::CloseSessionResponse>(Arena*);
template<> ::gs::rpc::ConnectSessionRequest* Arena::CreateMaybeMessage<::gs::rpc::ConnectSessionRequest>(Arena*);
template<> ::gs::rpc::ConnectSessionResponse* Arena::CreateMaybeMessage<::gs::rpc::ConnectSessionResponse>(Arena*);
template<> ::gs::rpc::FetchLogsRequest* Arena::CreateMaybeMessage<::gs::rpc::FetchLogsRequest>(Arena*);
template<> ::gs::rpc::FetchLogsResponse* Arena::CreateMaybeMessage<::gs::rpc::FetchLogsResponse>(Arena*);
template<> ::gs::rpc::HeartBeatRequest* Arena::CreateMaybeMessage<::gs::rpc::HeartBeatRequest>(Arena*);
template<> ::gs::rpc::HeartBeatResponse* Arena::CreateMaybeMessage<::gs::rpc::HeartBeatResponse>(Arena*);
template<> ::gs::rpc::RunStepRequest* Arena::CreateMaybeMessage<::gs::rpc::RunStepRequest>(Arena*);
template<> ::gs::rpc::RunStepResponse* Arena::CreateMaybeMessage<::gs::rpc::RunStepResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gs {
namespace rpc {

// ===================================================================

class ConnectSessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.ConnectSessionRequest) */ {
 public:
  inline ConnectSessionRequest() : ConnectSessionRequest(nullptr) {}
  ~ConnectSessionRequest() override;
  explicit constexpr ConnectSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectSessionRequest(const ConnectSessionRequest& from);
  ConnectSessionRequest(ConnectSessionRequest&& from) noexcept
    : ConnectSessionRequest() {
    *this = ::std::move(from);
  }

  inline ConnectSessionRequest& operator=(const ConnectSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectSessionRequest& operator=(ConnectSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectSessionRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectSessionRequest*>(
               &_ConnectSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectSessionRequest& a, ConnectSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectSessionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectSessionRequest* New() const final {
    return new ConnectSessionRequest();
  }

  ConnectSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectSessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectSessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectSessionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.ConnectSessionRequest";
  }
  protected:
  explicit ConnectSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 3,
    kDanglingTimeoutSecondsFieldNumber = 2,
    kCleanupInstanceFieldNumber = 1,
    kReconnectFieldNumber = 4,
  };
  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int32 dangling_timeout_seconds = 2;
  void clear_dangling_timeout_seconds();
  ::PROTOBUF_NAMESPACE_ID::int32 dangling_timeout_seconds() const;
  void set_dangling_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dangling_timeout_seconds() const;
  void _internal_set_dangling_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool cleanup_instance = 1;
  void clear_cleanup_instance();
  bool cleanup_instance() const;
  void set_cleanup_instance(bool value);
  private:
  bool _internal_cleanup_instance() const;
  void _internal_set_cleanup_instance(bool value);
  public:

  // bool reconnect = 4;
  void clear_reconnect();
  bool reconnect() const;
  void set_reconnect(bool value);
  private:
  bool _internal_reconnect() const;
  void _internal_set_reconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.ConnectSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::int32 dangling_timeout_seconds_;
  bool cleanup_instance_;
  bool reconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class ConnectSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.ConnectSessionResponse) */ {
 public:
  inline ConnectSessionResponse() : ConnectSessionResponse(nullptr) {}
  ~ConnectSessionResponse() override;
  explicit constexpr ConnectSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectSessionResponse(const ConnectSessionResponse& from);
  ConnectSessionResponse(ConnectSessionResponse&& from) noexcept
    : ConnectSessionResponse() {
    *this = ::std::move(from);
  }

  inline ConnectSessionResponse& operator=(const ConnectSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectSessionResponse& operator=(ConnectSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectSessionResponse* internal_default_instance() {
    return reinterpret_cast<const ConnectSessionResponse*>(
               &_ConnectSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectSessionResponse& a, ConnectSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectSessionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectSessionResponse* New() const final {
    return new ConnectSessionResponse();
  }

  ConnectSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectSessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectSessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectSessionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.ConnectSessionResponse";
  }
  protected:
  explicit ConnectSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPodNameListFieldNumber = 5,
    kSessionIdFieldNumber = 2,
    kEngineConfigFieldNumber = 4,
    kNamespaceFieldNumber = 7,
    kClusterTypeFieldNumber = 3,
    kNumWorkersFieldNumber = 6,
  };
  // repeated string pod_name_list = 5;
  int pod_name_list_size() const;
  private:
  int _internal_pod_name_list_size() const;
  public:
  void clear_pod_name_list();
  const std::string& pod_name_list(int index) const;
  std::string* mutable_pod_name_list(int index);
  void set_pod_name_list(int index, const std::string& value);
  void set_pod_name_list(int index, std::string&& value);
  void set_pod_name_list(int index, const char* value);
  void set_pod_name_list(int index, const char* value, size_t size);
  std::string* add_pod_name_list();
  void add_pod_name_list(const std::string& value);
  void add_pod_name_list(std::string&& value);
  void add_pod_name_list(const char* value);
  void add_pod_name_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& pod_name_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_pod_name_list();
  private:
  const std::string& _internal_pod_name_list(int index) const;
  std::string* _internal_add_pod_name_list();
  public:

  // string session_id = 2;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string engine_config = 4;
  void clear_engine_config();
  const std::string& engine_config() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_engine_config(ArgT0&& arg0, ArgT... args);
  std::string* mutable_engine_config();
  PROTOBUF_MUST_USE_RESULT std::string* release_engine_config();
  void set_allocated_engine_config(std::string* engine_config);
  private:
  const std::string& _internal_engine_config() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_engine_config(const std::string& value);
  std::string* _internal_mutable_engine_config();
  public:

  // string namespace = 7;
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // .gs.rpc.ClusterType cluster_type = 3;
  void clear_cluster_type();
  ::gs::rpc::ClusterType cluster_type() const;
  void set_cluster_type(::gs::rpc::ClusterType value);
  private:
  ::gs::rpc::ClusterType _internal_cluster_type() const;
  void _internal_set_cluster_type(::gs::rpc::ClusterType value);
  public:

  // int32 num_workers = 6;
  void clear_num_workers();
  ::PROTOBUF_NAMESPACE_ID::int32 num_workers() const;
  void set_num_workers(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_workers() const;
  void _internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.ConnectSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> pod_name_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr engine_config_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  int cluster_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_workers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.HeartBeatRequest) */ {
 public:
  inline HeartBeatRequest() : HeartBeatRequest(nullptr) {}
  ~HeartBeatRequest() override;
  explicit constexpr HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatRequest(const HeartBeatRequest& from);
  HeartBeatRequest(HeartBeatRequest&& from) noexcept
    : HeartBeatRequest() {
    *this = ::std::move(from);
  }

  inline HeartBeatRequest& operator=(const HeartBeatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatRequest& operator=(HeartBeatRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatRequest* internal_default_instance() {
    return reinterpret_cast<const HeartBeatRequest*>(
               &_HeartBeatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeartBeatRequest& a, HeartBeatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatRequest* New() const final {
    return new HeartBeatRequest();
  }

  HeartBeatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeatRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.HeartBeatRequest";
  }
  protected:
  explicit HeartBeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs.rpc.HeartBeatRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class HeartBeatResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.HeartBeatResponse) */ {
 public:
  inline HeartBeatResponse() : HeartBeatResponse(nullptr) {}
  ~HeartBeatResponse() override;
  explicit constexpr HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeartBeatResponse(const HeartBeatResponse& from);
  HeartBeatResponse(HeartBeatResponse&& from) noexcept
    : HeartBeatResponse() {
    *this = ::std::move(from);
  }

  inline HeartBeatResponse& operator=(const HeartBeatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeatResponse& operator=(HeartBeatResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeartBeatResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeartBeatResponse* internal_default_instance() {
    return reinterpret_cast<const HeartBeatResponse*>(
               &_HeartBeatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeartBeatResponse& a, HeartBeatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeatResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeatResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeatResponse* New() const final {
    return new HeartBeatResponse();
  }

  HeartBeatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeatResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeartBeatResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeartBeatResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.HeartBeatResponse";
  }
  protected:
  explicit HeartBeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs.rpc.HeartBeatResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RunStepRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.RunStepRequest) */ {
 public:
  inline RunStepRequest() : RunStepRequest(nullptr) {}
  ~RunStepRequest() override;
  explicit constexpr RunStepRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunStepRequest(const RunStepRequest& from);
  RunStepRequest(RunStepRequest&& from) noexcept
    : RunStepRequest() {
    *this = ::std::move(from);
  }

  inline RunStepRequest& operator=(const RunStepRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunStepRequest& operator=(RunStepRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunStepRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunStepRequest* internal_default_instance() {
    return reinterpret_cast<const RunStepRequest*>(
               &_RunStepRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RunStepRequest& a, RunStepRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RunStepRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunStepRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunStepRequest* New() const final {
    return new RunStepRequest();
  }

  RunStepRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunStepRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunStepRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RunStepRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunStepRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.RunStepRequest";
  }
  protected:
  explicit RunStepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kDagDefFieldNumber = 2,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .gs.rpc.DagDef dag_def = 2;
  bool has_dag_def() const;
  private:
  bool _internal_has_dag_def() const;
  public:
  void clear_dag_def();
  const ::gs::rpc::DagDef& dag_def() const;
  PROTOBUF_MUST_USE_RESULT ::gs::rpc::DagDef* release_dag_def();
  ::gs::rpc::DagDef* mutable_dag_def();
  void set_allocated_dag_def(::gs::rpc::DagDef* dag_def);
  private:
  const ::gs::rpc::DagDef& _internal_dag_def() const;
  ::gs::rpc::DagDef* _internal_mutable_dag_def();
  public:
  void unsafe_arena_set_allocated_dag_def(
      ::gs::rpc::DagDef* dag_def);
  ::gs::rpc::DagDef* unsafe_arena_release_dag_def();

  // @@protoc_insertion_point(class_scope:gs.rpc.RunStepRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::gs::rpc::DagDef* dag_def_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class RunStepResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.RunStepResponse) */ {
 public:
  inline RunStepResponse() : RunStepResponse(nullptr) {}
  ~RunStepResponse() override;
  explicit constexpr RunStepResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RunStepResponse(const RunStepResponse& from);
  RunStepResponse(RunStepResponse&& from) noexcept
    : RunStepResponse() {
    *this = ::std::move(from);
  }

  inline RunStepResponse& operator=(const RunStepResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunStepResponse& operator=(RunStepResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RunStepResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RunStepResponse* internal_default_instance() {
    return reinterpret_cast<const RunStepResponse*>(
               &_RunStepResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RunStepResponse& a, RunStepResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RunStepResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RunStepResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RunStepResponse* New() const final {
    return new RunStepResponse();
  }

  RunStepResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunStepResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RunStepResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RunStepResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunStepResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.RunStepResponse";
  }
  protected:
  explicit RunStepResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
    kErrorMsgFieldNumber = 3,
    kFullExceptionFieldNumber = 4,
    kCodeFieldNumber = 2,
  };
  // repeated .gs.rpc.OpResult results = 1;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::gs::rpc::OpResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpResult >*
      mutable_results();
  private:
  const ::gs::rpc::OpResult& _internal_results(int index) const;
  ::gs::rpc::OpResult* _internal_add_results();
  public:
  const ::gs::rpc::OpResult& results(int index) const;
  ::gs::rpc::OpResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpResult >&
      results() const;

  // string error_msg = 3;
  void clear_error_msg();
  const std::string& error_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_msg();
  void set_allocated_error_msg(std::string* error_msg);
  private:
  const std::string& _internal_error_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_msg(const std::string& value);
  std::string* _internal_mutable_error_msg();
  public:

  // bytes full_exception = 4;
  void clear_full_exception();
  const std::string& full_exception() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_exception(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_exception();
  PROTOBUF_MUST_USE_RESULT std::string* release_full_exception();
  void set_allocated_full_exception(std::string* full_exception);
  private:
  const std::string& _internal_full_exception() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_exception(const std::string& value);
  std::string* _internal_mutable_full_exception();
  public:

  // .gs.rpc.Code code = 2;
  void clear_code();
  ::gs::rpc::Code code() const;
  void set_code(::gs::rpc::Code value);
  private:
  ::gs::rpc::Code _internal_code() const;
  void _internal_set_code(::gs::rpc::Code value);
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.RunStepResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpResult > results_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_exception_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class FetchLogsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.FetchLogsRequest) */ {
 public:
  inline FetchLogsRequest() : FetchLogsRequest(nullptr) {}
  ~FetchLogsRequest() override;
  explicit constexpr FetchLogsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchLogsRequest(const FetchLogsRequest& from);
  FetchLogsRequest(FetchLogsRequest&& from) noexcept
    : FetchLogsRequest() {
    *this = ::std::move(from);
  }

  inline FetchLogsRequest& operator=(const FetchLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLogsRequest& operator=(FetchLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchLogsRequest* internal_default_instance() {
    return reinterpret_cast<const FetchLogsRequest*>(
               &_FetchLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FetchLogsRequest& a, FetchLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLogsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLogsRequest* New() const final {
    return new FetchLogsRequest();
  }

  FetchLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLogsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchLogsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FetchLogsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.FetchLogsRequest";
  }
  protected:
  explicit FetchLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.FetchLogsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class FetchLogsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.FetchLogsResponse) */ {
 public:
  inline FetchLogsResponse() : FetchLogsResponse(nullptr) {}
  ~FetchLogsResponse() override;
  explicit constexpr FetchLogsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FetchLogsResponse(const FetchLogsResponse& from);
  FetchLogsResponse(FetchLogsResponse&& from) noexcept
    : FetchLogsResponse() {
    *this = ::std::move(from);
  }

  inline FetchLogsResponse& operator=(const FetchLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FetchLogsResponse& operator=(FetchLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FetchLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FetchLogsResponse* internal_default_instance() {
    return reinterpret_cast<const FetchLogsResponse*>(
               &_FetchLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FetchLogsResponse& a, FetchLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(FetchLogsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FetchLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FetchLogsResponse* New() const final {
    return new FetchLogsResponse();
  }

  FetchLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FetchLogsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FetchLogsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FetchLogsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FetchLogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.FetchLogsResponse";
  }
  protected:
  explicit FetchLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoMessageFieldNumber = 2,
    kErrorMessageFieldNumber = 3,
  };
  // string info_message = 2;
  void clear_info_message();
  const std::string& info_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_info_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_info_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_info_message();
  void set_allocated_info_message(std::string* info_message);
  private:
  const std::string& _internal_info_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info_message(const std::string& value);
  std::string* _internal_mutable_info_message();
  public:

  // string error_message = 3;
  void clear_error_message();
  const std::string& error_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_error_message();
  void set_allocated_error_message(std::string* error_message);
  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(const std::string& value);
  std::string* _internal_mutable_error_message();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.FetchLogsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr info_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class CloseSessionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.CloseSessionRequest) */ {
 public:
  inline CloseSessionRequest() : CloseSessionRequest(nullptr) {}
  ~CloseSessionRequest() override;
  explicit constexpr CloseSessionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseSessionRequest(const CloseSessionRequest& from);
  CloseSessionRequest(CloseSessionRequest&& from) noexcept
    : CloseSessionRequest() {
    *this = ::std::move(from);
  }

  inline CloseSessionRequest& operator=(const CloseSessionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSessionRequest& operator=(CloseSessionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSessionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSessionRequest* internal_default_instance() {
    return reinterpret_cast<const CloseSessionRequest*>(
               &_CloseSessionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CloseSessionRequest& a, CloseSessionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSessionRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSessionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseSessionRequest* New() const final {
    return new CloseSessionRequest();
  }

  CloseSessionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseSessionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseSessionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseSessionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseSessionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.CloseSessionRequest";
  }
  protected:
  explicit CloseSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
  };
  // string session_id = 1;
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // @@protoc_insertion_point(class_scope:gs.rpc.CloseSessionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class CloseSessionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gs.rpc.CloseSessionResponse) */ {
 public:
  inline CloseSessionResponse() : CloseSessionResponse(nullptr) {}
  ~CloseSessionResponse() override;
  explicit constexpr CloseSessionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CloseSessionResponse(const CloseSessionResponse& from);
  CloseSessionResponse(CloseSessionResponse&& from) noexcept
    : CloseSessionResponse() {
    *this = ::std::move(from);
  }

  inline CloseSessionResponse& operator=(const CloseSessionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseSessionResponse& operator=(CloseSessionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CloseSessionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CloseSessionResponse* internal_default_instance() {
    return reinterpret_cast<const CloseSessionResponse*>(
               &_CloseSessionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseSessionResponse& a, CloseSessionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseSessionResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseSessionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseSessionResponse* New() const final {
    return new CloseSessionResponse();
  }

  CloseSessionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseSessionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CloseSessionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CloseSessionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseSessionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gs.rpc.CloseSessionResponse";
  }
  protected:
  explicit CloseSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gs.rpc.CloseSessionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_graphscope_2fproto_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectSessionRequest

// bool cleanup_instance = 1;
inline void ConnectSessionRequest::clear_cleanup_instance() {
  cleanup_instance_ = false;
}
inline bool ConnectSessionRequest::_internal_cleanup_instance() const {
  return cleanup_instance_;
}
inline bool ConnectSessionRequest::cleanup_instance() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionRequest.cleanup_instance)
  return _internal_cleanup_instance();
}
inline void ConnectSessionRequest::_internal_set_cleanup_instance(bool value) {
  
  cleanup_instance_ = value;
}
inline void ConnectSessionRequest::set_cleanup_instance(bool value) {
  _internal_set_cleanup_instance(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionRequest.cleanup_instance)
}

// int32 dangling_timeout_seconds = 2;
inline void ConnectSessionRequest::clear_dangling_timeout_seconds() {
  dangling_timeout_seconds_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectSessionRequest::_internal_dangling_timeout_seconds() const {
  return dangling_timeout_seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectSessionRequest::dangling_timeout_seconds() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionRequest.dangling_timeout_seconds)
  return _internal_dangling_timeout_seconds();
}
inline void ConnectSessionRequest::_internal_set_dangling_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dangling_timeout_seconds_ = value;
}
inline void ConnectSessionRequest::set_dangling_timeout_seconds(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dangling_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionRequest.dangling_timeout_seconds)
}

// string version = 3;
inline void ConnectSessionRequest::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ConnectSessionRequest::version() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionRequest.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectSessionRequest::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionRequest.version)
}
inline std::string* ConnectSessionRequest::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:gs.rpc.ConnectSessionRequest.version)
  return _s;
}
inline const std::string& ConnectSessionRequest::_internal_version() const {
  return version_.Get();
}
inline void ConnectSessionRequest::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectSessionRequest::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectSessionRequest::release_version() {
  // @@protoc_insertion_point(field_release:gs.rpc.ConnectSessionRequest.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectSessionRequest::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.ConnectSessionRequest.version)
}

// bool reconnect = 4;
inline void ConnectSessionRequest::clear_reconnect() {
  reconnect_ = false;
}
inline bool ConnectSessionRequest::_internal_reconnect() const {
  return reconnect_;
}
inline bool ConnectSessionRequest::reconnect() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionRequest.reconnect)
  return _internal_reconnect();
}
inline void ConnectSessionRequest::_internal_set_reconnect(bool value) {
  
  reconnect_ = value;
}
inline void ConnectSessionRequest::set_reconnect(bool value) {
  _internal_set_reconnect(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionRequest.reconnect)
}

// -------------------------------------------------------------------

// ConnectSessionResponse

// string session_id = 2;
inline void ConnectSessionResponse::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& ConnectSessionResponse::session_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectSessionResponse::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.session_id)
}
inline std::string* ConnectSessionResponse::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.ConnectSessionResponse.session_id)
  return _s;
}
inline const std::string& ConnectSessionResponse::_internal_session_id() const {
  return session_id_.Get();
}
inline void ConnectSessionResponse::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.ConnectSessionResponse.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectSessionResponse::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.ConnectSessionResponse.session_id)
}

// .gs.rpc.ClusterType cluster_type = 3;
inline void ConnectSessionResponse::clear_cluster_type() {
  cluster_type_ = 0;
}
inline ::gs::rpc::ClusterType ConnectSessionResponse::_internal_cluster_type() const {
  return static_cast< ::gs::rpc::ClusterType >(cluster_type_);
}
inline ::gs::rpc::ClusterType ConnectSessionResponse::cluster_type() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.cluster_type)
  return _internal_cluster_type();
}
inline void ConnectSessionResponse::_internal_set_cluster_type(::gs::rpc::ClusterType value) {
  
  cluster_type_ = value;
}
inline void ConnectSessionResponse::set_cluster_type(::gs::rpc::ClusterType value) {
  _internal_set_cluster_type(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.cluster_type)
}

// string engine_config = 4;
inline void ConnectSessionResponse::clear_engine_config() {
  engine_config_.ClearToEmpty();
}
inline const std::string& ConnectSessionResponse::engine_config() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.engine_config)
  return _internal_engine_config();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectSessionResponse::set_engine_config(ArgT0&& arg0, ArgT... args) {
 
 engine_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.engine_config)
}
inline std::string* ConnectSessionResponse::mutable_engine_config() {
  std::string* _s = _internal_mutable_engine_config();
  // @@protoc_insertion_point(field_mutable:gs.rpc.ConnectSessionResponse.engine_config)
  return _s;
}
inline const std::string& ConnectSessionResponse::_internal_engine_config() const {
  return engine_config_.Get();
}
inline void ConnectSessionResponse::_internal_set_engine_config(const std::string& value) {
  
  engine_config_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::_internal_mutable_engine_config() {
  
  return engine_config_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::release_engine_config() {
  // @@protoc_insertion_point(field_release:gs.rpc.ConnectSessionResponse.engine_config)
  return engine_config_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectSessionResponse::set_allocated_engine_config(std::string* engine_config) {
  if (engine_config != nullptr) {
    
  } else {
    
  }
  engine_config_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), engine_config,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.ConnectSessionResponse.engine_config)
}

// repeated string pod_name_list = 5;
inline int ConnectSessionResponse::_internal_pod_name_list_size() const {
  return pod_name_list_.size();
}
inline int ConnectSessionResponse::pod_name_list_size() const {
  return _internal_pod_name_list_size();
}
inline void ConnectSessionResponse::clear_pod_name_list() {
  pod_name_list_.Clear();
}
inline std::string* ConnectSessionResponse::add_pod_name_list() {
  std::string* _s = _internal_add_pod_name_list();
  // @@protoc_insertion_point(field_add_mutable:gs.rpc.ConnectSessionResponse.pod_name_list)
  return _s;
}
inline const std::string& ConnectSessionResponse::_internal_pod_name_list(int index) const {
  return pod_name_list_.Get(index);
}
inline const std::string& ConnectSessionResponse::pod_name_list(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.pod_name_list)
  return _internal_pod_name_list(index);
}
inline std::string* ConnectSessionResponse::mutable_pod_name_list(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.ConnectSessionResponse.pod_name_list)
  return pod_name_list_.Mutable(index);
}
inline void ConnectSessionResponse::set_pod_name_list(int index, const std::string& value) {
  pod_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::set_pod_name_list(int index, std::string&& value) {
  pod_name_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::set_pod_name_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pod_name_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::set_pod_name_list(int index, const char* value, size_t size) {
  pod_name_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline std::string* ConnectSessionResponse::_internal_add_pod_name_list() {
  return pod_name_list_.Add();
}
inline void ConnectSessionResponse::add_pod_name_list(const std::string& value) {
  pod_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::add_pod_name_list(std::string&& value) {
  pod_name_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::add_pod_name_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  pod_name_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline void ConnectSessionResponse::add_pod_name_list(const char* value, size_t size) {
  pod_name_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gs.rpc.ConnectSessionResponse.pod_name_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConnectSessionResponse::pod_name_list() const {
  // @@protoc_insertion_point(field_list:gs.rpc.ConnectSessionResponse.pod_name_list)
  return pod_name_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConnectSessionResponse::mutable_pod_name_list() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.ConnectSessionResponse.pod_name_list)
  return &pod_name_list_;
}

// int32 num_workers = 6;
inline void ConnectSessionResponse::clear_num_workers() {
  num_workers_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectSessionResponse::_internal_num_workers() const {
  return num_workers_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectSessionResponse::num_workers() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.num_workers)
  return _internal_num_workers();
}
inline void ConnectSessionResponse::_internal_set_num_workers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_workers_ = value;
}
inline void ConnectSessionResponse::set_num_workers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_workers(value);
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.num_workers)
}

// string namespace = 7;
inline void ConnectSessionResponse::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& ConnectSessionResponse::namespace_() const {
  // @@protoc_insertion_point(field_get:gs.rpc.ConnectSessionResponse.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectSessionResponse::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.ConnectSessionResponse.namespace)
}
inline std::string* ConnectSessionResponse::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:gs.rpc.ConnectSessionResponse.namespace)
  return _s;
}
inline const std::string& ConnectSessionResponse::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ConnectSessionResponse::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectSessionResponse::release_namespace_() {
  // @@protoc_insertion_point(field_release:gs.rpc.ConnectSessionResponse.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ConnectSessionResponse::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.ConnectSessionResponse.namespace)
}

// -------------------------------------------------------------------

// HeartBeatRequest

// -------------------------------------------------------------------

// HeartBeatResponse

// -------------------------------------------------------------------

// RunStepRequest

// string session_id = 1;
inline void RunStepRequest::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& RunStepRequest::session_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunStepRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.RunStepRequest.session_id)
}
inline std::string* RunStepRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.RunStepRequest.session_id)
  return _s;
}
inline const std::string& RunStepRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void RunStepRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RunStepRequest::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RunStepRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.RunStepRequest.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RunStepRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.RunStepRequest.session_id)
}

// .gs.rpc.DagDef dag_def = 2;
inline bool RunStepRequest::_internal_has_dag_def() const {
  return this != internal_default_instance() && dag_def_ != nullptr;
}
inline bool RunStepRequest::has_dag_def() const {
  return _internal_has_dag_def();
}
inline const ::gs::rpc::DagDef& RunStepRequest::_internal_dag_def() const {
  const ::gs::rpc::DagDef* p = dag_def_;
  return p != nullptr ? *p : reinterpret_cast<const ::gs::rpc::DagDef&>(
      ::gs::rpc::_DagDef_default_instance_);
}
inline const ::gs::rpc::DagDef& RunStepRequest::dag_def() const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepRequest.dag_def)
  return _internal_dag_def();
}
inline void RunStepRequest::unsafe_arena_set_allocated_dag_def(
    ::gs::rpc::DagDef* dag_def) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dag_def_);
  }
  dag_def_ = dag_def;
  if (dag_def) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:gs.rpc.RunStepRequest.dag_def)
}
inline ::gs::rpc::DagDef* RunStepRequest::release_dag_def() {
  
  ::gs::rpc::DagDef* temp = dag_def_;
  dag_def_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::gs::rpc::DagDef* RunStepRequest::unsafe_arena_release_dag_def() {
  // @@protoc_insertion_point(field_release:gs.rpc.RunStepRequest.dag_def)
  
  ::gs::rpc::DagDef* temp = dag_def_;
  dag_def_ = nullptr;
  return temp;
}
inline ::gs::rpc::DagDef* RunStepRequest::_internal_mutable_dag_def() {
  
  if (dag_def_ == nullptr) {
    auto* p = CreateMaybeMessage<::gs::rpc::DagDef>(GetArenaForAllocation());
    dag_def_ = p;
  }
  return dag_def_;
}
inline ::gs::rpc::DagDef* RunStepRequest::mutable_dag_def() {
  ::gs::rpc::DagDef* _msg = _internal_mutable_dag_def();
  // @@protoc_insertion_point(field_mutable:gs.rpc.RunStepRequest.dag_def)
  return _msg;
}
inline void RunStepRequest::set_allocated_dag_def(::gs::rpc::DagDef* dag_def) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dag_def_);
  }
  if (dag_def) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dag_def));
    if (message_arena != submessage_arena) {
      dag_def = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dag_def, submessage_arena);
    }
    
  } else {
    
  }
  dag_def_ = dag_def;
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.RunStepRequest.dag_def)
}

// -------------------------------------------------------------------

// RunStepResponse

// repeated .gs.rpc.OpResult results = 1;
inline int RunStepResponse::_internal_results_size() const {
  return results_.size();
}
inline int RunStepResponse::results_size() const {
  return _internal_results_size();
}
inline ::gs::rpc::OpResult* RunStepResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:gs.rpc.RunStepResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpResult >*
RunStepResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:gs.rpc.RunStepResponse.results)
  return &results_;
}
inline const ::gs::rpc::OpResult& RunStepResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::gs::rpc::OpResult& RunStepResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepResponse.results)
  return _internal_results(index);
}
inline ::gs::rpc::OpResult* RunStepResponse::_internal_add_results() {
  return results_.Add();
}
inline ::gs::rpc::OpResult* RunStepResponse::add_results() {
  ::gs::rpc::OpResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:gs.rpc.RunStepResponse.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gs::rpc::OpResult >&
RunStepResponse::results() const {
  // @@protoc_insertion_point(field_list:gs.rpc.RunStepResponse.results)
  return results_;
}

// .gs.rpc.Code code = 2;
inline void RunStepResponse::clear_code() {
  code_ = 0;
}
inline ::gs::rpc::Code RunStepResponse::_internal_code() const {
  return static_cast< ::gs::rpc::Code >(code_);
}
inline ::gs::rpc::Code RunStepResponse::code() const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepResponse.code)
  return _internal_code();
}
inline void RunStepResponse::_internal_set_code(::gs::rpc::Code value) {
  
  code_ = value;
}
inline void RunStepResponse::set_code(::gs::rpc::Code value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:gs.rpc.RunStepResponse.code)
}

// string error_msg = 3;
inline void RunStepResponse::clear_error_msg() {
  error_msg_.ClearToEmpty();
}
inline const std::string& RunStepResponse::error_msg() const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepResponse.error_msg)
  return _internal_error_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunStepResponse::set_error_msg(ArgT0&& arg0, ArgT... args) {
 
 error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.RunStepResponse.error_msg)
}
inline std::string* RunStepResponse::mutable_error_msg() {
  std::string* _s = _internal_mutable_error_msg();
  // @@protoc_insertion_point(field_mutable:gs.rpc.RunStepResponse.error_msg)
  return _s;
}
inline const std::string& RunStepResponse::_internal_error_msg() const {
  return error_msg_.Get();
}
inline void RunStepResponse::_internal_set_error_msg(const std::string& value) {
  
  error_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RunStepResponse::_internal_mutable_error_msg() {
  
  return error_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RunStepResponse::release_error_msg() {
  // @@protoc_insertion_point(field_release:gs.rpc.RunStepResponse.error_msg)
  return error_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RunStepResponse::set_allocated_error_msg(std::string* error_msg) {
  if (error_msg != nullptr) {
    
  } else {
    
  }
  error_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.RunStepResponse.error_msg)
}

// bytes full_exception = 4;
inline void RunStepResponse::clear_full_exception() {
  full_exception_.ClearToEmpty();
}
inline const std::string& RunStepResponse::full_exception() const {
  // @@protoc_insertion_point(field_get:gs.rpc.RunStepResponse.full_exception)
  return _internal_full_exception();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RunStepResponse::set_full_exception(ArgT0&& arg0, ArgT... args) {
 
 full_exception_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.RunStepResponse.full_exception)
}
inline std::string* RunStepResponse::mutable_full_exception() {
  std::string* _s = _internal_mutable_full_exception();
  // @@protoc_insertion_point(field_mutable:gs.rpc.RunStepResponse.full_exception)
  return _s;
}
inline const std::string& RunStepResponse::_internal_full_exception() const {
  return full_exception_.Get();
}
inline void RunStepResponse::_internal_set_full_exception(const std::string& value) {
  
  full_exception_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RunStepResponse::_internal_mutable_full_exception() {
  
  return full_exception_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RunStepResponse::release_full_exception() {
  // @@protoc_insertion_point(field_release:gs.rpc.RunStepResponse.full_exception)
  return full_exception_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RunStepResponse::set_allocated_full_exception(std::string* full_exception) {
  if (full_exception != nullptr) {
    
  } else {
    
  }
  full_exception_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_exception,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.RunStepResponse.full_exception)
}

// -------------------------------------------------------------------

// FetchLogsRequest

// string session_id = 1;
inline void FetchLogsRequest::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& FetchLogsRequest::session_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.FetchLogsRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchLogsRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.FetchLogsRequest.session_id)
}
inline std::string* FetchLogsRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.FetchLogsRequest.session_id)
  return _s;
}
inline const std::string& FetchLogsRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void FetchLogsRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FetchLogsRequest::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FetchLogsRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.FetchLogsRequest.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FetchLogsRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.FetchLogsRequest.session_id)
}

// -------------------------------------------------------------------

// FetchLogsResponse

// string info_message = 2;
inline void FetchLogsResponse::clear_info_message() {
  info_message_.ClearToEmpty();
}
inline const std::string& FetchLogsResponse::info_message() const {
  // @@protoc_insertion_point(field_get:gs.rpc.FetchLogsResponse.info_message)
  return _internal_info_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchLogsResponse::set_info_message(ArgT0&& arg0, ArgT... args) {
 
 info_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.FetchLogsResponse.info_message)
}
inline std::string* FetchLogsResponse::mutable_info_message() {
  std::string* _s = _internal_mutable_info_message();
  // @@protoc_insertion_point(field_mutable:gs.rpc.FetchLogsResponse.info_message)
  return _s;
}
inline const std::string& FetchLogsResponse::_internal_info_message() const {
  return info_message_.Get();
}
inline void FetchLogsResponse::_internal_set_info_message(const std::string& value) {
  
  info_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FetchLogsResponse::_internal_mutable_info_message() {
  
  return info_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FetchLogsResponse::release_info_message() {
  // @@protoc_insertion_point(field_release:gs.rpc.FetchLogsResponse.info_message)
  return info_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FetchLogsResponse::set_allocated_info_message(std::string* info_message) {
  if (info_message != nullptr) {
    
  } else {
    
  }
  info_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), info_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.FetchLogsResponse.info_message)
}

// string error_message = 3;
inline void FetchLogsResponse::clear_error_message() {
  error_message_.ClearToEmpty();
}
inline const std::string& FetchLogsResponse::error_message() const {
  // @@protoc_insertion_point(field_get:gs.rpc.FetchLogsResponse.error_message)
  return _internal_error_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FetchLogsResponse::set_error_message(ArgT0&& arg0, ArgT... args) {
 
 error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.FetchLogsResponse.error_message)
}
inline std::string* FetchLogsResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:gs.rpc.FetchLogsResponse.error_message)
  return _s;
}
inline const std::string& FetchLogsResponse::_internal_error_message() const {
  return error_message_.Get();
}
inline void FetchLogsResponse::_internal_set_error_message(const std::string& value) {
  
  error_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FetchLogsResponse::_internal_mutable_error_message() {
  
  return error_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FetchLogsResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:gs.rpc.FetchLogsResponse.error_message)
  return error_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FetchLogsResponse::set_allocated_error_message(std::string* error_message) {
  if (error_message != nullptr) {
    
  } else {
    
  }
  error_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.FetchLogsResponse.error_message)
}

// -------------------------------------------------------------------

// CloseSessionRequest

// string session_id = 1;
inline void CloseSessionRequest::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& CloseSessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:gs.rpc.CloseSessionRequest.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CloseSessionRequest::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gs.rpc.CloseSessionRequest.session_id)
}
inline std::string* CloseSessionRequest::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:gs.rpc.CloseSessionRequest.session_id)
  return _s;
}
inline const std::string& CloseSessionRequest::_internal_session_id() const {
  return session_id_.Get();
}
inline void CloseSessionRequest::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CloseSessionRequest::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CloseSessionRequest::release_session_id() {
  // @@protoc_insertion_point(field_release:gs.rpc.CloseSessionRequest.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CloseSessionRequest::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:gs.rpc.CloseSessionRequest.session_id)
}

// -------------------------------------------------------------------

// CloseSessionResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace gs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graphscope_2fproto_2fmessage_2eproto
