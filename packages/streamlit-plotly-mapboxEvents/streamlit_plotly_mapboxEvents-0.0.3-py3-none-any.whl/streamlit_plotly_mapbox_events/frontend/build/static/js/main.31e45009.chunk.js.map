{"version":3,"sources":["StreamlitPlotlyMapBoxEventsComponent.tsx","index.tsx"],"names":["StreamlitPlotlyMapBoxEvents","props","clickedElements","hoveredElements","selectedElements","relayoutinfo","render","plot_obj","JSON","parse","args","override_height","override_width","click_event","select_event","hover_event","relayout_event","Streamlit","setFrameHeight","data","layout","config","frames","onClick","plotlyClickHandler","onSelected","plotlySelectHandler","onHover","plotlyHoverHandler","onRelayout","plotlyReLayoutEventHandler","style","width","height","className","plotlyMarkerHandler","sendData","marker","points","forEach","arrayItem","push","lat","lon","pointNumber","pointIndex","relayout","raw","zoom","returnArr","this","element","setComponentValue","stringify","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","StreamlitPlotlyMapBoxEventsComponent","document","getElementById"],"mappings":"iRAeMA,E,kDAKF,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IALFC,qBAIkB,IAHlBC,qBAGkB,IAFlBC,sBAEkB,IADlBC,kBACkB,IAOxBC,OAAS,WAET,IAAMC,EAAWC,KAAKC,MAAM,EAAKR,MAAMS,KAAX,UACtBC,EAAkB,EAAKV,MAAMS,KAAX,gBAClBE,EAAiB,EAAKX,MAAMS,KAAX,eAGjBG,EAAc,EAAKZ,MAAMS,KAAX,YACdI,EAAe,EAAKb,MAAMS,KAAX,aACfK,EAAc,EAAKd,MAAMS,KAAX,YACdM,EAAiB,EAAKf,MAAMS,KAAX,eAGvB,OADAO,IAAUC,eAAeP,GAEvB,kBAAC,IAAD,CACEQ,KAAMZ,EAASY,KACfC,OAAQb,EAASa,OACjBC,OAAQd,EAASc,OACjBC,OAAQf,EAASe,OACjBC,QAASV,EAAc,EAAKW,mBAAqB,aACjDC,WAAYX,EAAe,EAAKY,oBAAsB,aACtDC,QAASZ,EAAc,EAAKa,mBAAqB,aACjDC,WAAYb,EAAiB,EAAKc,2BAA4B,aAC9DC,MAAO,CAAEC,MAAOpB,EAAgBqB,OAAQtB,GACxCuB,UAAU,mBA/BU,EAmDlBR,oBAAsB,SAACP,GAC7B,EAAKf,iBAAmB,EAAK+B,oBAAoBhB,GACjD,EAAKiB,YArDmB,EAuDlBZ,mBAAqB,SAACL,GAC5B,EAAKjB,gBAAkB,EAAKiC,oBAAoBhB,GAChD,EAAKiB,YAzDmB,EA2DlBR,mBAAqB,SAACT,GAC5B,EAAKhB,gBAAkB,EAAKgC,oBAAoBhB,GAChD,EAAKiB,YA7DmB,EAiElBD,oBAAsB,SAAChB,GAE7B,IAAIkB,EAAqB,GASzB,OARAlB,EAAKmB,OAAOC,SAAQ,SAAUC,GAC5BH,EAAOI,KAAK,CACVC,IAAKF,EAAUE,IACfC,IAAKH,EAAUG,IACfC,YAAaJ,EAAUI,YACvBC,WAAYL,EAAUK,gBAGnBR,GA5EiB,EAgFlBP,2BAA6B,SAACX,GAEpC,GAAIA,EAAK,iBAAiB,CACxB,IAAM2B,EAAmB,CACvBC,IAAK5B,EACLuB,IAAKvB,EAAK,iBAAiBuB,IAC3BC,IAAKxB,EAAK,iBAAiBwB,IAC3BK,KAAM7B,EAAK,gBAEb,EAAKd,aAAeyC,EACpB,EAAKV,aAxFL,EAAKlC,gBAAkB,GACvB,EAAKC,gBAAkB,GACvB,EAAKC,iBAAmB,GACxB,EAAKC,aAAe,GALE,E,4CAoC1B,WACE,IAAM4C,EAAwB,GACM,CAClC,CAACC,KAAKjD,MAAMS,KAAX,YAAgCwC,KAAKhD,iBACtC,CAACgD,KAAKjD,MAAMS,KAAX,aAAiCwC,KAAK9C,kBACvC,CAAC8C,KAAKjD,MAAMS,KAAX,YAAgCwC,KAAK/C,iBACtC,CAAC+C,KAAKjD,MAAMS,KAAX,eAAmCwC,KAAK7C,eAE3BkC,SAAQ,SAAAY,GAClBA,EAAQ,IACVF,EAAUR,KAAKU,EAAQ,OAG3BlC,IAAUmC,kBAAkB5C,KAAK6C,UAAUJ,Q,GAtDLK,KAoG3BC,cAAwBvD,GC/GvCwD,IAASlD,OACP,kBAAC,IAAMmD,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.31e45009.chunk.js","sourcesContent":["import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport Plot from 'react-plotly.js';\r\n\r\ninterface layout {\r\n  raw: object,\r\n  lat: number,\r\n  lon: number,\r\n  zoom: number,\r\n}\r\n\r\nclass StreamlitPlotlyMapBoxEvents extends StreamlitComponentBase {\r\n  private clickedElements: Array<any>\r\n  private hoveredElements: Array<any>\r\n  private selectedElements: Array<any>\r\n  private relayoutinfo: Object\r\n    constructor(props: any) {\r\n      super(props)\r\n      this.clickedElements = []\r\n      this.hoveredElements = []\r\n      this.selectedElements = []\r\n      this.relayoutinfo = {}\r\n    }\r\n    render = (): ReactNode => {\r\n    // Pull Plotly object from args and parse\r\n    const plot_obj = JSON.parse(this.props.args[\"plot_obj\"]);\r\n    const override_height = this.props.args[\"override_height\"];\r\n    const override_width = this.props.args[\"override_width\"];\r\n\r\n    // Event booleans\r\n    const click_event = this.props.args[\"click_event\"];\r\n    const select_event = this.props.args[\"select_event\"];\r\n    const hover_event = this.props.args[\"hover_event\"];\r\n    const relayout_event = this.props.args[\"relayout_event\"]\r\n\r\n    Streamlit.setFrameHeight(override_height);\r\n    return (\r\n      <Plot\r\n        data={plot_obj.data}\r\n        layout={plot_obj.layout}\r\n        config={plot_obj.config}\r\n        frames={plot_obj.frames}\r\n        onClick={click_event ? this.plotlyClickHandler : function() { }}\r\n        onSelected={select_event ? this.plotlySelectHandler : function() { }}\r\n        onHover={hover_event ? this.plotlyHoverHandler : function() { }}\r\n        onRelayout={relayout_event ? this.plotlyReLayoutEventHandler: function() { } }\r\n        style={{ width: override_width, height: override_height }}\r\n        className=\"stPlotlyChart\"\r\n      />\r\n    )\r\n  }\r\n  /** send value back to python backend */\r\n  private sendData() {\r\n    const returnArr: Array<any> = []\r\n    const arrayOfInterest: Array<any> = [\r\n      [this.props.args[\"click_event\"], this.clickedElements],\r\n      [this.props.args[\"select_event\"], this.selectedElements],\r\n      [this.props.args[\"hover_event\"], this.hoveredElements],\r\n      [this.props.args[\"relayout_event\"], this.relayoutinfo],\r\n    ]\r\n    arrayOfInterest.forEach(element => {\r\n      if (element[0]) {\r\n        returnArr.push(element[1])\r\n      }\r\n    });\r\n    Streamlit.setComponentValue(JSON.stringify(returnArr))\r\n  }\r\n  private plotlySelectHandler = (data: any) => {\r\n    this.selectedElements = this.plotlyMarkerHandler(data)\r\n    this.sendData()\r\n  }\r\n  private plotlyClickHandler = (data: any) => {\r\n    this.clickedElements = this.plotlyMarkerHandler(data)\r\n    this.sendData()\r\n  }\r\n  private plotlyHoverHandler = (data: any) => {\r\n    this.hoveredElements = this.plotlyMarkerHandler(data)\r\n    this.sendData()\r\n  }\r\n\r\n  /** Click handler for plot. */\r\n  private plotlyMarkerHandler = (data: any) => {\r\n    // Build array of points to return\r\n    var marker: Array<any> = [];\r\n    data.points.forEach(function (arrayItem: any) {\r\n      marker.push({\r\n        lat: arrayItem.lat,\r\n        lon: arrayItem.lon,\r\n        pointNumber: arrayItem.pointNumber,\r\n        pointIndex: arrayItem.pointIndex\r\n      })\r\n    });\r\n    return marker\r\n  }\r\n\r\n  /** Relayout Eventhandler */\r\n  private plotlyReLayoutEventHandler = (data: any) => {\r\n    // Build array of points to return\r\n    if (data['mapbox.center']){\r\n      const relayout: layout = {\r\n        raw: data,\r\n        lat: data['mapbox.center'].lat,\r\n        lon: data['mapbox.center'].lon,\r\n        zoom: data['mapbox.zoom'],\r\n      }\r\n      this.relayoutinfo = relayout\r\n      this.sendData()\r\n    }\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(StreamlitPlotlyMapBoxEvents)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport StreamlitPlotlyMapBoxEventsComponent from \"./StreamlitPlotlyMapBoxEventsComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StreamlitPlotlyMapBoxEventsComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}