{"version":3,"file":"490.8230fa98ee0eccac9c60.chunk.js","mappings":"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","sources":["webpack://quilt-navigator/./app/containers/Bucket/PackageDirectoryDialog.tsx","webpack://quilt-navigator/./app/containers/Bucket/Dir.tsx","webpack://quilt-navigator/./app/containers/Bucket/CopyButton.js"],"sourcesContent":["import * as FF from 'final-form'\nimport { basename } from 'path'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RF from 'react-final-form'\nimport * as M from '@material-ui/core'\n\nimport * as Intercom from 'components/Intercom'\nimport * as AWS from 'utils/AWS'\nimport * as Data from 'utils/Data'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport StyledLink from 'utils/StyledLink'\nimport * as validators from 'utils/validators'\nimport type * as workflows from 'utils/workflows'\n\nimport * as PD from './PackageDialog'\nimport * as requests from './requests'\n\nconst prepareEntries = (entries: PD.FilesSelectorState, path: string) => {\n  const selected = entries.filter(R.propEq('selected', true))\n  if (selected.length === entries.length)\n    return [{ logical_key: '.', path, is_dir: true }]\n  return selected.map(({ type, name }) => ({\n    logical_key: name,\n    path: path + name,\n    is_dir: type === 'dir',\n  }))\n}\n\ninterface DialogTitleProps {\n  bucket: string\n  path?: string\n}\n\nfunction DialogTitle({ bucket, path }: DialogTitleProps) {\n  const { urls } = NamedRoutes.use()\n\n  const directory = path ? `\"${path}\"` : 'root'\n\n  return (\n    <>\n      Push {directory} directory to{' '}\n      <StyledLink target=\"_blank\" to={urls.bucketOverview(bucket)}>\n        {bucket}\n      </StyledLink>{' '}\n      bucket as package\n    </>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  files: {\n    height: '100%',\n  },\n  form: {\n    height: '100%',\n  },\n  meta: {\n    display: 'flex',\n    flexDirection: 'column',\n    paddingTop: t.spacing(3),\n    overflowY: 'auto',\n  },\n}))\n\ninterface DialogFormProps {\n  bucket: string\n  path: string\n  truncated?: boolean\n  dirs: string[]\n  files: { key: string; size: number }[]\n  close: () => void\n  setSubmitting: (submitting: boolean) => void\n  setSuccess: (success: { name: string; hash: string }) => void\n  setWorkflow: (workflow: workflows.Workflow) => void\n  successor: workflows.Successor\n  workflowsConfig: workflows.WorkflowsConfig\n}\n\nfunction DialogForm({\n  bucket,\n  path,\n  truncated,\n  dirs,\n  files,\n  close,\n  responseError,\n  schema,\n  schemaLoading,\n  selectedWorkflow,\n  setSubmitting,\n  setSuccess,\n  setWorkflow,\n  successor,\n  validate: validateMetaInput,\n  workflowsConfig,\n}: DialogFormProps & PD.SchemaFetcherRenderProps) {\n  const nameValidator = PD.useNameValidator(selectedWorkflow)\n  const nameExistence = PD.useNameExistence(successor.slug)\n  const [nameWarning, setNameWarning] = React.useState<React.ReactNode>('')\n  const [metaHeight, setMetaHeight] = React.useState(0)\n  const validateWorkflow = PD.useWorkflowValidator(workflowsConfig)\n  const classes = useStyles()\n\n  const createPackage = requests.useWrapPackage()\n\n  const dialogContentClasses = PD.useContentStyles({ metaHeight })\n\n  const onSubmit = React.useCallback(\n    async ({\n      commitMessage: message,\n      files: filesValue,\n      ...values\n    }: {\n      commitMessage: string\n      name: string\n      meta: object\n      workflow: workflows.Workflow\n      files: PD.FilesSelectorState\n      // eslint-disable-next-line consistent-return\n    }) => {\n      try {\n        const res = await createPackage(\n          {\n            ...values,\n            entries: prepareEntries(filesValue, path),\n            message,\n            source: bucket,\n            target: {\n              bucket: successor.slug,\n              name: values.name,\n            },\n          },\n          schema,\n        )\n        setSuccess({ name: values.name, hash: res.top_hash })\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.log('error creating manifest', e)\n        const errorMessage = e instanceof Error ? e.message : null\n        return { [FF.FORM_ERROR]: errorMessage || PD.ERROR_MESSAGES.MANIFEST }\n      }\n    },\n    [bucket, successor, createPackage, setSuccess, schema, path],\n  )\n\n  const initialFiles: PD.FilesSelectorState = React.useMemo(\n    () => [\n      ...dirs.map((dir) => ({\n        type: 'dir' as const,\n        name: basename(dir),\n        selected: false,\n      })),\n      ...files.map((file) => ({\n        type: 'file' as const,\n        name: basename(file.key),\n        size: file.size,\n        selected: false,\n      })),\n    ],\n    [dirs, files],\n  )\n\n  const onSubmitWrapped = async (...args: Parameters<typeof onSubmit>) => {\n    setSubmitting(true)\n    try {\n      return await onSubmit(...args)\n    } finally {\n      setSubmitting(false)\n    }\n  }\n\n  const handleNameChange = React.useCallback(\n    async (name) => {\n      const nameExists = await nameExistence.validate(name)\n      const warning = <PD.PackageNameWarning exists={!!nameExists} />\n\n      if (warning !== nameWarning) {\n        setNameWarning(warning)\n      }\n    },\n    [nameWarning, nameExistence],\n  )\n\n  const [editorElement, setEditorElement] = React.useState<HTMLElement | null>(null)\n  const resizeObserver = React.useMemo(\n    () =>\n      new window.ResizeObserver((entries) => {\n        const { height } = entries[0]!.contentRect\n        setMetaHeight(height)\n      }),\n    [setMetaHeight],\n  )\n  const onFormChange = React.useCallback(\n    async ({ values }) => {\n      handleNameChange(values.name)\n    },\n    [handleNameChange],\n  )\n\n  React.useEffect(() => {\n    if (editorElement) resizeObserver.observe(editorElement)\n    return () => {\n      if (editorElement) resizeObserver.unobserve(editorElement)\n    }\n  }, [editorElement, resizeObserver])\n\n  // HACK: FIXME: it triggers name validation with correct workflow\n  const [hideMeta, setHideMeta] = React.useState(false)\n\n  return (\n    <RF.Form\n      onSubmit={onSubmitWrapped}\n      subscription={{\n        submitting: true,\n        submitFailed: true,\n        error: true,\n        submitError: true,\n        hasValidationErrors: true,\n      }}\n    >\n      {({\n        handleSubmit,\n        submitting,\n        submitFailed,\n        error,\n        submitError,\n        hasValidationErrors,\n      }) => (\n        <>\n          <M.DialogTitle>\n            <DialogTitle bucket={successor.slug} path={path} />\n          </M.DialogTitle>\n\n          <M.DialogContent classes={dialogContentClasses}>\n            <form onSubmit={handleSubmit} className={classes.form}>\n              <RF.FormSpy\n                subscription={{ dirtyFields: true, values: true }}\n                onChange={onFormChange}\n              />\n\n              <RF.FormSpy\n                subscription={{ modified: true, values: true }}\n                onChange={({ modified, values }) => {\n                  if (modified?.workflow && values.workflow !== selectedWorkflow) {\n                    setWorkflow(values.workflow)\n\n                    // HACK: FIXME: it triggers name validation with correct workflow\n                    setHideMeta(true)\n                    setTimeout(() => {\n                      setHideMeta(false)\n                    }, 300)\n                  }\n                }}\n              />\n\n              <PD.Container>\n                <PD.LeftColumn>\n                  <RF.Field\n                    component={PD.WorkflowInput}\n                    name=\"workflow\"\n                    workflowsConfig={workflowsConfig}\n                    initialValue={selectedWorkflow}\n                    validate={validateWorkflow}\n                    validateFields={['meta', 'workflow']}\n                    errors={{\n                      required: 'Workflow is required for this bucket.',\n                    }}\n                  />\n\n                  <RF.Field\n                    component={PD.PackageNameInput}\n                    directory={path}\n                    workflow={selectedWorkflow || workflowsConfig}\n                    name=\"name\"\n                    validate={validators.composeAsync(\n                      validators.required,\n                      nameValidator.validate,\n                    )}\n                    validateFields={['name']}\n                    errors={{\n                      required: 'Enter a package name',\n                      invalid: 'Invalid package name',\n                      pattern: `Name should match \"${selectedWorkflow?.packageNamePattern}\" regexp`,\n                    }}\n                    helperText={nameWarning}\n                  />\n\n                  <RF.Field\n                    component={PD.CommitMessageInput}\n                    name=\"commitMessage\"\n                    validate={validators.required as FF.FieldValidator<string>}\n                    validateFields={['commitMessage']}\n                    errors={{\n                      required: 'Enter a commit message',\n                    }}\n                  />\n\n                  {schemaLoading || hideMeta ? (\n                    <PD.MetaInputSkeleton\n                      className={classes.meta}\n                      ref={setEditorElement}\n                    />\n                  ) : (\n                    <RF.Field\n                      className={classes.meta}\n                      component={PD.MetaInput}\n                      name=\"meta\"\n                      bucket={successor.slug}\n                      schema={schema}\n                      schemaError={responseError}\n                      validate={validateMetaInput}\n                      validateFields={['meta']}\n                      isEqual={R.equals}\n                      initialValue={PD.EMPTY_META_VALUE}\n                      ref={setEditorElement}\n                    />\n                  )}\n                </PD.LeftColumn>\n\n                <PD.RightColumn>\n                  <RF.Field\n                    className={classes.files}\n                    // @ts-expect-error\n                    component={PD.FilesSelector}\n                    name=\"files\"\n                    validate={\n                      PD.validateNonEmptySelection as FF.FieldValidator<PD.FilesSelectorState>\n                    }\n                    validateFields={['files']}\n                    errors={{\n                      [PD.EMPTY_SELECTION]: 'Select something to create a package',\n                    }}\n                    title=\"Select files and directories to package\"\n                    isEqual={R.equals}\n                    initialValue={initialFiles}\n                    truncated={truncated}\n                  />\n                </PD.RightColumn>\n              </PD.Container>\n\n              <input type=\"submit\" style={{ display: 'none' }} />\n            </form>\n          </M.DialogContent>\n          <M.DialogActions>\n            {submitting && (\n              <PD.SubmitSpinner>\n                {successor.copyData\n                  ? 'Copying files and writing manifest'\n                  : 'Writing manifest'}\n              </PD.SubmitSpinner>\n            )}\n\n            {!submitting && (!!error || !!submitError) && (\n              <M.Box flexGrow={1} display=\"flex\" alignItems=\"center\" pl={2}>\n                <M.Icon color=\"error\">error_outline</M.Icon>\n                <M.Box pl={1} />\n                <M.Typography variant=\"body2\" color=\"error\">\n                  {error || submitError}\n                </M.Typography>\n              </M.Box>\n            )}\n\n            <M.Button onClick={close} disabled={submitting}>\n              Cancel\n            </M.Button>\n            <M.Button\n              onClick={handleSubmit}\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={submitting || (submitFailed && hasValidationErrors)}\n            >\n              Push\n            </M.Button>\n          </M.DialogActions>\n        </>\n      )}\n    </RF.Form>\n  )\n}\n\ninterface DialogErrorProps {\n  bucket: string\n  path: string\n  error: $TSFixMe\n  onCancel: () => void\n}\n\nfunction DialogError({ bucket, error, path, onCancel }: DialogErrorProps) {\n  return (\n    <PD.DialogError\n      error={error}\n      skeletonElement={<PD.FormSkeleton animate={false} />}\n      title={<DialogTitle bucket={bucket} path={path} />}\n      onCancel={onCancel}\n    />\n  )\n}\n\ninterface DialogLoadingProps {\n  bucket: string\n  path: string\n  onCancel: () => void\n}\n\nfunction DialogLoading({ bucket, path, onCancel }: DialogLoadingProps) {\n  return (\n    <PD.DialogLoading\n      skeletonElement={<PD.FormSkeleton />}\n      title={<DialogTitle bucket={bucket} path={path} />}\n      onCancel={onCancel}\n    />\n  )\n}\n\ninterface PackageDirectoryDialogProps {\n  bucket: string\n  path: string\n  truncated?: boolean\n  dirs: string[]\n  files: { key: string; size: number }[]\n  open: boolean\n  successor: workflows.Successor | null\n  onClose?: () => void\n  onExited: (param: { pushed: null | { name: string; hash: string } }) => void\n}\n\nexport default function PackageDirectoryDialog({\n  bucket,\n  path,\n  truncated,\n  dirs,\n  files,\n  onClose,\n  onExited,\n  open,\n  successor,\n}: PackageDirectoryDialogProps) {\n  const s3 = AWS.S3.use()\n\n  const [workflow, setWorkflow] = React.useState<workflows.Workflow>()\n  const [success, setSuccess] = React.useState<{ name: string; hash: string } | null>(\n    null,\n  )\n  const [submitting, setSubmitting] = React.useState(false)\n\n  const workflowsData = Data.use(\n    requests.workflowsConfig,\n    { s3, bucket: successor ? successor.slug : '' },\n    { noAutoFetch: !successor || !open },\n  )\n\n  const handleClose = React.useCallback(() => {\n    if (submitting) return\n\n    onExited({\n      pushed: success,\n    })\n    if (onClose) onClose()\n    setSuccess(null)\n  }, [submitting, success, setSuccess, onClose, onExited])\n\n  const handleExited = React.useCallback(() => {\n    if (submitting) return\n\n    onExited({\n      pushed: success,\n    })\n    if (onClose) onClose()\n    setSuccess(null)\n  }, [submitting, success, setSuccess, onClose, onExited])\n\n  Intercom.usePauseVisibilityWhen(open)\n\n  return (\n    <M.Dialog\n      fullWidth\n      maxWidth={success ? 'sm' : 'lg'}\n      onClose={handleClose}\n      onExited={handleExited}\n      open={open}\n      scroll=\"body\"\n    >\n      {success && successor ? (\n        <PD.DialogSuccess\n          bucket={successor.slug}\n          name={success.name}\n          hash={success.hash}\n          onClose={handleClose}\n        />\n      ) : (\n        workflowsData.case({\n          Err: (e: Error) =>\n            successor && (\n              <DialogError\n                bucket={successor.slug}\n                path={path}\n                onCancel={handleClose}\n                error={e}\n              />\n            ),\n          Ok: (workflowsConfig: workflows.WorkflowsConfig) =>\n            successor && (\n              <PD.SchemaFetcher workflow={workflow} workflowsConfig={workflowsConfig}>\n                {(schemaProps) => (\n                  <DialogForm\n                    {...schemaProps}\n                    {...{\n                      bucket,\n                      path,\n                      truncated,\n                      dirs,\n                      files,\n                      close: handleClose,\n                      setSubmitting,\n                      setSuccess,\n                      setWorkflow,\n                      successor,\n                      workflowsConfig,\n                    }}\n                  />\n                )}\n              </PD.SchemaFetcher>\n            ),\n          _: () =>\n            successor && (\n              <DialogLoading bucket={successor.slug} path={path} onCancel={handleClose} />\n            ),\n        })\n      )}\n    </M.Dialog>\n  )\n}\n","import { basename } from 'path'\n\nimport dedent from 'dedent'\nimport * as R from 'ramda'\nimport * as React from 'react'\nimport * as RRDom from 'react-router-dom'\nimport * as M from '@material-ui/core'\n\nimport { Crumb, copyWithoutSpaces, render as renderCrumbs } from 'components/BreadCrumbs'\nimport AsyncResult from 'utils/AsyncResult'\nimport * as AWS from 'utils/AWS'\nimport * as Config from 'utils/Config'\nimport { useData } from 'utils/Data'\nimport MetaTitle from 'utils/MetaTitle'\nimport * as NamedRoutes from 'utils/NamedRoutes'\nimport * as BucketPreferences from 'utils/BucketPreferences'\nimport parseSearch from 'utils/parseSearch'\nimport { getBreadCrumbs, ensureNoSlash, withoutPrefix, up, decode } from 'utils/s3paths'\nimport type * as workflows from 'utils/workflows'\n\nimport Code from './Code'\nimport CopyButton from './CopyButton'\nimport * as FileView from './FileView'\nimport { Listing, PrefixFilter } from './Listing'\nimport PackageDirectoryDialog from './PackageDirectoryDialog'\nimport Summary from './Summary'\nimport { displayError } from './errors'\nimport * as requests from './requests'\n\ninterface RouteMap {\n  bucketDir: [bucket: string, path?: string, prefix?: string]\n  bucketFile: [bucket: string, path: string, version?: string]\n}\n\ntype Urls = NamedRoutes.Urls<RouteMap>\n\nconst getCrumbs = R.compose(\n  R.intersperse(Crumb.Sep(<>&nbsp;/ </>)),\n  ({ bucket, path, urls }: { bucket: string; path: string; urls: Urls }) =>\n    [{ label: bucket, path: '' }, ...getBreadCrumbs(path)].map(\n      ({ label, path: segPath }) =>\n        Crumb.Segment({\n          label,\n          to: segPath === path ? undefined : urls.bucketDir(bucket, segPath),\n        }),\n    ),\n)\n\nfunction useFormattedListing(r: requests.BucketListingResult) {\n  const { urls } = NamedRoutes.use<RouteMap>()\n  return React.useMemo(() => {\n    const dirs = r.dirs.map((name) => ({\n      type: 'dir' as const,\n      name: ensureNoSlash(withoutPrefix(r.path, name)),\n      to: urls.bucketDir(r.bucket, name),\n    }))\n    const files = r.files.map(({ key, size, modified, archived }) => ({\n      type: 'file' as const,\n      name: withoutPrefix(r.path, key),\n      to: urls.bucketFile(r.bucket, key),\n      size,\n      modified,\n      archived,\n    }))\n    const items = [\n      ...(r.path !== '' && !r.prefix\n        ? [\n            {\n              type: 'dir' as const,\n              name: '..',\n              to: urls.bucketDir(r.bucket, up(r.path)),\n            },\n          ]\n        : []),\n      ...dirs,\n      ...files,\n    ]\n    // filter-out files with same name as one of dirs\n    return R.uniqBy(R.prop('name'), items)\n  }, [r, urls])\n}\n\ninterface DirContentsProps {\n  response: requests.BucketListingResult\n  locked: boolean\n  bucket: string\n  path: string\n  successor: workflows.Successor | null\n  setSuccessor: (successor: workflows.Successor | null) => void\n  loadMore?: () => void\n}\n\nfunction DirContents({\n  response,\n  locked,\n  bucket,\n  path,\n  successor,\n  setSuccessor,\n  loadMore,\n}: DirContentsProps) {\n  const history = RRDom.useHistory()\n  const { urls } = NamedRoutes.use<RouteMap>()\n\n  const onPackageDirectoryDialogExited = React.useCallback(() => {\n    setSuccessor(null)\n  }, [setSuccessor])\n\n  const setPrefix = React.useCallback(\n    (newPrefix) => {\n      history.push(urls.bucketDir(bucket, path, newPrefix))\n    },\n    [history, urls, bucket, path],\n  )\n\n  const items = useFormattedListing(response)\n\n  // TODO: should prefix filtering affect summary?\n  return (\n    <>\n      <PackageDirectoryDialog\n        bucket={bucket}\n        path={path}\n        files={response.files}\n        dirs={response.dirs}\n        truncated={response.truncated}\n        open={!!successor}\n        successor={successor}\n        onExited={onPackageDirectoryDialogExited}\n      />\n\n      <Listing\n        items={items}\n        locked={locked}\n        loadMore={loadMore}\n        truncated={response.truncated}\n        prefixFilter={response.prefix}\n        toolbarContents={\n          <PrefixFilter\n            key={`${response.bucket}/${response.path}`}\n            prefix={response.prefix}\n            setPrefix={setPrefix}\n          />\n        }\n      />\n      {/* Remove TS workaround when Summary will be converted to .tsx */}\n      {/* @ts-expect-error */}\n      <Summary files={response.files} mkUrl={null} />\n    </>\n  )\n}\n\nconst useStyles = M.makeStyles((t) => ({\n  crumbs: {\n    ...t.typography.body1,\n    maxWidth: '100%',\n    overflowWrap: 'break-word',\n  },\n  button: {\n    flexShrink: 0,\n    marginBottom: '-3px',\n    marginLeft: t.spacing(1),\n    marginTop: '-3px',\n  },\n}))\n\ninterface DirParams {\n  bucket: string\n  path?: string\n}\n\nexport default function Dir({\n  match: {\n    params: { bucket, path: encodedPath = '' },\n  },\n  location: l,\n}: RRDom.RouteComponentProps<DirParams>) {\n  const classes = useStyles()\n  const { urls } = NamedRoutes.use<RouteMap>()\n  const { noDownload } = Config.use()\n  const s3 = AWS.S3.use()\n  const preferences = BucketPreferences.use()\n  const { prefix } = parseSearch(l.search)\n  const path = decode(encodedPath)\n  const dest = path ? basename(path) : bucket\n\n  const code = React.useMemo(\n    () => [\n      {\n        label: 'Python',\n        hl: 'python',\n        contents: dedent`\n          import quilt3\n          b = quilt3.Bucket(\"s3://${bucket}\")\n          # list files\n          b.ls(\"${path}\")\n          # download\n          b.fetch(\"${path}\", \"./${dest}\")\n        `,\n      },\n      {\n        label: 'CLI',\n        hl: 'bash',\n        contents: dedent`\n          # list files\n          aws s3 ls \"s3://${bucket}/${path}\"\n          # download\n          aws s3 cp --recursive \"s3://${bucket}/${path}\" \"./${dest}\"\n        `,\n      },\n    ],\n    [bucket, path, dest],\n  )\n\n  const [successor, setSuccessor] = React.useState<workflows.Successor | null>(null)\n\n  const [prev, setPrev] = React.useState<requests.BucketListingResult | null>(null)\n\n  React.useLayoutEffect(() => {\n    // reset accumulated results when path and / or prefix change\n    setPrev(null)\n  }, [path, prefix])\n\n  const data = useData(requests.bucketListing, {\n    s3,\n    bucket,\n    path,\n    prefix,\n    prev,\n  })\n\n  const loadMore = React.useCallback(() => {\n    AsyncResult.case(\n      {\n        Ok: (res: requests.BucketListingResult) => {\n          // this triggers a re-render and fetching of next page of results\n          if (res.continuationToken) setPrev(res)\n        },\n        _: () => {},\n      },\n      data.result,\n    )\n  }, [data.result])\n\n  return (\n    <M.Box pt={2} pb={4}>\n      <MetaTitle>{[path || 'Files', bucket]}</MetaTitle>\n\n      <M.Box display=\"flex\" alignItems=\"flex-start\" mb={2}>\n        <div className={classes.crumbs} onCopy={copyWithoutSpaces}>\n          {renderCrumbs(getCrumbs({ bucket, path, urls }))}\n        </div>\n        <M.Box flexGrow={1} />\n        {preferences?.ui?.actions?.createPackage && (\n          <CopyButton bucket={bucket} className={classes.button} onChange={setSuccessor}>\n            Create package from directory\n          </CopyButton>\n        )}\n        {!noDownload && (\n          <FileView.ZipDownloadForm\n            className={classes.button}\n            suffix={`dir/${bucket}/${path}`}\n            label=\"Download directory\"\n          />\n        )}\n      </M.Box>\n\n      <Code gutterBottom>{code}</Code>\n\n      {data.case({\n        Err: displayError(),\n        Init: () => null,\n        _: (x: $TSFixMe) => {\n          const res: requests.BucketListingResult | null = AsyncResult.getPrevResult(x)\n          return res ? (\n            <DirContents\n              response={res}\n              locked={!AsyncResult.Ok.is(x)}\n              bucket={bucket}\n              path={path}\n              successor={successor}\n              setSuccessor={setSuccessor}\n              loadMore={loadMore}\n            />\n          ) : (\n            <M.CircularProgress />\n          )\n        },\n      })}\n    </M.Box>\n  )\n}\n","import * as R from 'ramda'\nimport * as React from 'react'\nimport * as M from '@material-ui/core'\nimport * as Lab from '@material-ui/lab'\n\nimport * as AWS from 'utils/AWS'\nimport { useData } from 'utils/Data'\nimport StyledLink from 'utils/StyledLink'\nimport { docs } from 'constants/urls'\n\nimport * as ERRORS from './errors'\nimport * as requests from './requests'\n\nfunction MenuPlaceholder() {\n  const t = M.useTheme()\n\n  return (\n    <M.Box minWidth={t.spacing(22)}>\n      <M.MenuItem disabled>\n        <Lab.Skeleton height={t.spacing(6)} width=\"100%\" />\n      </M.MenuItem>\n      <M.MenuItem disabled>\n        <Lab.Skeleton height={t.spacing(6)} width=\"100%\" />\n      </M.MenuItem>\n      <M.MenuItem disabled>\n        <Lab.Skeleton height={t.spacing(6)} width=\"100%\" />\n      </M.MenuItem>\n    </M.Box>\n  )\n}\n\nconst MenuItem = React.forwardRef(function MenuItem({ item, onClick }, ref) {\n  return (\n    <M.MenuItem\n      ref={ref}\n      onClick={React.useCallback(() => onClick(item), [item, onClick])}\n    >\n      <M.ListItemText primary={item.name} secondary={item.url} />\n    </M.MenuItem>\n  )\n})\n\nfunction SuccessorsSelect({ anchorEl, bucket, open, onChange, onClose }) {\n  const s3 = AWS.S3.use()\n  const data = useData(requests.workflowsConfig, { s3, bucket })\n\n  return (\n    <M.Menu anchorEl={anchorEl} onClose={onClose} open={open}>\n      {data.case({\n        Ok: ({ successors }) =>\n          successors.length ? (\n            successors.map((successor) => (\n              <MenuItem key={successor.slug} item={successor} onClick={onChange} />\n            ))\n          ) : (\n            <M.Box px={2} py={1}>\n              <M.Typography gutterBottom>\n                Add or update a config.yml file to populate this menu.\n              </M.Typography>\n              <M.Typography>\n                <StyledLink\n                  href={`${docs}/advanced-usage/workflows#pushing-across-buckets-with-the-quilt-catalog`}\n                  target=\"_blank\"\n                >\n                  Learn more\n                </StyledLink>\n                .\n              </M.Typography>\n            </M.Box>\n          ),\n        _: () => <MenuPlaceholder />,\n        Err: (error) => (\n          <M.Box px={2} py={1}>\n            <M.Typography gutterBottom>\n              Error: <code>{error.message}</code>\n            </M.Typography>\n            {R.is(ERRORS.WorkflowsConfigInvalid, error) && (\n              <M.Typography>\n                Please fix the workflows config according to{' '}\n                <StyledLink href={`${docs}/advanced-usage/workflows`} target=\"_blank\">\n                  the documentation\n                </StyledLink>\n              </M.Typography>\n            )}\n          </M.Box>\n        ),\n      })}\n    </M.Menu>\n  )\n}\n\nfunction Button({ children, className, onClick }) {\n  const t = M.useTheme()\n  const sm = M.useMediaQuery(t.breakpoints.down('sm'))\n\n  const props = {\n    'aria-haspopup': 'true',\n    className,\n    onClick,\n    size: 'small',\n  }\n\n  return sm ? (\n    <M.IconButton edge=\"end\" title={children} {...props}>\n      <M.Icon>exit_to_app</M.Icon>\n    </M.IconButton>\n  ) : (\n    <M.Button variant=\"outlined\" {...props}>\n      {children}\n    </M.Button>\n  )\n}\n\nexport default function CopyButton({ bucket, className, children, onChange }) {\n  const [menuAnchorEl, setMenuAnchorEl] = React.useState(null)\n\n  const onButtonClick = React.useCallback(\n    (event) => setMenuAnchorEl(event.currentTarget),\n    [setMenuAnchorEl],\n  )\n\n  const onMenuClick = React.useCallback(\n    (menuItem) => {\n      onChange(menuItem)\n      setMenuAnchorEl(null)\n    },\n    [onChange, setMenuAnchorEl],\n  )\n\n  const onMenuClose = React.useCallback(() => setMenuAnchorEl(null), [setMenuAnchorEl])\n\n  return (\n    <>\n      <Button className={className} onClick={onButtonClick}>\n        {children}\n      </Button>\n\n      <SuccessorsSelect\n        anchorEl={menuAnchorEl}\n        bucket={bucket}\n        open={!!menuAnchorEl}\n        onChange={onMenuClick}\n        onClose={onMenuClose}\n      />\n    </>\n  )\n}\n"],"names":["prepareEntries","entries","path","selected","filter","length","logical_key","is_dir","map","type","name","bucket","urls","NamedRoutes","directory","StyledLink","target","to","bucketOverview","useStyles","t","files","height","form","meta","display","flexDirection","paddingTop","spacing","overflowY","DialogForm","truncated","dirs","close","responseError","schema","schemaLoading","selectedWorkflow","setSubmitting","setSuccess","setWorkflow","successor","validateMetaInput","workflowsConfig","nameValidator","nameExistence","slug","nameWarning","setNameWarning","metaHeight","setMetaHeight","validateWorkflow","classes","createPackage","requests","dialogContentClasses","onSubmit","message","filesValue","values","source","res","hash","top_hash","console","log","errorMessage","Error","initialFiles","dir","basename","file","key","size","handleNameChange","validate","nameExists","warning","exists","editorElement","setEditorElement","resizeObserver","window","ResizeObserver","contentRect","onFormChange","observe","unobserve","hideMeta","setHideMeta","args","subscription","submitting","submitFailed","error","submitError","hasValidationErrors","handleSubmit","className","dirtyFields","onChange","modified","workflow","setTimeout","component","initialValue","validateFields","errors","required","validators","invalid","pattern","packageNamePattern","helperText","ref","schemaError","isEqual","title","style","copyData","flexGrow","alignItems","pl","color","variant","onClick","disabled","DialogError","onCancel","skeletonElement","animate","DialogLoading","PackageDirectoryDialog","onClose","onExited","open","s3","AWS","S3","use","success","workflowsData","Data","noAutoFetch","handleClose","pushed","handleExited","Intercom","fullWidth","maxWidth","scroll","case","Err","e","Ok","schemaProps","_","getCrumbs","label","segPath","undefined","bucketDir","DirContents","response","locked","setSuccessor","loadMore","history","onPackageDirectoryDialogExited","setPrefix","newPrefix","push","items","r","archived","bucketFile","prefix","up","useFormattedListing","Listing","prefixFilter","toolbarContents","Summary","mkUrl","crumbs","typography","body1","overflowWrap","button","flexShrink","marginBottom","marginLeft","marginTop","Dir","params","encodedPath","l","noDownload","Config","preferences","BucketPreferences","parseSearch","search","dest","code","hl","contents","prev","setPrev","data","AsyncResult","continuationToken","result","pt","pb","MetaTitle","mb","onCopy","ui","actions","CopyButton","FileView","suffix","Code","gutterBottom","Init","x","MenuPlaceholder","minWidth","width","MenuItem","item","primary","secondary","url","SuccessorsSelect","anchorEl","successors","px","py","href","Button","children","props","breakpoints","down","edge","menuAnchorEl","setMenuAnchorEl","onButtonClick","event","currentTarget","onMenuClick","menuItem","onMenuClose"],"sourceRoot":""}