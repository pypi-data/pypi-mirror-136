{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Output classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from tabulate import tabulate\n",
    "\n",
    "from streng.common.io.output import OutputTable, OutputString, OutputExtended"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Some example data\n",
    "\n",
    "given as a list of dictionaries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = [{'__iteration': 1,\n",
    "  'x_y': 0.04213429287708525,\n",
    "  'y_y': 1310.8730715333027,\n",
    "  'x_u': 0.44886,\n",
    "  'y_u': 1311.3866666666665,\n",
    "  'kinel': 1.2627555238564436,\n",
    "  'kel': 31111.785247171465,\n",
    "  'k_06': 24639.615704484408,\n",
    "  'error': 0.26267331521364284},\n",
    " {'__iteration': 2,\n",
    "  'x_y': 0.05395737709629134,\n",
    "  'y_y': 1329.4890360745674,\n",
    "  'x_u': 0.44886,\n",
    "  'y_u': 1329.4890360745674,\n",
    "  'kinel': -91.76544991341024,\n",
    "  'kel': 24639.615704484408,\n",
    "  'k_06': 24476.018099972942,\n",
    "  'error': 0.006683995895216576},\n",
    " {'__iteration': 3,\n",
    "  'x_y': 0.05434285482397955,\n",
    "  'y_y': 1330.0966982759253,\n",
    "  'x_u': 0.44886,\n",
    "  'y_u': 1330.0966982759253,\n",
    "  'kinel': -94.94217563576123,\n",
    "  'kel': 24476.018099972942,\n",
    "  'k_06': 24469.75466696404,\n",
    "  'error': 0.0002559663181812895},\n",
    " {'__iteration': 4,\n",
    "  'x_y': 0.05435772305859232,\n",
    "  'y_y': 1330.1201474985282,\n",
    "  'x_u': 0.44886,\n",
    "  'y_u': 1330.1201474985282,\n",
    "  'kinel': -95.064891451666,\n",
    "  'kel': 24469.75466696404,\n",
    "  'k_06': 24469.51314473135,\n",
    "  'error': 9.870332575089462e-06},\n",
    " {'__iteration': 5,\n",
    "  'x_y': 0.05435829655145874,\n",
    "  'y_y': 1330.1210519911244,\n",
    "  'x_u': 0.44886,\n",
    "  'y_u': 1330.1210519911244,\n",
    "  'kinel': -95.0696250854122,\n",
    "  'kel': 24469.51314473135,\n",
    "  'k_06': 24469.503828907287,\n",
    "  'error': 3.807116044736897e-07}]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tabulate\n",
    "\n",
    "Not in class but used\n",
    "\n",
    "### using tabulate to show data as markdown table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   __iteration |       x_y |       y_y |       x_u |       y_u |      kinel |       kel |      k_06 |     error |\n",
      "|--------------:|----------:|----------:|----------:|----------:|-----------:|----------:|----------:|----------:|\n",
      "|             1 | 4.213E-02 | 1.311E+03 | 4.489E-01 | 1.311E+03 |  1.263E+00 | 3.111E+04 | 2.464E+04 | 2.627E-01 |\n",
      "|             2 | 5.396E-02 | 1.329E+03 | 4.489E-01 | 1.329E+03 | -9.177E+01 | 2.464E+04 | 2.448E+04 | 6.684E-03 |\n",
      "|             3 | 5.434E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.494E+01 | 2.448E+04 | 2.447E+04 | 2.560E-04 |\n",
      "|             4 | 5.436E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.506E+01 | 2.447E+04 | 2.447E+04 | 9.870E-06 |\n",
      "|             5 | 5.436E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.507E+01 | 2.447E+04 | 2.447E+04 | 3.807E-07 |\n"
     ]
    }
   ],
   "source": [
    "print(tabulate(data, headers='keys', tablefmt=\"pipe\", floatfmt=\".3E\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pandas dataframes\n",
    "Not in class but used"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>__iteration</th>\n",
       "      <th>x_y</th>\n",
       "      <th>y_y</th>\n",
       "      <th>x_u</th>\n",
       "      <th>y_u</th>\n",
       "      <th>kinel</th>\n",
       "      <th>kel</th>\n",
       "      <th>k_06</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.042134</td>\n",
       "      <td>1310.873072</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1311.386667</td>\n",
       "      <td>1.262756</td>\n",
       "      <td>31111.785247</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>2.626733e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.053957</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>-91.765450</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>6.683996e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.054343</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>-94.942176</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>2.559663e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>-95.064891</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>9.870333e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>-95.069625</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>24469.503829</td>\n",
       "      <td>3.807116e-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   __iteration       x_y          y_y      x_u          y_u      kinel  \\\n",
       "0            1  0.042134  1310.873072  0.44886  1311.386667   1.262756   \n",
       "1            2  0.053957  1329.489036  0.44886  1329.489036 -91.765450   \n",
       "2            3  0.054343  1330.096698  0.44886  1330.096698 -94.942176   \n",
       "3            4  0.054358  1330.120147  0.44886  1330.120147 -95.064891   \n",
       "4            5  0.054358  1330.121052  0.44886  1330.121052 -95.069625   \n",
       "\n",
       "            kel          k_06         error  \n",
       "0  31111.785247  24639.615704  2.626733e-01  \n",
       "1  24639.615704  24476.018100  6.683996e-03  \n",
       "2  24476.018100  24469.754667  2.559663e-04  \n",
       "3  24469.754667  24469.513145  9.870333e-06  \n",
       "4  24469.513145  24469.503829  3.807116e-07  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(data=data, columns=list(data[0].keys()))\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class: OutputTable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " An output table given as a list of dictionaries.\n",
      "\n",
      "        .. uml::\n",
      "\n",
      "            class OutputTable {\n",
      "            .. members ..\n",
      "            + data: List[dict] = field(default_factory=list)\n",
      "            .. properties ..\n",
      "            + to_markdown()\n",
      "            + to_panda_dataframe()\n",
      "            .. methods ..\n",
      "            + retrieve()\n",
      "            + retrieve_column_to_list()\n",
      "            + to_quantity_value()\n",
      "            }\n",
      "\n",
      "    It can be converted for presentation (or usage) as a pandas dataframe or a markdown table\n",
      "\n",
      "    Attributes:\n",
      "        data (List[dict]): A list of dictionaries\n",
      "\n",
      "    \n"
     ]
    }
   ],
   "source": [
    "print(OutputTable.__doc__)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### get the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "ot = OutputTable(data=data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### property: to_markdown"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|   __iteration |       x_y |       y_y |       x_u |       y_u |      kinel |       kel |      k_06 |     error |\n",
      "|--------------:|----------:|----------:|----------:|----------:|-----------:|----------:|----------:|----------:|\n",
      "|             1 | 4.213E-02 | 1.311E+03 | 4.489E-01 | 1.311E+03 |  1.263E+00 | 3.111E+04 | 2.464E+04 | 2.627E-01 |\n",
      "|             2 | 5.396E-02 | 1.329E+03 | 4.489E-01 | 1.329E+03 | -9.177E+01 | 2.464E+04 | 2.448E+04 | 6.684E-03 |\n",
      "|             3 | 5.434E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.494E+01 | 2.448E+04 | 2.447E+04 | 2.560E-04 |\n",
      "|             4 | 5.436E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.506E+01 | 2.447E+04 | 2.447E+04 | 9.870E-06 |\n",
      "|             5 | 5.436E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.507E+01 | 2.447E+04 | 2.447E+04 | 3.807E-07 |\n"
     ]
    }
   ],
   "source": [
    "print(ot.to_markdown)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### property: to_panda_dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>__iteration</th>\n",
       "      <th>x_y</th>\n",
       "      <th>y_y</th>\n",
       "      <th>x_u</th>\n",
       "      <th>y_u</th>\n",
       "      <th>kinel</th>\n",
       "      <th>kel</th>\n",
       "      <th>k_06</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.042134</td>\n",
       "      <td>1310.873072</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1311.386667</td>\n",
       "      <td>1.262756</td>\n",
       "      <td>31111.785247</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>2.626733e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.053957</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>-91.765450</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>6.683996e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.054343</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>-94.942176</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>2.559663e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>-95.064891</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>9.870333e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>-95.069625</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>24469.503829</td>\n",
       "      <td>3.807116e-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   __iteration       x_y          y_y      x_u          y_u      kinel  \\\n",
       "0            1  0.042134  1310.873072  0.44886  1311.386667   1.262756   \n",
       "1            2  0.053957  1329.489036  0.44886  1329.489036 -91.765450   \n",
       "2            3  0.054343  1330.096698  0.44886  1330.096698 -94.942176   \n",
       "3            4  0.054358  1330.120147  0.44886  1330.120147 -95.064891   \n",
       "4            5  0.054358  1330.121052  0.44886  1330.121052 -95.069625   \n",
       "\n",
       "            kel          k_06         error  \n",
       "0  31111.785247  24639.615704  2.626733e-01  \n",
       "1  24639.615704  24476.018100  6.683996e-03  \n",
       "2  24476.018100  24469.754667  2.559663e-04  \n",
       "3  24469.754667  24469.513145  9.870333e-06  \n",
       "4  24469.513145  24469.503829  3.807116e-07  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot.to_panda_dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### method: to_quantity_value(row_number)\n",
    "\n",
    "Μετατρέπει σε νέο OutputTable όπου υπάρχουν 2 στήλες: quantity-value.   \n",
    "Αν δεν οριστεί γραμμή του αρχικού OutputTable, διαβάζει την 1η"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| quantity    |     value |\n",
      "|:------------|----------:|\n",
      "| __iteration | 1.000E+00 |\n",
      "| x_y         | 4.213E-02 |\n",
      "| y_y         | 1.311E+03 |\n",
      "| x_u         | 4.489E-01 |\n",
      "| y_u         | 1.311E+03 |\n",
      "| kinel       | 1.263E+00 |\n",
      "| kel         | 3.111E+04 |\n",
      "| k_06        | 2.464E+04 |\n",
      "| error       | 2.627E-01 |\n"
     ]
    }
   ],
   "source": [
    "ot_quantity_value = ot.to_quantity_value()\n",
    "print(ot_quantity_value.to_markdown)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "| quantity    |      value |\n",
      "|:------------|-----------:|\n",
      "| __iteration |  3.000E+00 |\n",
      "| x_y         |  5.434E-02 |\n",
      "| y_y         |  1.330E+03 |\n",
      "| x_u         |  4.489E-01 |\n",
      "| y_u         |  1.330E+03 |\n",
      "| kinel       | -9.494E+01 |\n",
      "| kel         |  2.448E+04 |\n",
      "| k_06        |  2.447E+04 |\n",
      "| error       |  2.560E-04 |\n"
     ]
    }
   ],
   "source": [
    "ot_quantity_value2 = OutputTable()\n",
    "ot_quantity_value2 = ot.to_quantity_value(2)\n",
    "print(ot_quantity_value2.to_markdown)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Class usage"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### not very useful but can work sometimes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.05434285482397955"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot.data[2]['x_y']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### show data as pandas dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>__iteration</th>\n",
       "      <th>x_y</th>\n",
       "      <th>y_y</th>\n",
       "      <th>x_u</th>\n",
       "      <th>y_u</th>\n",
       "      <th>kinel</th>\n",
       "      <th>kel</th>\n",
       "      <th>k_06</th>\n",
       "      <th>error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.042134</td>\n",
       "      <td>1310.873072</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1311.386667</td>\n",
       "      <td>1.262756</td>\n",
       "      <td>31111.785247</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>2.626733e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.053957</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1329.489036</td>\n",
       "      <td>-91.765450</td>\n",
       "      <td>24639.615704</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>6.683996e-03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.054343</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.096698</td>\n",
       "      <td>-94.942176</td>\n",
       "      <td>24476.018100</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>2.559663e-04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.120147</td>\n",
       "      <td>-95.064891</td>\n",
       "      <td>24469.754667</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>9.870333e-06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.054358</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>0.44886</td>\n",
       "      <td>1330.121052</td>\n",
       "      <td>-95.069625</td>\n",
       "      <td>24469.513145</td>\n",
       "      <td>24469.503829</td>\n",
       "      <td>3.807116e-07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   __iteration       x_y          y_y      x_u          y_u      kinel  \\\n",
       "0            1  0.042134  1310.873072  0.44886  1311.386667   1.262756   \n",
       "1            2  0.053957  1329.489036  0.44886  1329.489036 -91.765450   \n",
       "2            3  0.054343  1330.096698  0.44886  1330.096698 -94.942176   \n",
       "3            4  0.054358  1330.120147  0.44886  1330.120147 -95.064891   \n",
       "4            5  0.054358  1330.121052  0.44886  1330.121052 -95.069625   \n",
       "\n",
       "            kel          k_06         error  \n",
       "0  31111.785247  24639.615704  2.626733e-01  \n",
       "1  24639.615704  24476.018100  6.683996e-03  \n",
       "2  24476.018100  24469.754667  2.559663e-04  \n",
       "3  24469.754667  24469.513145  9.870333e-06  \n",
       "4  24469.513145  24469.503829  3.807116e-07  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot.to_panda_dataframe"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### retrieve value from output table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-91.76544991341024"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot.retrieve(search_field='__iteration',\n",
    "            search_value=2,\n",
    "            find_field='kinel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### retrieve column to list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.04213429287708525,\n",
       " 0.05395737709629134,\n",
       " 0.05434285482397955,\n",
       " 0.05435772305859232,\n",
       " 0.05435829655145874]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ot.retrieve_column_to_list('x_y')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OutputString"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "coming soon...see bilin notebook"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## OutputExtended"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "coming soon...see bilin notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'__iteration': 1,\n",
       "  'x_y': 0.04213429287708525,\n",
       "  'y_y': 1310.8730715333027,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1311.3866666666665,\n",
       "  'kinel': 1.2627555238564436,\n",
       "  'kel': 31111.785247171465,\n",
       "  'k_06': 24639.615704484408,\n",
       "  'error': 0.26267331521364284},\n",
       " {'__iteration': 2,\n",
       "  'x_y': 0.05395737709629134,\n",
       "  'y_y': 1329.4890360745674,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1329.4890360745674,\n",
       "  'kinel': -91.76544991341024,\n",
       "  'kel': 24639.615704484408,\n",
       "  'k_06': 24476.018099972942,\n",
       "  'error': 0.006683995895216576},\n",
       " {'__iteration': 3,\n",
       "  'x_y': 0.05434285482397955,\n",
       "  'y_y': 1330.0966982759253,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.0966982759253,\n",
       "  'kinel': -94.94217563576123,\n",
       "  'kel': 24476.018099972942,\n",
       "  'k_06': 24469.75466696404,\n",
       "  'error': 0.0002559663181812895},\n",
       " {'__iteration': 4,\n",
       "  'x_y': 0.05435772305859232,\n",
       "  'y_y': 1330.1201474985282,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.1201474985282,\n",
       "  'kinel': -95.064891451666,\n",
       "  'kel': 24469.75466696404,\n",
       "  'k_06': 24469.51314473135,\n",
       "  'error': 9.870332575089462e-06},\n",
       " {'__iteration': 5,\n",
       "  'x_y': 0.05435829655145874,\n",
       "  'y_y': 1330.1210519911244,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.1210519911244,\n",
       "  'kinel': -95.0696250854122,\n",
       "  'kel': 24469.51314473135,\n",
       "  'k_06': 24469.503828907287,\n",
       "  'error': 3.807116044736897e-07}]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convertDL(val):\n",
    "    if isinstance(val, dict):\n",
    "        return [[k] + v for k, v in val.iteritems()]\n",
    "    return {v[0]: v[1:] for v in val}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# data is list of dicts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make it a dict of lists\n",
    "ddff = pd.DataFrame(data=data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[31111.785247171465,\n",
       " 24639.615704484408,\n",
       " 24476.018099972942,\n",
       " 24469.75466696404,\n",
       " 24469.51314473135]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ddff['kel'].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dict_of_lists = ddff.to_dict()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "__iteration\n",
      "x_y\n",
      "y_y\n",
      "x_u\n",
      "y_u\n",
      "kinel\n",
      "kel\n",
      "k_06\n",
      "error\n"
     ]
    }
   ],
   "source": [
    "for i in data[0].keys():\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_values([0.04213429287708525, 0.05395737709629134, 0.05434285482397955, 0.05435772305859232, 0.05435829655145874])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_dict_of_lists['x_y'].values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def lod_to_dol(list_of_dicts):\n",
    "    '''\n",
    "    converts list of dicts --> dict of lists\n",
    "    '''\n",
    "#     _df = pd.DataFrame(data=list_of_dicts)\n",
    "#     _dol = {}\n",
    "#     for key in [*list_of_dicts[0]]: # [*list_of_dicts[0]] = _column_names = list(list_of_dicts[0].keys())\n",
    "#         _dol[key] = _df[key].tolist()\n",
    "\n",
    "    _dol = {k: [dic[k] for dic in list_of_dicts] for k in list_of_dicts[0]}\n",
    "    return _dol"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "dol = lod_to_dol(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dol['error']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# dol.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def dol_to_lod(dict_of_lists):\n",
    "    '''\n",
    "    converts dict of lists --> list of dicts\n",
    "    '''\n",
    "    _lod = [dict(zip(dict_of_lists,t)) for t in zip(*dict_of_lists.values())]\n",
    "    return _lod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'__iteration': 1,\n",
       "  'x_y': 0.04213429287708525,\n",
       "  'y_y': 1310.8730715333027,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1311.3866666666665,\n",
       "  'kinel': 1.2627555238564436,\n",
       "  'kel': 31111.785247171465,\n",
       "  'k_06': 24639.615704484408,\n",
       "  'error': 0.26267331521364284},\n",
       " {'__iteration': 2,\n",
       "  'x_y': 0.05395737709629134,\n",
       "  'y_y': 1329.4890360745674,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1329.4890360745674,\n",
       "  'kinel': -91.76544991341024,\n",
       "  'kel': 24639.615704484408,\n",
       "  'k_06': 24476.018099972942,\n",
       "  'error': 0.006683995895216576},\n",
       " {'__iteration': 3,\n",
       "  'x_y': 0.05434285482397955,\n",
       "  'y_y': 1330.0966982759253,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.0966982759253,\n",
       "  'kinel': -94.94217563576123,\n",
       "  'kel': 24476.018099972942,\n",
       "  'k_06': 24469.75466696404,\n",
       "  'error': 0.0002559663181812895},\n",
       " {'__iteration': 4,\n",
       "  'x_y': 0.05435772305859232,\n",
       "  'y_y': 1330.1201474985282,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.1201474985282,\n",
       "  'kinel': -95.064891451666,\n",
       "  'kel': 24469.75466696404,\n",
       "  'k_06': 24469.51314473135,\n",
       "  'error': 9.870332575089462e-06},\n",
       " {'__iteration': 5,\n",
       "  'x_y': 0.05435829655145874,\n",
       "  'y_y': 1330.1210519911244,\n",
       "  'x_u': 0.44886,\n",
       "  'y_u': 1330.1210519911244,\n",
       "  'kinel': -95.0696250854122,\n",
       "  'kel': 24469.51314473135,\n",
       "  'k_06': 24469.503828907287,\n",
       "  'error': 3.807116044736897e-07}]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dol_to_lod(dol)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "isinstance(dol, dict)"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  },
  "nteract": {
   "version": "0.11.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": "block",
   "toc_window_display": true
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
