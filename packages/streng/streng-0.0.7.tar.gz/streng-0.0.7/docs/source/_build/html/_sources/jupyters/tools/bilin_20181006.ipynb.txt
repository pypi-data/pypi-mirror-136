{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Bilin"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "sns.set_style(\"whitegrid\")\n",
        "import ipywidgets as widgets\n",
        "from ipywidgets import interact, interactive, fixed, interact_manual\n",
        "\nfrom streng.tools.bilin import Bilin"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "bl = Bilin(xtarget=0.5)\n",
        "\n",
        "bl.load_space_delimited(r'D:/Programming/PyMyPackages/pystreng/tests/bilin/Example4', ' ')\n",
        "# bl.load_space_delimited(r'D:/MyBooks/TEI/RepairsExample/sapfiles/fema/PushoverCurve_modal.txt', ' ')\n",
        "bl.calc()\n",
        "\n",
        "plt.plot(bl.x_ini, bl.y_ini)\n",
        "plt.plot(bl.bilinear_curve.d_array, bl.bilinear_curve.a_array)\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": [
              "\n"
            ],
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 2,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl.bilinear_curve.all_quantities)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "| quantity   |     value |\n",
            "|:-----------|----------:|\n",
            "| x_0        | 2.140E-02 |\n",
            "| x_y        | 7.582E-02 |\n",
            "| x_u        | 4.703E-01 |\n",
            "| y_0        | 0.000E+00 |\n",
            "| y_y        | 1.330E+03 |\n",
            "| y_u        | 1.330E+03 |\n",
            "| kel        | 2.444E+04 |\n",
            "| kinel      | 0.000E+00 |\n",
            "| μ          | 8.248E+00 |\n",
            "| α          | 0.000E+00 |\n"
          ]
        }
      ],
      "execution_count": 3,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "bl.bilinear_curve.all_quantities.retrieve('quantity', 'x_u', 'value')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/plain": [
              "0.4703"
            ]
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "def f(x):\n",
        "    bl = Bilin(xtarget=x/1000., dropstrength=0.9)\n",
        "\n",
        "    bl.load_space_delimited(r'D:/Programming/PyMyPackages/pystreng/tests/bilin/Example4', ' ')\n",
        "    bl.calc()\n",
        "\n",
        "    plt.plot(bl.x_ini, bl.y_ini)\n",
        "    plt.plot(bl.bilinear_curve.d_array, bl.bilinear_curve.a_array)\n",
        "    plt.show()\n",
        "    return x\n",
        "\ninteract(f, x=widgets.IntSlider(min=50,max=600,step=1,value=200));"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "6d7792e290a64d5b833a7f428f8ba614",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "interactive(children=(IntSlider(value=200, description='x', max=600, min=50), Output()), _dom_classes=('widget…"
            ]
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "def f_str(x):\n",
        "    if len(x)>0:\n",
        "        bl = Bilin()\n",
        "        bl.load_space_delimited_string(x)\n",
        "        bl.calc()\n",
        "\n",
        "        plt.plot(bl.x_ini, bl.y_ini)\n",
        "        plt.plot(bl.bilinear_curve.d_array, bl.bilinear_curve.a_array)\n",
        "        plt.show()\n",
        "    \n",
        "interact(f_str, x=widgets.Textarea(\n",
        "    placeholder='Paste space delimited x-y values:',\n",
        "    description='Initial curve',\n",
        "    disabled=False));"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.jupyter.widget-view+json": {
              "model_id": "2a61d584acb74bab87a767fbae0d74ff",
              "version_major": 2,
              "version_minor": 0
            },
            "text/plain": [
              "interactive(children=(Textarea(value='', description='Initial curve', placeholder='Paste space delimited x-y v…"
            ]
          },
          "metadata": {}
        }
      ],
      "execution_count": 6,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bilin main output\n",
            "\n",
            "Αρχική μετατόπιση: 0.0214\n",
            "\n",
            "Έλεγχος στο 20% του ymax\n",
            "x(02)=0.009792445820433439, y(02)=303.416. Οπότε k(02)=30984.70040721349\n",
            "\n",
            "Εμβαδό καμπύλης: 560.8879995\n"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl.output.OutputStrings['main'])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bilin main output\n",
            "\n",
            "Αρχική μετατόπιση: 0.0214\n",
            "\n",
            "Έλεγχος στο 20% του ymax\n",
            "x(02)=0.009792445820433439, y(02)=303.416. Οπότε k(02)=30984.70040721349\n",
            "\n",
            "Εμβαδό καμπύλης: 560.8879995\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "bl.output.OutputTables['InitialCurve'].to_panda_dataframe.head(20)\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0214</td>\n",
              "      <td>0.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0237</td>\n",
              "      <td>71.07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0260</td>\n",
              "      <td>142.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0283</td>\n",
              "      <td>213.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0306</td>\n",
              "      <td>284.28</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.0328</td>\n",
              "      <td>355.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.0351</td>\n",
              "      <td>426.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.0356</td>\n",
              "      <td>440.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.0379</td>\n",
              "      <td>501.46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.0409</td>\n",
              "      <td>566.15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.0446</td>\n",
              "      <td>633.82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.0482</td>\n",
              "      <td>699.08</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.0517</td>\n",
              "      <td>758.74</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.0540</td>\n",
              "      <td>797.21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.0563</td>\n",
              "      <td>833.29</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.0586</td>\n",
              "      <td>869.36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.0609</td>\n",
              "      <td>905.44</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.0648</td>\n",
              "      <td>966.95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.0679</td>\n",
              "      <td>1015.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.0711</td>\n",
              "      <td>1062.08</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         x        y\n",
              "0   0.0214     0.00\n",
              "1   0.0237    71.07\n",
              "2   0.0260   142.14\n",
              "3   0.0283   213.21\n",
              "4   0.0306   284.28\n",
              "5   0.0328   355.34\n",
              "6   0.0351   426.41\n",
              "7   0.0356   440.66\n",
              "8   0.0379   501.46\n",
              "9   0.0409   566.15\n",
              "10  0.0446   633.82\n",
              "11  0.0482   699.08\n",
              "12  0.0517   758.74\n",
              "13  0.0540   797.21\n",
              "14  0.0563   833.29\n",
              "15  0.0586   869.36\n",
              "16  0.0609   905.44\n",
              "17  0.0648   966.95\n",
              "18  0.0679  1015.03\n",
              "19  0.0711  1062.08"
            ]
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl.output.OutputStrings['main'])"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Bilin main output\n",
            "\n",
            "Αρχική μετατόπιση: 0.0214\n",
            "\n",
            "Έλεγχος στο 20% του ymax\n",
            "x(02)=0.009792445820433439, y(02)=303.416. Οπότε k(02)=30984.70040721349\n",
            "\n",
            "Εμβαδό καμπύλης: 560.8879995\n"
          ]
        }
      ],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl.output.OutputTables['Iterations'].to_markdown)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|   __iteration |       x_y |       y_y |       x_u |       y_u |      kinel |       kel |      k_06 |     error |\n",
            "|------------:|----------:|----------:|----------:|----------:|-----------:|----------:|----------:|----------:|\n",
            "|           1 | 4.232E-02 | 1.311E+03 | 4.489E-01 | 1.311E+03 |  5.096E-01 | 3.098E+04 | 2.461E+04 | 2.592E-01 |\n",
            "|           2 | 5.403E-02 | 1.329E+03 | 4.489E-01 | 1.329E+03 | -9.174E+01 | 2.461E+04 | 2.445E+04 | 6.544E-03 |\n",
            "|           3 | 5.441E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.485E+01 | 2.445E+04 | 2.444E+04 | 2.501E-04 |\n",
            "|           4 | 5.442E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.497E+01 | 2.444E+04 | 2.444E+04 | 9.624E-06 |\n",
            "|           5 | 5.442E-02 | 1.330E+03 | 4.489E-01 | 1.330E+03 | -9.498E+01 | 2.444E+04 | 2.444E+04 | 3.704E-07 |\n"
          ]
        }
      ],
      "execution_count": 11,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(bl.output.OutputTables['BilinearCurve'].to_markdown)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "|         x |         y |\n",
            "|----------:|----------:|\n",
            "| 2.140E-02 | 0.000E+00 |\n",
            "| 7.582E-02 | 1.330E+03 |\n",
            "| 4.703E-01 | 1.330E+03 |\n"
          ]
        }
      ],
      "execution_count": 12,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "toc": {
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": "block",
      "toc_window_display": false
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "0.11.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}