{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#  Eurocode 2 - Chapter 3 - Concrete\n",
        "\nraw functions"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from numpy import vectorize\n",
        "import matplotlib.pyplot as plt"
      ],
      "outputs": [],
      "execution_count": 1,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "from streng.codes.eurocodes.ec2.raw.ch3.concrete import strength, stress_strain, elastic_deformation"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## elastic_deformation"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ecm"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(elastic_deformation.Ecm.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Modulus of elasticity\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete [MPa]\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            E_{cm}=22 (\\dfrac{f_{cm}}{10})^{0.3}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 3,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "Ecm = elastic_deformation.Ecm(fck=20.0)\n",
        "\nprint(f'Ecm = {Ecm:.2f}GPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ecm = 29.96GPa\n"
          ]
        }
      ],
      "execution_count": 4,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### ν"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(elastic_deformation.ν.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Poisson's ratio\n",
            "\n",
            "    Args:\n",
            "        cracked (bool): True for cracked, False for uncracked\n",
            "\n",
            "    Returns:\n",
            "        float: 0.0 for cracked, 0.2 for uncracked\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 5,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ν_cracked = elastic_deformation.ν(cracked=True)\n",
        "ν_uncracked = elastic_deformation.ν(cracked=False)\n",
        "\n",
        "print(f'ν_cracked = {ν_cracked}')\n",
        "print(f'ν_uncracked = {ν_uncracked}')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "ν_cracked = 0.0\n",
            "ν_uncracked = 0.2\n"
          ]
        }
      ],
      "execution_count": 6,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## strength"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### fcd"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(strength.fcd.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Design value for the compressive strength of concrete\n",
            "\n",
            "    Args:\n",
            "        acc (float): Coefficient taking account of long term effects on the compressive strength\n",
            "                     and of unfavourable effects resulting from the way the load is applied\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete\n",
            "        γc (float): Safety factor\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            f_{cd}=a_{cc}\\dfrac{f_{ck}}{γ_c}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fcd = strength.fcd(acc=0.85,\n",
        "                  fck=20.0,\n",
        "                  γc=1.5)\n",
        "\nprint(f'fcd = {fcd:.2f}MPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fcd = 11.33MPa\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### fcm"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(strength.fcm.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Mean compressive strength at 28 days\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete [MPa]\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            f_{cm}=f_{ck} + 8\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fcm = strength.fcm(fck=20.0)\n",
        "\nprint(f'fcm = {fcm:.2f}MPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fcm = 28.00MPa\n"
          ]
        }
      ],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### fctm"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(strength.fctm.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Mean tensile strength at 28 days\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete [MPa]\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "\n",
            "           f_{ctm} = 0.30\\cdot f_{ck}^{2/3} for f_{ck}\\le 50MPa\n",
            "\n",
            "           f_{ctm} = 2.12\\cdot ln(1+f_{cm}/10) for f_{ck}> 50MPa\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 11,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fctm = strength.fctm(fck=20.0)\n",
        "\nprint(f'fctm = {fctm:.2f}MPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fctm = 2.21MPa\n"
          ]
        }
      ],
      "execution_count": 12,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### fctk005"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(strength.fctk005.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Characteristic (5% fractile) tensile strength of concrete [MPa]\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete [MPa]\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            f_{ctk,0.05}=0.7\\cdot f_{ctm}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 13,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fctk005 = strength.fctk005(fck=20.0)\n",
        "\nprint(f'fctk005 = {fctk005:.2f}MPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fctk005 = 1.55MPa\n"
          ]
        }
      ],
      "execution_count": 14,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### fctk095"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(strength.fctk095.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Characteristic (95% fractile) tensile strength of concrete [MPa]\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic (5%) compressive strength of concrete [MPa]\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            f_{ctk,0.95}=1.3\\cdot f_{ctm}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 15,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fctk095 = strength.fctk095(fck=20.0)\n",
        "\nprint(f'fctk095 = {fctk095:.2f}MPa')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fctk095 = 2.87MPa\n"
          ]
        }
      ],
      "execution_count": 16,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "## stress_strain"
      ],
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εc1"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εc1.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    Compressive strain in the concrete at the peak stress (‰)\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            ε_{c1} = min(0.7\\cdot f_{cm}^{0.31}, 2.8)\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 17,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εc1 = stress_strain.εc1(fck=20.0)\n",
        "\nprint(f'εc1 = {εc1:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εc1 = 1.97‰\n"
          ]
        }
      ],
      "execution_count": 18,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εc2"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εc2.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    The strain at reaching the maximum strength (‰)\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                ε_{c2} & = & 2.0 & for & f_{ck} \\le 50MPa \\\\\n",
            "                ε_{c2} & = & 2.0 + 0.085(f_{ck}-50)^{0.53} & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 19,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εc2 = stress_strain.εc2(fck=20.0)\n",
        "\nprint(f'εc2 = {εc2:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εc2 = 2.00‰\n"
          ]
        }
      ],
      "execution_count": 20,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εc3"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εc3.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " (‰)\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                ε_{c3} & = & 1.75 & for & f_{ck} \\le 50MPa \\\\\n",
            "                ε_{c3} & = & 1.75 + 0.55(f_{ck}-50)/40 & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 21,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εc3 = stress_strain.εc3(fck=20.0)\n",
        "\nprint(f'εc3 = {εc3:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εc3 = 1.75‰\n"
          ]
        }
      ],
      "execution_count": 22,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εcu1"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εcu1.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                ε_{cu1} & = & 3.5 & for & f_{ck} \\le 50MPa \\\\\n",
            "                ε_{cu1} & = & 2.8 + 27 \\cdot ((98 - f_{cm})/100)^4 & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 23,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εcu1 = stress_strain.εcu1(fck=20.0)\n",
        "\nprint(f'εcu1 = {εcu1:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εcu1 = 3.50‰\n"
          ]
        }
      ],
      "execution_count": 24,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εcu2"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εcu2.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    The ultimate strain\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                ε_{cu2} & = & 3.5 & for & f_{ck} \\le 50MPa \\\\\n",
            "                ε_{cu2} & = & 2.6 + 35 \\cdot ((90 - f_{ck})/100)^4 & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 25,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εcu2 = stress_strain.εcu2(fck=20.0)\n",
        "\nprint(f'εcu2 = {εcu2:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εcu2 = 3.50‰\n"
          ]
        }
      ],
      "execution_count": 26,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### εcu3"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.εcu3.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                ε_{cu2} & = & 3.5 & for & f_{ck} \\le 50MPa \\\\\n",
            "                ε_{cu2} & = & 2.6 + 35 \\cdot ((90 - f_{ck})/100)^4 & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 27,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "εcu3 = stress_strain.εcu3(fck=20.0)\n",
        "\nprint(f'εcu3 = {εcu3:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "εcu3 = 3.50‰\n"
          ]
        }
      ],
      "execution_count": 28,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.n.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expressions:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                n & = & 2.0 & for & f_{ck} \\le 50MPa \\\\\n",
            "                n & = & 1.4 + 23.4 \\cdot ((90 - f_{ck})/100)^4 & for & f_{ck} \\ge 50MPa\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 29,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "n = stress_strain.n(fck=20.0)\n",
        "\nprint(f'n = {n:.2f}‰')"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "n = 2.00‰\n"
          ]
        }
      ],
      "execution_count": 30,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### σc_nl"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.σc_nl.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    Stress-strain relation for non-linear structural analysis\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "        εc (float): concrete strain (‰)\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                σ_{c} & = & f_{ctm}\\dfrac{kη-η^2}{1+(k-2)η} \\\\\n",
            "                where: & \\\\\n",
            "                η & = & \\dfrac{ε_c}{ε_{c1}} \\\\\n",
            "                k & = & 1.05\\cdot E_{cm} \\cdot ε_{c1} / f_{cm}\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 31,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fck_check = 20.0\n",
        "\n",
        "εcs = np.linspace(0, stress_strain.εc1(fck_check), num=50)\n",
        "σcs = stress_strain.σc_nl(fck_check, εcs)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "line0, = ax.plot(εcs, σcs, '-', linewidth=2,\n",
        "                 label='fck')\n",
        "ax.legend(loc='right')\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": [
              "\n"
            ],
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 32,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### σc_design"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.σc_design.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "    Stress-strain relations for the design of cross-sections\n",
            "\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "        αcc (float): Coefficient taking account of long term effects on the compressive strength\n",
            "                     and of unfavourable effects resulting from the way the load is applied\n",
            "        γc (float): Safety factor\n",
            "        εc (float): concrete strain (‰)\n",
            "\n",
            "    Returns:\n",
            "        float: Given using the expression:\n",
            "\n",
            "        .. math::\n",
            "            \\begin{eqnarray}\n",
            "                σ_{c} & = & f_{cd}\\cdot(1-(1-\\dfrac{ε_c}{ε_{c2}})^n) & for & 0\\le ε_c \\le ε_{c2} \\\\\n",
            "                σ_{c} & = & f_{cd} & for & ε_{c2}\\le ε_c \\le ε_{cu2}\n",
            "            \\end{eqnarray}\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 33,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fck_check = 20.0\n",
        "\n",
        "εcs = np.linspace(0, stress_strain.εcu2(fck_check), num=50)\n",
        "vσcs = vectorize(stress_strain.σc_design)\n",
        "σcs = vσcs(fck_check, 0.85, 1.5, εcs)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "line0, = ax.plot(εcs, σcs, '-', linewidth=2,\n",
        "                 label='fck')\n",
        "ax.legend(loc='right')\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": [
              "\n"
            ],
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 34,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### σc_bilin"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "print(stress_strain.σc_bilin.__doc__)"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n\n",
            "    Args:\n",
            "        fck (float): Characteristic compressive cylinder strength of concrete at 28 days\n",
            "        αcc (float): Coefficient taking account of long term effects on the compressive strength\n",
            "                     and of unfavourable effects resulting from the way the load is applied\n",
            "        γc (float): Safety factor\n",
            "        εc (float): concrete strain (‰)\n",
            "\n",
            "    Returns:\n",
            "        float:\n",
            "\n",
            "    \n"
          ]
        }
      ],
      "execution_count": 35,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "fck_check = 20.0\n",
        "\n",
        "εcs = np.linspace(0, stress_strain.εcu2(fck_check), num=50)\n",
        "vσcs = vectorize(stress_strain.σc_bilin)\n",
        "σcs = vσcs(fck_check, 0.85, 1.5, εcs)\n",
        "\n",
        "fig, ax = plt.subplots()\n",
        "line0, = ax.plot(εcs, σcs, '-', linewidth=2,\n",
        "                 label='fck')\n",
        "ax.legend(loc='right')\n",
        "ax.grid(True)\n",
        "plt.show()"
      ],
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": [
              "\n"
            ],
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 36,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.6",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "toc": {
      "nav_menu": {},
      "number_sections": false,
      "sideBar": true,
      "skip_h1_title": false,
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": "block",
      "toc_window_display": true
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "0.11.9"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}