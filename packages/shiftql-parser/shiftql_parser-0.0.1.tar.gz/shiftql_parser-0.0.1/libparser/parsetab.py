
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND AS ASC AVG BENCHMARK BETWEEN BUDGET BY CHANGE CHUNK CLASSIFIED COMMA COMPARISON DECLARE DESC DISTINCT END EXPLAIN FINETUNE FINETUNED FROM IS LIMIT MAX MIN NOT NULL NUMBER ON OR ORDER OTHER PRINT PURGE QSTRING REGISTER SELECT STRING SUM TASK TESTED THAN TO TRAINED USE VALUES WHERE WITHexpression : dml ENDdml : select\n    | use\n    | register\n    | declare\n    | print\n    | explain\n    | finetune\n    | purge\n    print : PRINT stringpurge : PURGEdeclare : DECLARE string AS selectexplain : EXPLAIN output selectoutput : STRING\n    | empty\n    register : REGISTER table title columns VALUES columnstitle : stringuse : USE stringstring : STRING\n    | QSTRING\n    | "*"\n    finetune : FINETUNE ft_model WITH ft_data waitft_model : stringft_data : stringselect : SELECT columns FROM table where order_by trained_on tested_on classified_by limit other chunk budget waitchunk : CHUNK NUMBER\n    | empty\n    budget : BUDGET NUMBER\n    | empty\n    wait : string\n    | empty\n    table : stringwhere : WHERE conditions\n    | string\n    | empty\n    other : OTHER THAN string\n    | empty\n    order_by : ORDER BY order\n    | empty\n    limit : LIMIT NUMBER\n    | empty\n    order : function "(" string ")" order_type\n    | string order_type\n    order_type : ASC\n    | DESC\n    | empty\n    compare : column COMPARISON item\n    | column BETWEEN item AND item\n    | column IS null\n    empty :conditions : conditions AND conditions\n    | conditions OR conditions\n    | "(" conditions ")"\n    | FINETUNED\n    | NOT FINETUNED\n    | compare\n    columns : columns COMMA columns\n    | column_as\n    | column\n    | "*"\n    | list_columns\n    | "(" columns ")"\n    integers : integers COMMA integers\n    | NUMBER\n    list_integers : "[" integers "]" list_columns : "[" columns "]" column_as : column AS item\n    | column item\n    column : distinct_item\n    | item\n    trained_on : TRAINED ON datasets\n    | empty\n    tested_on : TESTED ON task_type datasets\n    | empty\n    task_type : BENCHMARK\n    | TASK\n    | empty\n    change :  CHANGE list_integers TO dataset list_integers\n    | change COMMA change\n    | empty\n    datasets : dataset\n    | datasets COMMA datasets\n    | "[" datasets "]"\n    dataset : string\n    | "(" dataset change ")"\n    classifiers : "[" classifier "]"\n    | classifier\n    classifier : classifier COMMA classifier\n    | string\n    | string "(" classifier_param ")"\n    classifier_param : classifier_param COMMA classifier_param\n    | item COMPARISON item\n    classified_by : CLASSIFIED BY classifiers\n    | empty\n    null : NULL\n    | NOT NULL\n    function : SUM\n    | AVG\n    | MIN\n    | MAX\n    distinct_item : DISTINCT item\n    | DISTINCT "(" item ")"\n    item : string\n    | NUMBER\n    | "*"\n    | string "." item\n    '
    
_lr_action_items = {'SELECT':([0,16,40,41,42,57,],[11,-50,11,-14,-15,11,]),'USE':([0,],[12,]),'REGISTER':([0,],[13,]),'DECLARE':([0,],[14,]),'PRINT':([0,],[15,]),'EXPLAIN':([0,],[16,]),'FINETUNE':([0,],[17,]),'PURGE':([0,],[18,]),'$end':([1,19,],[0,-1,]),'END':([2,3,4,5,6,7,8,9,10,18,21,22,23,24,26,27,30,31,32,33,34,35,37,39,48,49,52,58,60,61,62,63,64,66,68,69,70,71,73,74,75,77,78,79,80,82,83,85,87,89,90,92,97,101,103,105,107,112,113,114,115,117,118,120,122,124,125,127,130,131,132,133,135,136,138,148,149,151,152,153,155,156,157,158,159,163,164,166,171,175,176,178,179,180,181,182,189,190,191,],[19,-2,-3,-4,-5,-6,-7,-8,-9,-11,-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-18,-21,-32,-10,-68,-21,-101,-13,-50,-57,-67,-62,-66,-106,-12,-50,-24,-50,-34,-35,-102,-22,-30,-31,-50,-39,-33,-54,-56,-16,-50,-72,-55,-50,-74,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-71,-81,-84,-43,-44,-45,-46,-96,-50,-41,-48,-50,-37,-40,-93,-87,-89,-73,-82,-83,-50,-50,-27,-85,-42,-50,-29,-26,-36,-86,-88,-25,-28,-90,]),'*':([11,12,13,14,15,17,22,23,25,26,27,28,29,30,31,32,33,35,36,37,45,46,47,49,52,53,54,55,56,59,60,66,69,70,71,72,73,74,75,76,80,82,83,84,85,87,90,92,93,94,95,97,98,99,101,103,104,105,107,112,113,114,115,117,118,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,148,149,151,152,153,154,155,156,157,158,159,163,164,166,167,169,170,171,175,176,178,179,180,181,182,186,190,191,192,193,],[23,35,35,35,35,35,49,-21,23,-70,-69,23,49,-103,-104,-19,-20,-21,35,-32,35,23,49,-21,-101,49,49,23,-17,35,35,-106,35,-24,-50,49,-34,-35,-102,23,-50,-39,-33,49,-54,-56,-50,-72,35,49,49,-55,49,49,-50,-74,35,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-50,-71,-81,35,-84,35,35,-43,-44,-45,-46,49,-96,-50,-41,35,35,-75,-76,-77,35,-48,-50,-37,-40,-93,35,-87,-89,-73,-82,-83,-50,-50,-27,35,35,49,-85,-42,35,-29,-26,-36,-86,-88,35,-28,-90,49,49,]),'(':([11,25,28,29,32,33,35,46,55,56,72,76,84,94,95,104,106,108,109,110,111,123,126,128,140,141,142,143,144,156,186,],[25,25,25,53,-19,-20,-21,25,25,-17,84,25,84,84,84,128,129,-97,-98,-99,-100,-50,128,128,128,-75,-76,-77,128,170,128,]),'[':([11,25,28,32,33,35,46,55,56,76,104,123,126,127,139,140,141,142,143,144,161,171,194,],[28,28,28,-19,-20,-21,28,28,-17,28,126,-50,126,-84,154,126,-75,-76,-77,126,174,-85,174,]),'DISTINCT':([11,25,28,32,33,35,46,55,56,72,76,84,94,95,],[29,29,29,-19,-20,-21,29,29,-17,29,29,29,29,29,]),'NUMBER':([11,22,23,25,26,27,28,29,30,31,32,33,35,46,47,49,52,53,54,55,56,66,72,75,76,84,94,95,98,99,134,137,165,170,174,177,192,193,196,],[31,31,-21,31,-70,-69,31,31,-103,-104,-19,-20,-21,31,31,-21,-101,31,31,31,-17,-106,31,-102,31,31,31,31,31,31,31,152,179,31,188,190,31,31,188,]),'STRING':([11,12,13,14,15,16,17,22,23,25,26,27,28,29,30,31,32,33,35,36,37,45,46,47,49,52,53,54,55,56,59,60,66,69,70,71,72,73,74,75,76,80,82,83,84,85,87,90,92,93,94,95,97,98,99,101,103,104,105,107,112,113,114,115,117,118,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,148,149,151,152,153,154,155,156,157,158,159,163,164,166,167,169,170,171,175,176,178,179,180,181,182,186,190,191,192,193,],[32,32,32,32,32,41,32,32,-21,32,-70,-69,32,32,-103,-104,-19,-20,-21,32,-32,32,32,32,-21,-101,32,32,32,-17,32,32,-106,32,-24,-50,32,-34,-35,-102,32,-50,-39,-33,32,-54,-56,-50,-72,32,32,32,-55,32,32,-50,-74,32,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-50,-71,-81,32,-84,32,32,-43,-44,-45,-46,32,-96,-50,-41,32,32,-75,-76,-77,32,-48,-50,-37,-40,-93,32,-87,-89,-73,-82,-83,-50,-50,-27,32,32,32,-85,-42,32,-29,-26,-36,-86,-88,32,-28,-90,32,32,]),'QSTRING':([11,12,13,14,15,17,22,23,25,26,27,28,29,30,31,32,33,35,36,37,45,46,47,49,52,53,54,55,56,59,60,66,69,70,71,72,73,74,75,76,80,82,83,84,85,87,90,92,93,94,95,97,98,99,101,103,104,105,107,112,113,114,115,117,118,120,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,140,141,142,143,144,148,149,151,152,153,154,155,156,157,158,159,163,164,166,167,169,170,171,175,176,178,179,180,181,182,186,190,191,192,193,],[33,33,33,33,33,33,33,-21,33,-70,-69,33,33,-103,-104,-19,-20,-21,33,-32,33,33,33,-21,-101,33,33,33,-17,33,33,-106,33,-24,-50,33,-34,-35,-102,33,-50,-39,-33,33,-54,-56,-50,-72,33,33,33,-55,33,33,-50,-74,33,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-50,-71,-81,33,-84,33,33,-43,-44,-45,-46,33,-96,-50,-41,33,33,-75,-76,-77,33,-48,-50,-37,-40,-93,33,-87,-89,-73,-82,-83,-50,-50,-27,33,33,33,-85,-42,33,-29,-26,-36,-86,-88,33,-28,-90,33,33,]),'FROM':([20,21,22,23,24,26,27,30,31,32,33,48,49,52,61,62,63,64,66,75,],[45,-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-68,-21,-101,-57,-67,-62,-66,-106,-102,]),'COMMA':([20,21,22,23,24,26,27,30,31,32,33,35,48,49,50,51,52,61,62,63,64,66,67,75,89,124,125,127,145,146,155,156,157,158,159,160,162,168,171,172,182,183,185,187,188,191,195,197,198,199,200,],[46,-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-21,-68,-21,46,46,-101,46,-67,-62,-66,-106,46,-102,46,144,-81,-84,144,-50,169,-89,144,144,-83,172,-80,169,-85,-50,169,192,172,196,-64,-90,-65,192,-92,-78,196,]),')':([21,22,23,24,26,27,30,31,32,33,35,48,49,50,52,61,62,63,64,65,66,75,85,87,96,97,112,113,114,115,117,118,127,135,146,147,148,160,162,171,172,183,185,195,197,198,199,],[-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-21,-68,-21,63,-101,-57,-67,-62,-66,75,-106,-102,-54,-56,114,-55,-51,-52,-53,-47,-49,-95,-84,-96,-50,163,-48,171,-80,-85,-50,191,-79,-65,-91,-92,-78,]),']':([21,22,23,24,26,27,30,31,32,33,35,48,49,51,52,61,62,63,64,66,75,125,127,145,156,158,159,168,171,182,187,188,191,200,],[-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-21,-68,-21,64,-101,-57,-67,-62,-66,-106,-102,-81,-84,159,-89,-82,-83,181,-85,-88,195,-64,-90,-63,]),'VALUES':([21,22,23,24,26,27,30,31,32,33,48,49,52,61,62,63,64,66,67,75,],[-58,-59,-21,-61,-70,-69,-103,-104,-19,-20,-68,-21,-101,-57,-67,-62,-66,-106,76,-102,]),'AS':([22,23,26,27,30,31,32,33,35,38,49,52,66,75,],[47,-21,-70,-69,-103,-104,-19,-20,-21,57,-21,-101,-106,-102,]),'.':([23,30,32,33,49,],[-21,54,-19,-20,-21,]),'COMPARISON':([26,27,30,31,32,33,49,52,66,75,88,184,],[-70,-69,-103,-104,-19,-20,-21,-101,-106,-102,98,193,]),'BETWEEN':([26,27,30,31,32,33,49,52,66,75,88,],[-70,-69,-103,-104,-19,-20,-21,-101,-106,-102,99,]),'IS':([26,27,30,31,32,33,49,52,66,75,88,],[-70,-69,-103,-104,-19,-20,-21,-101,-106,-102,100,]),'AND':([30,31,32,33,49,66,83,85,87,96,97,112,113,114,115,116,117,118,135,148,],[-103,-104,-19,-20,-21,-106,94,-54,-56,94,-55,94,94,-53,-47,134,-49,-95,-96,-48,]),'OR':([30,31,32,33,49,66,83,85,87,96,97,112,113,114,115,117,118,135,148,],[-103,-104,-19,-20,-21,-106,95,-54,-56,95,-55,95,95,-53,-47,-49,-95,-96,-48,]),'ORDER':([30,31,32,33,35,37,49,60,66,71,73,74,83,85,87,97,112,113,114,115,117,118,135,148,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,81,-34,-35,-33,-54,-56,-55,-51,-52,-53,-47,-49,-95,-96,-48,]),'TRAINED':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,97,105,107,112,113,114,115,117,118,130,131,132,133,135,148,163,175,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,91,-39,-33,-54,-56,-55,-38,-50,-51,-52,-53,-47,-49,-95,-43,-44,-45,-46,-96,-48,-50,-42,]),'TESTED':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,105,107,112,113,114,115,117,118,124,125,127,130,131,132,133,135,148,158,159,163,171,175,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,102,-72,-55,-38,-50,-51,-52,-53,-47,-49,-95,-71,-81,-84,-43,-44,-45,-46,-96,-48,-82,-83,-50,-85,-42,]),'CLASSIFIED':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,101,103,105,107,112,113,114,115,117,118,124,125,127,130,131,132,133,135,148,157,158,159,163,171,175,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,-50,-72,-55,121,-74,-38,-50,-51,-52,-53,-47,-49,-95,-71,-81,-84,-43,-44,-45,-46,-96,-48,-73,-82,-83,-50,-85,-42,]),'LIMIT':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,101,103,105,107,112,113,114,115,117,118,120,122,124,125,127,130,131,132,133,135,148,153,155,156,157,158,159,163,171,175,181,182,191,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,-50,-72,-55,-50,-74,-38,-50,-51,-52,-53,-47,-49,-95,137,-94,-71,-81,-84,-43,-44,-45,-46,-96,-48,-93,-87,-89,-73,-82,-83,-50,-85,-42,-86,-88,-90,]),'OTHER':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,101,103,105,107,112,113,114,115,117,118,120,122,124,125,127,130,131,132,133,135,136,138,148,152,153,155,156,157,158,159,163,171,175,181,182,191,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,-50,-72,-55,-50,-74,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-71,-81,-84,-43,-44,-45,-46,-96,150,-41,-48,-40,-93,-87,-89,-73,-82,-83,-50,-85,-42,-86,-88,-90,]),'CHUNK':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,101,103,105,107,112,113,114,115,117,118,120,122,124,125,127,130,131,132,133,135,136,138,148,149,151,152,153,155,156,157,158,159,163,171,175,180,181,182,191,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,-50,-72,-55,-50,-74,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-71,-81,-84,-43,-44,-45,-46,-96,-50,-41,-48,165,-37,-40,-93,-87,-89,-73,-82,-83,-50,-85,-42,-36,-86,-88,-90,]),'BUDGET':([30,31,32,33,35,37,49,60,66,71,73,74,80,82,83,85,87,90,92,97,101,103,105,107,112,113,114,115,117,118,120,122,124,125,127,130,131,132,133,135,136,138,148,149,151,152,153,155,156,157,158,159,163,164,166,171,175,179,180,181,182,191,],[-103,-104,-19,-20,-21,-32,-21,-50,-106,-50,-34,-35,-50,-39,-33,-54,-56,-50,-72,-55,-50,-74,-38,-50,-51,-52,-53,-47,-49,-95,-50,-94,-71,-81,-84,-43,-44,-45,-46,-96,-50,-41,-48,-50,-37,-40,-93,-87,-89,-73,-82,-83,-50,177,-27,-85,-42,-26,-36,-86,-88,-90,]),'WITH':([32,33,35,43,44,],[-19,-20,-21,59,-23,]),'WHERE':([32,33,35,37,60,],[-19,-20,-21,-32,72,]),'ASC':([32,33,35,107,163,],[-19,-20,-21,131,131,]),'DESC':([32,33,35,107,163,],[-19,-20,-21,132,132,]),'CHANGE':([32,33,35,127,146,171,172,],[-19,-20,-21,-84,161,-85,161,]),'FINETUNED':([72,84,86,94,95,],[85,85,97,85,85,]),'NOT':([72,84,94,95,100,],[86,86,86,86,119,]),'BY':([81,121,],[93,139,]),'ON':([91,102,],[104,123,]),'SUM':([93,],[108,]),'AVG':([93,],[109,]),'MIN':([93,],[110,]),'MAX':([93,],[111,]),'NULL':([100,119,],[118,135,]),'BENCHMARK':([123,],[141,]),'TASK':([123,],[142,]),'THAN':([150,],[167,]),'TO':([173,195,],[186,-65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,],[1,]),'dml':([0,],[2,]),'select':([0,40,57,],[3,58,68,]),'use':([0,],[4,]),'register':([0,],[5,]),'declare':([0,],[6,]),'print':([0,],[7,]),'explain':([0,],[8,]),'finetune':([0,],[9,]),'purge':([0,],[10,]),'columns':([11,25,28,46,55,76,],[20,50,51,61,67,89,]),'column_as':([11,25,28,46,55,76,],[21,21,21,21,21,21,]),'column':([11,25,28,46,55,72,76,84,94,95,],[22,22,22,22,22,88,22,88,88,88,]),'list_columns':([11,25,28,46,55,76,],[24,24,24,24,24,24,]),'item':([11,22,25,28,29,46,47,53,54,55,72,76,84,94,95,98,99,134,170,192,193,],[26,48,26,26,52,26,62,65,66,26,26,26,26,26,26,115,116,148,184,184,198,]),'distinct_item':([11,25,28,46,55,72,76,84,94,95,],[27,27,27,27,27,27,27,27,27,27,]),'string':([11,12,13,14,15,17,22,25,28,29,36,45,46,47,53,54,55,59,60,69,72,76,84,93,94,95,98,99,104,126,128,129,134,139,140,144,154,167,169,170,176,186,192,193,],[30,34,37,38,39,44,30,30,30,30,56,37,30,30,30,30,30,70,73,78,30,30,30,107,30,30,30,30,127,127,127,147,30,156,127,127,156,180,156,30,78,127,30,30,]),'table':([13,45,],[36,60,]),'output':([16,],[40,]),'empty':([16,60,69,71,80,90,101,107,120,123,136,146,149,163,164,172,176,],[42,74,79,82,92,103,122,133,138,143,151,162,166,133,178,162,79,]),'ft_model':([17,],[43,]),'title':([36,],[55,]),'ft_data':([59,],[69,]),'where':([60,],[71,]),'wait':([69,176,],[77,189,]),'order_by':([71,],[80,]),'conditions':([72,84,94,95,],[83,96,112,113,]),'compare':([72,84,94,95,],[87,87,87,87,]),'trained_on':([80,],[90,]),'tested_on':([90,],[101,]),'order':([93,],[105,]),'function':([93,],[106,]),'null':([100,],[117,]),'classified_by':([101,],[120,]),'datasets':([104,126,140,144,],[124,145,157,158,]),'dataset':([104,126,128,140,144,186,],[125,125,146,125,125,194,]),'order_type':([107,163,],[130,175,]),'limit':([120,],[136,]),'task_type':([123,],[140,]),'other':([136,],[149,]),'classifiers':([139,],[153,]),'classifier':([139,154,169,],[155,168,182,]),'change':([146,172,],[160,185,]),'chunk':([149,],[164,]),'list_integers':([161,194,],[173,199,]),'budget':([164,],[176,]),'classifier_param':([170,192,],[183,197,]),'integers':([174,196,],[187,200,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> dml END','expression',2,'p_expression','dml.py',5),
  ('dml -> select','dml',1,'p_dml','dml.py',10),
  ('dml -> use','dml',1,'p_dml','dml.py',11),
  ('dml -> register','dml',1,'p_dml','dml.py',12),
  ('dml -> declare','dml',1,'p_dml','dml.py',13),
  ('dml -> print','dml',1,'p_dml','dml.py',14),
  ('dml -> explain','dml',1,'p_dml','dml.py',15),
  ('dml -> finetune','dml',1,'p_dml','dml.py',16),
  ('dml -> purge','dml',1,'p_dml','dml.py',17),
  ('print -> PRINT string','print',2,'p_print','dml.py',23),
  ('purge -> PURGE','purge',1,'p_purge','dml.py',28),
  ('declare -> DECLARE string AS select','declare',4,'p_declare','dml.py',33),
  ('explain -> EXPLAIN output select','explain',3,'p_explain','dml.py',38),
  ('output -> STRING','output',1,'p_output','dml.py',43),
  ('output -> empty','output',1,'p_output','dml.py',44),
  ('register -> REGISTER table title columns VALUES columns','register',6,'p_register','dml.py',55),
  ('title -> string','title',1,'p_title','dml.py',60),
  ('use -> USE string','use',2,'p_use','dml.py',65),
  ('string -> STRING','string',1,'p_string','dml.py',73),
  ('string -> QSTRING','string',1,'p_string','dml.py',74),
  ('string -> *','string',1,'p_string','dml.py',75),
  ('finetune -> FINETUNE ft_model WITH ft_data wait','finetune',5,'p_finetune','dml.py',81),
  ('ft_model -> string','ft_model',1,'p_ft_model','dml.py',91),
  ('ft_data -> string','ft_data',1,'p_ft_data','dml.py',96),
  ('select -> SELECT columns FROM table where order_by trained_on tested_on classified_by limit other chunk budget wait','select',14,'p_select','dml.py',101),
  ('chunk -> CHUNK NUMBER','chunk',2,'p_chunk','dml.py',120),
  ('chunk -> empty','chunk',1,'p_chunk','dml.py',121),
  ('budget -> BUDGET NUMBER','budget',2,'p_budget','dml.py',128),
  ('budget -> empty','budget',1,'p_budget','dml.py',129),
  ('wait -> string','wait',1,'p_wait','dml.py',136),
  ('wait -> empty','wait',1,'p_wait','dml.py',137),
  ('table -> string','table',1,'p_table','dml.py',143),
  ('where -> WHERE conditions','where',2,'p_where','dml.py',148),
  ('where -> string','where',1,'p_where','dml.py',149),
  ('where -> empty','where',1,'p_where','dml.py',150),
  ('other -> OTHER THAN string','other',3,'p_other','dml.py',160),
  ('other -> empty','other',1,'p_other','dml.py',161),
  ('order_by -> ORDER BY order','order_by',3,'p_order_by','dml.py',168),
  ('order_by -> empty','order_by',1,'p_order_by','dml.py',169),
  ('limit -> LIMIT NUMBER','limit',2,'p_limit','dml.py',177),
  ('limit -> empty','limit',1,'p_limit','dml.py',178),
  ('order -> function ( string ) order_type','order',5,'p_order','dml.py',186),
  ('order -> string order_type','order',2,'p_order','dml.py',187),
  ('order_type -> ASC','order_type',1,'p_order_type','dml.py',196),
  ('order_type -> DESC','order_type',1,'p_order_type','dml.py',197),
  ('order_type -> empty','order_type',1,'p_order_type','dml.py',198),
  ('compare -> column COMPARISON item','compare',3,'p_compare','dml.py',207),
  ('compare -> column BETWEEN item AND item','compare',5,'p_compare','dml.py',208),
  ('compare -> column IS null','compare',3,'p_compare','dml.py',209),
  ('empty -> <empty>','empty',0,'p_empty','dml.py',218),
  ('conditions -> conditions AND conditions','conditions',3,'p_conditions','dml.py',223),
  ('conditions -> conditions OR conditions','conditions',3,'p_conditions','dml.py',224),
  ('conditions -> ( conditions )','conditions',3,'p_conditions','dml.py',225),
  ('conditions -> FINETUNED','conditions',1,'p_conditions','dml.py',226),
  ('conditions -> NOT FINETUNED','conditions',2,'p_conditions','dml.py',227),
  ('conditions -> compare','conditions',1,'p_conditions','dml.py',228),
  ('columns -> columns COMMA columns','columns',3,'p_columns','dml.py',244),
  ('columns -> column_as','columns',1,'p_columns','dml.py',245),
  ('columns -> column','columns',1,'p_columns','dml.py',246),
  ('columns -> *','columns',1,'p_columns','dml.py',247),
  ('columns -> list_columns','columns',1,'p_columns','dml.py',248),
  ('columns -> ( columns )','columns',3,'p_columns','dml.py',249),
  ('integers -> integers COMMA integers','integers',3,'p_integers','dml.py',261),
  ('integers -> NUMBER','integers',1,'p_integers','dml.py',262),
  ('list_integers -> [ integers ]','list_integers',3,'p_list_integers','dml.py',271),
  ('list_columns -> [ columns ]','list_columns',3,'p_list_columns','dml.py',276),
  ('column_as -> column AS item','column_as',3,'p_column_as','dml.py',281),
  ('column_as -> column item','column_as',2,'p_column_as','dml.py',282),
  ('column -> distinct_item','column',1,'p_column','dml.py',292),
  ('column -> item','column',1,'p_column','dml.py',293),
  ('trained_on -> TRAINED ON datasets','trained_on',3,'p_trained_on','dml.py',307),
  ('trained_on -> empty','trained_on',1,'p_trained_on','dml.py',308),
  ('tested_on -> TESTED ON task_type datasets','tested_on',4,'p_tested_on','dml.py',316),
  ('tested_on -> empty','tested_on',1,'p_tested_on','dml.py',317),
  ('task_type -> BENCHMARK','task_type',1,'p_task_type','dml.py',325),
  ('task_type -> TASK','task_type',1,'p_task_type','dml.py',326),
  ('task_type -> empty','task_type',1,'p_task_type','dml.py',327),
  ('change -> CHANGE list_integers TO dataset list_integers','change',5,'p_change','dml.py',333),
  ('change -> change COMMA change','change',3,'p_change','dml.py',334),
  ('change -> empty','change',1,'p_change','dml.py',335),
  ('datasets -> dataset','datasets',1,'p_datasets','dml.py',344),
  ('datasets -> datasets COMMA datasets','datasets',3,'p_datasets','dml.py',345),
  ('datasets -> [ datasets ]','datasets',3,'p_datasets','dml.py',346),
  ('dataset -> string','dataset',1,'p_dataset','dml.py',360),
  ('dataset -> ( dataset change )','dataset',4,'p_dataset','dml.py',361),
  ('classifiers -> [ classifier ]','classifiers',3,'p_classifiers','dml.py',370),
  ('classifiers -> classifier','classifiers',1,'p_classifiers','dml.py',371),
  ('classifier -> classifier COMMA classifier','classifier',3,'p_classifier','dml.py',380),
  ('classifier -> string','classifier',1,'p_classifier','dml.py',381),
  ('classifier -> string ( classifier_param )','classifier',4,'p_classifier','dml.py',382),
  ('classifier_param -> classifier_param COMMA classifier_param','classifier_param',3,'p_classifier_param','dml.py',395),
  ('classifier_param -> item COMPARISON item','classifier_param',3,'p_classifier_param','dml.py',396),
  ('classified_by -> CLASSIFIED BY classifiers','classified_by',3,'p_classified_by','dml.py',405),
  ('classified_by -> empty','classified_by',1,'p_classified_by','dml.py',406),
  ('null -> NULL','null',1,'p_null','dml.py',419),
  ('null -> NOT NULL','null',2,'p_null','dml.py',420),
  ('function -> SUM','function',1,'p_function','dml.py',429),
  ('function -> AVG','function',1,'p_function','dml.py',430),
  ('function -> MIN','function',1,'p_function','dml.py',431),
  ('function -> MAX','function',1,'p_function','dml.py',432),
  ('distinct_item -> DISTINCT item','distinct_item',2,'p_distinct_item','dml.py',438),
  ('distinct_item -> DISTINCT ( item )','distinct_item',4,'p_distinct_item','dml.py',439),
  ('item -> string','item',1,'p_item','dml.py',448),
  ('item -> NUMBER','item',1,'p_item','dml.py',449),
  ('item -> *','item',1,'p_item','dml.py',450),
  ('item -> string . item','item',3,'p_item','dml.py',451),
]
