# coding: utf-8

"""
    Listing API

    <span class=\"tablenote\"><b>Note:</b> This is a <a href=\"https://developer.ebay.com/api-docs/static/versioning.html#limited\" target=\"_blank\"> <img src=\"/cms/img/docs/partners-api.svg\" class=\"legend-icon partners-icon\" title=\"Limited Release\"  alt=\"Limited Release\" />(Limited Release)</a> API available only to select developers approved by business units.</span><br /><br />Enables a seller adding an ad or item on a Partner's site to automatically create an eBay listing draft using the item details from the Partner's site.  # noqa: E501

    OpenAPI spec version: v1_beta.3.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ItemDraftResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_draft_id': 'str',
        'sell_flow_native_uri': 'str',
        'sell_flow_url': 'str'
    }

    attribute_map = {
        'item_draft_id': 'itemDraftId',
        'sell_flow_native_uri': 'sellFlowNativeUri',
        'sell_flow_url': 'sellFlowUrl'
    }

    def __init__(self, item_draft_id=None, sell_flow_native_uri=None, sell_flow_url=None):  # noqa: E501
        """ItemDraftResponse - a model defined in Swagger"""  # noqa: E501
        self._item_draft_id = None
        self._sell_flow_native_uri = None
        self._sell_flow_url = None
        self.discriminator = None
        if item_draft_id is not None:
            self.item_draft_id = item_draft_id
        if sell_flow_native_uri is not None:
            self.sell_flow_native_uri = sell_flow_native_uri
        if sell_flow_url is not None:
            self.sell_flow_url = sell_flow_url

    @property
    def item_draft_id(self):
        """Gets the item_draft_id of this ItemDraftResponse.  # noqa: E501

        The eBay generated ID of the listing draft.  # noqa: E501

        :return: The item_draft_id of this ItemDraftResponse.  # noqa: E501
        :rtype: str
        """
        return self._item_draft_id

    @item_draft_id.setter
    def item_draft_id(self, item_draft_id):
        """Sets the item_draft_id of this ItemDraftResponse.

        The eBay generated ID of the listing draft.  # noqa: E501

        :param item_draft_id: The item_draft_id of this ItemDraftResponse.  # noqa: E501
        :type: str
        """

        self._item_draft_id = item_draft_id

    @property
    def sell_flow_native_uri(self):
        """Gets the sell_flow_native_uri of this ItemDraftResponse.  # noqa: E501

        The URI the Partner uses to send the seller to their listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. <br /><br />This is returned when the seller is using a mobile app.   # noqa: E501

        :return: The sell_flow_native_uri of this ItemDraftResponse.  # noqa: E501
        :rtype: str
        """
        return self._sell_flow_native_uri

    @sell_flow_native_uri.setter
    def sell_flow_native_uri(self, sell_flow_native_uri):
        """Sets the sell_flow_native_uri of this ItemDraftResponse.

        The URI the Partner uses to send the seller to their listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. <br /><br />This is returned when the seller is using a mobile app.   # noqa: E501

        :param sell_flow_native_uri: The sell_flow_native_uri of this ItemDraftResponse.  # noqa: E501
        :type: str
        """

        self._sell_flow_native_uri = sell_flow_native_uri

    @property
    def sell_flow_url(self):
        """Gets the sell_flow_url of this ItemDraftResponse.  # noqa: E501

        The web URL the Partner uses to send the seller to the listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. <br /><br />This is returned when the seller is using mobile web (mweb) or the desktop web. <br /> <br /><b>Note: </b> You must construct the URL using the URL returned in this field and a session token.<br /><br /><b>For example: </b> <code><i>sellFlowUrl</i>?id_token=<i>session_token</i><code>  # noqa: E501

        :return: The sell_flow_url of this ItemDraftResponse.  # noqa: E501
        :rtype: str
        """
        return self._sell_flow_url

    @sell_flow_url.setter
    def sell_flow_url(self, sell_flow_url):
        """Sets the sell_flow_url of this ItemDraftResponse.

        The web URL the Partner uses to send the seller to the listing draft that was created on the eBay site. From there the seller can change, update, and publish the item on eBay. <br /><br />This is returned when the seller is using mobile web (mweb) or the desktop web. <br /> <br /><b>Note: </b> You must construct the URL using the URL returned in this field and a session token.<br /><br /><b>For example: </b> <code><i>sellFlowUrl</i>?id_token=<i>session_token</i><code>  # noqa: E501

        :param sell_flow_url: The sell_flow_url of this ItemDraftResponse.  # noqa: E501
        :type: str
        """

        self._sell_flow_url = sell_flow_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ItemDraftResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDraftResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
