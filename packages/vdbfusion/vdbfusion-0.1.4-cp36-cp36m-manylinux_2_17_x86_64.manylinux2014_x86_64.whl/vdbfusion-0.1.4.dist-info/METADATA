Metadata-Version: 2.1
Name: vdbfusion
Version: 0.1.4
Summary: 3D Volumetric Surface Reconstruction using the VDB data structure
Home-page: UNKNOWN
Author: Ignacio Martin Vizzo (aka Nacho) and Cyrill Stachniss
Author-email: ignaciovizzo@gmail.com
License: UNKNOWN
Keywords: TSDF,Mapping,SLAM,LiDAR,Odometry,Localization
Platform: UNKNOWN
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: numpy
Provides-Extra: test
Requires-Dist: pytest ; extra == 'test'

**NOTE:** The support for this pip pacakge it is still under develpment and therefore might not be
so stable.

# VDBFusion

![example](docs/vdbfusion.gif)

This is a small utility library that implement the VDBFusion algorithm, similar to TSDF-based
reconstruction pipelines but using a different data-structure(VDB).

## Installation

Take a seat and relax, you only need to:

```shell
pip install vdbfusion
```

If this step fails is most likely you have an old version of `pip`. To fix this, just `pip install -U pip`

## Usage

```python
from vdbfusion import VDBVolume

vdb_volume = VDBVolume(voxel_size=0.1, sdf_trunc=0.3, space_carving=False)

# You need to define your own Dataset.
dataset = Dataset(...)

for scan, origin in dataset:
    vdb_volume.integrate(scan, origin)
```

## Visualizing the output

### Open3D(`pip install open3d`)

```python
import open3d as o3d
# Extract a mesh from vdbfusion
vertices, triangles = vdb_volume.extract_triangle_mesh()

# Visualize the results
mesh = o3d.geometry.TriangleMesh(
    o3d.utility.Vector3dVector(vertices),
    o3d.utility.Vector3iVector(triangles),
)
mesh.compute_vertex_normals()
o3d.visualization.draw_geometries([mesh])
```

### trimesh(`pip install trimesh`)

```python
import trimesh

# Extract your map
vertices, triangles = vdb_volume.extract_triangle_mesh()

mesh = trimesh.Trimesh(vertices=vertices, faces=triangles)
mesh.show()
```

## Dataset snippet

You `Dataset` class must only define a `__len__` and `__getitem__` methods, similar to
`torch.Dataset`:

```python

class Dataset:
    def __init__(self, *args, **kwargs):
        # Initialize your dataset here ..

    def __len__(self) -> int:
        return len(self.n_scans)

    def __getitem__(self, idx: int) -> Tuple[np.ndarray, np.ndarray]:
        # points: np.array (N, 3), in the global coordinate frame.
        # origin: np.array(3,), sensor origin in the global coordinate frame.
        return points, origin
```



