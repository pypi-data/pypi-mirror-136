{"version":3,"file":"2a64f7b9.js","mappings":";;AAuBA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;;;;;;AAOA;AACA;;AA5BA;;;;;;AATA;;;ACiFA;AAGA;AAGA;AACA;AACA;;;;AAIA;AAGA;AAGA;AACA;AACA;;;AAGA;AAGA;;AAIA;AACA;AACA;;;;;AAKA;AAGA;;;AAGA;AACA;AACA;;;;AAIA;AAGA;;AAIA;AACA;AACA;;;;AAIA;AACA;AACA;;;AAGA;;;;AAMA;AAGA;AACA;AACA;AACA;;;;AArFA;;;;AAzCA","sources":["webpack://home-assistant-frontend/./src/panels/lovelace/components/hui-input-list-editor.ts","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-map-card-editor.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-icon-button\";\nimport { HomeAssistant } from \"../../../types\";\nimport { EditorTarget } from \"../editor/types\";\n\n@customElement(\"hui-input-list-editor\")\nexport class HuiInputListEditor extends LitElement {\n  @property() protected value?: string[];\n\n  @property() protected hass?: HomeAssistant;\n\n  @property() protected inputLabel?: string;\n\n  protected render(): TemplateResult {\n    if (!this.value) {\n      return html``;\n    }\n\n    return html`\n      ${this.value.map(\n        (listEntry, index) => html`\n          <paper-input\n            label=${this.inputLabel}\n            .value=${listEntry}\n            .configValue=${\"entry\"}\n            .index=${index}\n            @value-changed=${this._valueChanged}\n            @blur=${this._consolidateEntries}\n            @keydown=${this._handleKeyDown}\n            ><ha-icon-button\n              slot=\"suffix\"\n              class=\"clear-button\"\n              .path=${mdiClose}\n              no-ripple\n              @click=${this._removeEntry}\n              .label=${this.hass!.localize(\"ui.common.clear\")}\n              >Clear</ha-icon-button\n            ></paper-input\n          >\n        `\n      )}\n      <paper-input\n        label=${this.inputLabel}\n        @change=${this._addEntry}\n      ></paper-input>\n    `;\n  }\n\n  private _addEntry(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      return;\n    }\n    const newEntries = this.value!.concat(target.value as string);\n    target.value = \"\";\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n    (ev.target! as LitElement).blur();\n  }\n\n  private _valueChanged(ev: Event): void {\n    ev.stopPropagation();\n    const target = ev.target! as EditorTarget;\n    const newEntries = this.value!.concat();\n    newEntries[target.index!] = target.value!;\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  private _handleKeyDown(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      ev.stopPropagation();\n      this._consolidateEntries(ev);\n    }\n  }\n\n  private _consolidateEntries(ev: Event): void {\n    const target = ev.target! as EditorTarget;\n    if (target.value === \"\") {\n      const newEntries = this.value!.concat();\n      newEntries.splice(target.index!, 1);\n      fireEvent(this, \"value-changed\", {\n        value: newEntries,\n      });\n    }\n  }\n\n  private _removeEntry(ev: Event): void {\n    const parent = (ev.currentTarget as any).parentElement;\n    const newEntries = this.value!.concat();\n    newEntries.splice(parent.index!, 1);\n    fireEvent(this, \"value-changed\", {\n      value: newEntries,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-icon-button {\n        --mdc-icon-button-size: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-list-editor\": HuiInputListEditor;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  array,\n  assert,\n  boolean,\n  number,\n  object,\n  optional,\n  string,\n  assign,\n} from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-switch\";\nimport { PolymerChangedEvent } from \"../../../../polymer-types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { MapCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-input-list-editor\";\nimport { EntityConfig } from \"../../entity-rows/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { EditorTarget, EntitiesEditorEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    title: optional(string()),\n    aspect_ratio: optional(string()),\n    default_zoom: optional(number()),\n    dark_mode: optional(boolean()),\n    entities: array(entitiesConfigStruct),\n    hours_to_show: optional(number()),\n    geo_location_sources: optional(array(string())),\n  })\n);\n\n@customElement(\"hui-map-card-editor\")\nexport class HuiMapCardEditor extends LitElement implements LovelaceCardEditor {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: MapCardConfig;\n\n  @state() private _configEntities?: EntityConfig[];\n\n  public setConfig(config: MapCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processEditorEntities(config.entities)\n      : [];\n  }\n\n  get _title(): string {\n    return this._config!.title || \"\";\n  }\n\n  get _aspect_ratio(): string {\n    return this._config!.aspect_ratio || \"\";\n  }\n\n  get _default_zoom(): number {\n    return this._config!.default_zoom || 0;\n  }\n\n  get _geo_location_sources(): string[] {\n    return this._config!.geo_location_sources || [];\n  }\n\n  get _hours_to_show(): number {\n    return this._config!.hours_to_show || 0;\n  }\n\n  get _dark_mode(): boolean {\n    return this._config!.dark_mode || false;\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    return html`\n      <div class=\"card-config\">\n        <paper-input\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.title\"\n          )}\n          (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .value=${this._title}\n          .configValue=${\"title\"}\n          @value-changed=${this._valueChanged}\n        ></paper-input>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.aspect_ratio\"\n            )}\n            (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._aspect_ratio}\n            .configValue=${\"aspect_ratio\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.map.default_zoom\"\n            )}\n            (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._default_zoom}\n            .configValue=${\"default_zoom\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <div class=\"side-by-side\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.map.dark_mode\"\n            )}\n            .dir=${computeRTLDirection(this.hass)}\n          >\n            <ha-switch\n              .checked=${this._dark_mode}\n              .configValue=${\"dark_mode\"}\n              @change=${this._valueChanged}\n            ></ha-switch\n          ></ha-formfield>\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.map.hours_to_show\"\n            )}\n            (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            type=\"number\"\n            .value=${this._hours_to_show}\n            .configValue=${\"hours_to_show\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n        </div>\n        <hui-entity-editor\n          .hass=${this.hass}\n          .entities=${this._configEntities}\n          @entities-changed=${this._entitiesValueChanged}\n        ></hui-entity-editor>\n        <h3>\n          ${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.map.geo_location_sources\"\n          )}\n        </h3>\n        <div class=\"geo_location_sources\">\n          <hui-input-list-editor\n            .inputLabel=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.map.source\"\n            )}\n            .hass=${this.hass}\n            .value=${this._geo_location_sources}\n            .configValue=${\"geo_location_sources\"}\n            @value-changed=${this._valueChanged}\n          ></hui-input-list-editor>\n        </div>\n      </div>\n    `;\n  }\n\n  private _entitiesValueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    if (ev.detail && ev.detail.entities) {\n      this._config = { ...this._config, entities: ev.detail.entities };\n\n      this._configEntities = processEditorEntities(this._config.entities);\n      fireEvent(this, \"config-changed\", { config: this._config });\n    }\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<any>): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (!target.configValue) {\n      return;\n    }\n\n    let value = target.checked ?? ev.detail.value;\n\n    if (value && target.type === \"number\") {\n      value = Number(value);\n    }\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    if (value === \"\") {\n      this._config = { ...this._config };\n      delete this._config[target.configValue!];\n    } else if (target.configValue) {\n      this._config = {\n        ...this._config,\n        [target.configValue]: value,\n      };\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .geo_location_sources {\n          padding-left: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-map-card-editor\": HuiMapCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}