{"version":3,"file":"87ba493c.js","mappings":";;;;AAMA;;;ACsDA;;;AAGA;;;AAGA;;;;AAIA;AACA;;;;;;;AAOA;AACA;;AAEA;;;;AAIA;;;;;;AAMA;AACA;;;;;AAnEA;;;;;;;;;;;;;;;;AAAA","sources":["webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/panels/aisgalery/ha-dialog-aisgalery.ts"],"sourcesContent":["import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import \"@polymer/paper-input/paper-input\";\nimport \"../../components/ha-icon-button\";\nimport \"@material/mwc-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"../../components/ha-dialog\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { property } from \"lit/decorators\";\nimport { HomeAssistant } from \"../../types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n\nimport { PolymerChangedEvent } from \"../../polymer-types\";\n\nimport \"../../components/ha-picture-upload\";\nimport type { HaPictureUpload } from \"../../components/ha-picture-upload\";\nimport { CropOptions } from \"../../dialogs/image-cropper-dialog/show-image-cropper-dialog\";\nimport { AisGaleryDialogParams } from \"./show-ha-aisgalery-dialog\";\n\nconst cropOptions: CropOptions = {\n  round: false,\n  type: \"image/jpeg\",\n  quality: 0.75,\n  aspectRatio: NaN,\n};\n\nexport class HaDialogAisgalery extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  private _params?: AisGaleryDialogParams;\n\n  @property() private _name!: string;\n\n  @property() private _picture!: string | null;\n\n  @property() private _picture_last_value!: string | null;\n\n  @property() private _error?: string;\n\n  @property() private _submitting = false;\n\n  @property() private _closeDialog = false;\n\n  public async showDialog(params: AisGaleryDialogParams): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._picture = null;\n    this._name = \"\";\n    this._closeDialog = false;\n  }\n\n  protected render(): TemplateResult {\n    if (this._closeDialog) {\n      return html``;\n    }\n    const nameInvalid = this._name.trim() === \"\";\n    const pictureInvalid = this._picture == null;\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._close}\n        scrimClickAction\n        escapeKeyAction\n        .heading=${createCloseHeading(this.hass, \"Nowe zdjęcie\")}     \n      >\n      <div>\n          ${this._error ? html` <div class=\"error\">${this._error}</div> ` : \"\"}\n          <div class=\"form\">\n            <paper-input\n                dialogInitialFocus\n                .value=${this._name}\n                @value-changed=${this._nameChanged}\n                label=\"Nazwa\"\n                error-message=\"Nazwa jest wymagana\"\n                required\n                auto-validate\n              ></paper-input>\n            <ha-picture-upload\n                  .hass=${this.hass}\n                  .value=${this._picture}\n                  crop\n                  .cropOptions=${cropOptions}\n                  required\n                  auto-validate\n                  error-message=\"Zdjęcie jest wymagane\"\n                  @change=${this._pictureChanged}\n                ></ha-picture-upload>\n          </div>\n      </div>\n        <mwc-button\n            slot=\"primaryAction\"\n            @click=${this._addPicture}\n            .disabled=${nameInvalid || pictureInvalid || this._submitting}\n          > Dodaj\n          </mwc-button>\n        </ha-dialog>\n      </ha-dialog>\n    `;\n  }\n\n  private _pictureChanged(ev: PolymerChangedEvent<string | null>) {\n    this._error = undefined;\n    this._picture = (ev.target as HaPictureUpload).value;\n    if (this._name.trim() === \"\") {\n      this._name = (ev.target as HaPictureUpload).fileName || \"\";\n      this._name = this._name.split(\".\")[0];\n    }\n    if (this._picture == null) {\n      this._deletePicture();\n    } else {\n      this._picture_last_value = this._picture;\n    }\n  }\n\n  private async _deletePicture() {\n    if (this._picture_last_value) {\n      await this.hass.callService(\"ais_files\", \"remove_file\", {\n        path: this._picture_last_value,\n      });\n    }\n  }\n\n  private async _savePicture() {\n    await this.hass.callService(\"ais_files\", \"transfer_file\", {\n      path: this._picture_last_value,\n      name: this._name,\n    });\n    this._picture_last_value = null;\n    // refresh...\n    this._params?.jsCallback();\n  }\n\n  private _nameChanged(ev: PolymerChangedEvent<string>) {\n    this._error = undefined;\n    this._name = ev.detail.value;\n  }\n\n  private async _addPicture() {\n    this._submitting = true;\n    try {\n      this._savePicture();\n      this._closeDialog = true;\n    } catch (err) {\n      this._error = err ? err.message : \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _close(): void {\n    this._closeDialog = true;\n    this._deletePicture();\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      haStyleDialog,\n      css`\n        .form {\n          padding-bottom: 24px;\n        }\n        ha-picture-upload {\n          display: block;\n        }\n        ha-user-picker {\n          margin-top: 16px;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        p {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-aisgalery\": HaDialogAisgalery;\n  }\n}\n\ncustomElements.define(\"ha-dialog-aisgalery\", HaDialogAisgalery);\n"],"names":[],"sourceRoot":""}