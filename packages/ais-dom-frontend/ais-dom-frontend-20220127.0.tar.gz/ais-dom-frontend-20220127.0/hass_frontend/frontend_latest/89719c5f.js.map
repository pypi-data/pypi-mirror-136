{"version":3,"file":"89719c5f.js","mappings":";;;AA0DA;AACA;;AAEA;;;AAIA;AACA;AACA;AAOA;;;AAaA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;;;AAIA;;AAQA;;;AAaA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAKA;;;;ACrJA;;AC4GA;;AAKA;;AAWA;AACA;;AAGA;;;AASA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;;AAMA","sources":["webpack://home-assistant-frontend/mwc-circular-progress-base.ts","webpack://home-assistant-frontend/./src/components/ha-circular-progress.ts","webpack://home-assistant-frontend/./src/panels/lovelace/cards/hui-picture-entity-card.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {html, LitElement, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {styleMap} from 'lit/directives/style-map.js';\n\n/** @soyCompatible */\nexport class CircularProgressBase extends LitElement {\n  @property({type: Boolean, reflect: true}) indeterminate = false;\n\n  @property({type: Number, reflect: true}) progress = 0;\n\n  @property({type: Number, reflect: true}) density = 0;\n\n  @property({type: Boolean, reflect: true}) closed = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({type: String, attribute: 'aria-label'})\n  ariaLabel!: string\n\n  open() {\n    this.closed = false;\n  }\n\n  close() {\n    this.closed = true;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected override render(): TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-circular-progress--closed': this.closed,\n      'mdc-circular-progress--indeterminate': this.indeterminate,\n    };\n\n    const containerSideLength = 48 + this.density * 4;\n    /** @styleMap */\n    const styles = {\n      'width': `${containerSideLength}px`,\n      'height': `${containerSideLength}px`,\n    };\n\n    return html`\n      <div\n        class=\"mdc-circular-progress ${classMap(classes)}\"\n        style=\"${styleMap(styles)}\"\n        role=\"progressbar\"\n        aria-label=\"${ifDefined(this.ariaLabel)}\"\n        aria-valuemin=\"0\"\n        aria-valuemax=\"1\"\n        aria-valuenow=\"${\n        ifDefined(this.indeterminate ? undefined : this.progress)}\">\n        ${this.renderDeterminateContainer()}\n        ${this.renderIndeterminateContainer()}\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderDeterminateContainer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const determinateStrokeDashOffset = (1 - this.progress) * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n      <div class=\"mdc-circular-progress__determinate-container\">\n        <svg class=\"mdc-circular-progress__determinate-circle-graphic\"\n             viewBox=\"0 0 ${sideLength} ${sideLength}\">\n          <circle class=\"mdc-circular-progress__determinate-track\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n          <circle class=\"mdc-circular-progress__determinate-circle\"\n                  cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                  stroke-dasharray=\"${2 * 3.1415926 * circleRadius}\"\n                  stroke-dashoffset=\"${determinateStrokeDashOffset}\"\n                  stroke-width=\"${strokeWidth}\"></circle>\n        </svg>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateContainer(): TemplateResult {\n    return html`\n      <div class=\"mdc-circular-progress__indeterminate-container\">\n        <div class=\"mdc-circular-progress__spinner-layer\">\n          ${this.renderIndeterminateSpinnerLayer()}\n        </div>\n      </div>`;\n  }\n\n  /**\n   * @soyTemplate\n   */\n  protected renderIndeterminateSpinnerLayer(): TemplateResult {\n    const sideLength = 48 + this.density * 4;\n    const center = sideLength / 2;\n    const circleRadius = this.density >= -3 ? 18 + this.density * 11 / 6 :\n                                              12.5 + (this.density + 3) * 5 / 4;\n    const circumference = 2 * 3.1415926 * circleRadius;\n    const halfCircumference = 0.5 * circumference;\n    const strokeWidth = this.density >= -3 ? 4 + this.density * (1 / 3) :\n                                             3 + (this.density + 3) * (1 / 6);\n\n    return html`\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-left\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__gap-patch\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth * 0.8}\"></circle>\n          </svg>\n        </div>\n        <div class=\"mdc-circular-progress__circle-clipper mdc-circular-progress__circle-right\">\n          <svg class=\"mdc-circular-progress__indeterminate-circle-graphic\"\n               viewBox=\"0 0 ${sideLength} ${sideLength}\">\n            <circle cx=\"${center}\" cy=\"${center}\" r=\"${circleRadius}\"\n                    stroke-dasharray=\"${circumference}\"\n                    stroke-dashoffset=\"${halfCircumference}\"\n                    stroke-width=\"${strokeWidth}\"></circle>\n          </svg>\n        </div>`;\n  }\n\n  override update(changedProperties: Map<string, string>) {\n    super.update(changedProperties);\n\n    // Bound progress value in interval [0, 1].\n    if (changedProperties.has('progress')) {\n      if (this.progress > 1) {\n        this.progress = 1;\n      }\n\n      if (this.progress < 0) {\n        this.progress = 0;\n      }\n    }\n  }\n}\n","import { CircularProgress } from \"@material/mwc-circular-progress\";\nimport { CSSResultGroup, css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-circular-progress\")\n// @ts-ignore\nexport class HaCircularProgress extends CircularProgress {\n  @property({ type: Boolean })\n  public active = false;\n\n  @property()\n  public alt = \"Loading\";\n\n  @property()\n  public size: \"tiny\" | \"small\" | \"medium\" | \"large\" = \"medium\";\n\n  // @ts-ignore\n  public set density(_) {\n    // just a dummy\n  }\n\n  public get density() {\n    switch (this.size) {\n      case \"tiny\":\n        return -8;\n      case \"small\":\n        return -5;\n      case \"medium\":\n        return 0;\n      case \"large\":\n        return 5;\n      default:\n        return 0;\n    }\n  }\n\n  // @ts-ignore\n  public set indeterminate(_) {\n    // just a dummy\n  }\n\n  public get indeterminate() {\n    return this.active;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.styles,\n      css`\n        :host {\n          overflow: hidden;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-circular-progress\": HaCircularProgress;\n  }\n}\n","import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDisplay } from \"../../../common/entity/compute_state_display\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-card\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-image\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { PictureEntityCardConfig } from \"./types\";\n\n@customElement(\"hui-picture-entity-card\")\nclass HuiPictureEntityCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-picture-entity-card-editor\");\n    return document.createElement(\"hui-picture-entity-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): PictureEntityCardConfig {\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      [\"light\", \"switch\"]\n    );\n\n    return {\n      type: \"picture-entity\",\n      entity: foundEntities[0] || \"\",\n      image: \"https://demo.home-assistant.io/stub_config/bedroom.png\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: PictureEntityCardConfig;\n\n  public getCardSize(): number {\n    return 3;\n  }\n\n  public setConfig(config: PictureEntityCardConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Entity must be specified\");\n    }\n\n    if (\n      computeDomain(config.entity) !== \"camera\" &&\n      !config.image &&\n      !config.state_image &&\n      !config.camera_image\n    ) {\n      throw new Error(\"No image source configured\");\n    }\n\n    this._config = { show_name: true, show_state: true, ...config };\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | PictureEntityCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    const name = this._config.name || computeStateName(stateObj);\n    const entityState = computeStateDisplay(\n      this.hass!.localize,\n      stateObj,\n      this.hass.locale\n    );\n\n    let footer: TemplateResult | string = \"\";\n    if (this._config.show_name && this._config.show_state) {\n      footer = html`\n        <div class=\"footer both\">\n          <div>${name}</div>\n          <div>${entityState}</div>\n        </div>\n      `;\n    } else if (this._config.show_name) {\n      footer = html`<div class=\"footer single\">${name}</div>`;\n    } else if (this._config.show_state) {\n      footer = html`<div class=\"footer single\">${entityState}</div>`;\n    }\n\n    return html`\n      <ha-card>\n        <hui-image\n          .hass=${this.hass}\n          .image=${this._config.image}\n          .stateImage=${this._config.state_image}\n          .stateFilter=${this._config.state_filter}\n          .cameraImage=${computeDomain(this._config.entity) === \"camera\"\n            ? this._config.entity\n            : this._config.camera_image}\n          .cameraView=${this._config.camera_view}\n          .entity=${this._config.entity}\n          .aspectRatio=${this._config.aspect_ratio}\n          @action=${this._handleAction}\n          .actionHandler=${actionHandler({\n            hasHold: hasAction(this._config!.hold_action),\n            hasDoubleClick: hasAction(this._config!.double_tap_action),\n          })}\n          tabindex=${ifDefined(\n            hasAction(this._config.tap_action) || this._config.entity\n              ? \"0\"\n              : undefined\n          )}\n        ></hui-image>\n        ${footer}\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        min-height: 75px;\n        overflow: hidden;\n        position: relative;\n        height: 100%;\n        box-sizing: border-box;\n      }\n\n      hui-image {\n        cursor: pointer;\n      }\n\n      .footer {\n        /* start paper-font-common-nowrap style */\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        /* end paper-font-common-nowrap style */\n\n        position: absolute;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        background-color: var(\n          --ha-picture-card-background-color,\n          rgba(0, 0, 0, 0.3)\n        );\n        padding: 16px;\n        font-size: 16px;\n        line-height: 16px;\n        color: var(--ha-picture-card-text-color, white);\n      }\n\n      .both {\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .single {\n        text-align: center;\n      }\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-picture-entity-card\": HuiPictureEntityCard;\n  }\n}\n"],"names":[],"sourceRoot":""}