{"version":3,"file":"e295932a.js","mappings":";;;AAoFA;AACA;;AAEA;;;;AAyCA;;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAOA;ACxIA;AAGA;ACWA;;;;;;;AAOA;;;;;;;;;AA1BA;;;;;;;;;;AAyDA;AAEA;AAGA;;;AAGA;AACA;;AAIA;;AAEA;;;;;AAhCA;;;;;;;;;;;;;;;;;;;;;;;AAxCA;;ACiEA;;;;;AAMA;;;AAGA;;;;AAIA;;;;;;;;;;AAWA;AAEA;;;;;;AAMA;;AAKA;AACA;;;;;;;AAOA;AAGA;;;;;;;;;;;;;;;;AAgBA;;AAGA;AAEA;AAEA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA5IA;ACqCA;;AAEA;;;AAVA;;AAEA","sources":["webpack://home-assistant-frontend/mwc-switch-base.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ais-webhooks.ts","webpack://home-assistant-frontend/./src/panels/config/ais_dom/ha-config-ais-dom-config-remote.ts","webpack://home-assistant-frontend/./src/panels/lovelace/entity-rows/hui-timer-entity-row.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-ripple/mwc-ripple';\n\nimport {ariaProperty} from '@material/mwc-base/aria-property';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element';\nimport {observer} from '@material/mwc-base/observer';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers';\nimport {MDCSwitchAdapter} from '@material/switch/deprecated/adapter';\nimport MDCSwitchFoundation from '@material/switch/deprecated/foundation';\nimport {html} from 'lit';\nimport {eventOptions, property, query, queryAsync, state} from 'lit/decorators.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\n\nexport class SwitchBase extends BaseElement {\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setChecked(value);\n  })\n  checked = false;\n\n  @property({type: Boolean})\n  @observer(function(this: SwitchBase, value: boolean) {\n    this.mdcFoundation.setDisabled(value);\n  })\n  disabled = false;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty @property({attribute: 'aria-label'}) ariaLabel!: string;\n\n  /** @soyPrefixAttribute */\n  @ariaProperty\n  @property({attribute: 'aria-labelledby'})\n  ariaLabelledBy!: string;\n\n  @query('.mdc-switch') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  @state() protected shouldRenderRipple = false;\n\n  protected mdcFoundation!: MDCSwitchFoundation;\n\n  protected changeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n\n  protected readonly mdcFoundationClass = MDCSwitchFoundation;\n\n  protected createAdapter(): MDCSwitchAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      setNativeControlChecked: (checked: boolean) => {\n        this.formElement.checked = checked;\n      },\n      setNativeControlDisabled: (disabled: boolean) => {\n        this.formElement.disabled = disabled;\n      },\n      setNativeControlAttr: (attr, value) => {\n        this.formElement.setAttribute(attr, value);\n      },\n    };\n  }\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    return this.ripple;\n  });\n\n  protected renderRipple() {\n    return this.shouldRenderRipple ? html`\n        <mwc-ripple\n          .accent=\"${this.checked}\"\n          .disabled=\"${this.disabled}\"\n          unbounded>\n        </mwc-ripple>` :\n                                     '';\n  }\n\n  override focus() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.startFocus();\n      formElement.focus();\n    }\n  }\n\n  override blur() {\n    const formElement = this.formElement;\n    if (formElement) {\n      this.rippleHandlers.endFocus();\n      formElement.blur();\n    }\n  }\n\n  override click() {\n    if (this.formElement && !this.disabled) {\n      this.formElement.focus();\n      this.formElement.click();\n    }\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    if (this.shadowRoot) {\n      this.mdcRoot.addEventListener('change', (e) => {\n        this.dispatchEvent(new Event('change', e));\n      });\n    }\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div class=\"mdc-switch__thumb-underlay\">\n          ${this.renderRipple()}\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              aria-label=\"${ifDefined(this.ariaLabel)}\"\n              aria-labelledby=\"${ifDefined(this.ariaLabelledBy)}\"\n              @change=\"${this.changeHandler}\"\n              @focus=\"${this.handleRippleFocus}\"\n              @blur=\"${this.handleRippleBlur}\"\n              @mousedown=\"${this.handleRippleMouseDown}\"\n              @mouseenter=\"${this.handleRippleMouseEnter}\"\n              @mouseleave=\"${this.handleRippleMouseLeave}\"\n              @touchstart=\"${this.handleRippleTouchStart}\"\n              @touchend=\"${this.handleRippleDeactivate}\"\n              @touchcancel=\"${this.handleRippleDeactivate}\">\n          </div>\n        </div>\n      </div>`;\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleMouseDown(event: Event) {\n    const onUp = () => {\n      window.removeEventListener('mouseup', onUp);\n\n      this.handleRippleDeactivate();\n    };\n\n    window.addEventListener('mouseup', onUp);\n    this.rippleHandlers.startPress(event);\n  }\n\n  @eventOptions({passive: true})\n  protected handleRippleTouchStart(event: Event) {\n    this.rippleHandlers.startPress(event);\n  }\n\n  protected handleRippleDeactivate() {\n    this.rippleHandlers.endPress();\n  }\n\n  protected handleRippleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  protected handleRippleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  protected handleRippleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  protected handleRippleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import { html, LitElement, PropertyDeclarations } from \"lit\";\nimport {property} from 'lit/decorators';\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"../../../components/ha-card\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { Webhook, fetchWebhooks } from \"../../../data/webhook\";\n\nimport { showManageCloudhookDialog } from \"./dialog-manage-ais-cloudhook/show-dialog-manage-ais-cloudhook\";\n\nexport class AisWebhooks extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _localHooks?: Webhook[];\n\n  static get properties(): PropertyDeclarations {\n    return {\n      hass: {},\n      _localHooks: {},\n    };\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._fetchData();\n  }\n\n  protected render() {\n    return html`\n      ${this.renderStyle()}\n      <ha-card header=\"Wywołania zwrotne HTTP\">\n        <div class=\"card-content\">\n          Wywołania zwrotne HTTP (Webhook) używane są do udostępniania\n          powiadomień o zdarzeniach. Wszystko, co jest skonfigurowane do\n          uruchamiania przez wywołanie zwrotne, ma publicznie dostępny unikalny\n          adres URL, aby umożliwić wysyłanie danych do Asystenta domowego z\n          dowolnego miejsca. ${this._renderBody()}\n\n          <div class=\"footer\">\n            <a href=\"https://www.ai-speaker.com/\" target=\"_blank\">\n              Dowiedz się więcej o zwrotnym wywołaniu HTTP.\n            </a>\n          </div>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _renderBody() {\n    if (!this._localHooks) {\n      return html` <div class=\"body-text\">Pobieranie…</div> `;\n    }\n\n    if (this._localHooks.length === 1) {\n      return html`\n        <div class=\"body-text\">\n          Wygląda na to, że nie masz jeszcze zdefiniowanych żadnych wywołań\n          zwrotnych. Rozpocznij od skonfigurowania\n          <a href=\"/config/integrations\">\n            integracji opartej na wywołaniu zwrotnym\n          </a>\n          lub przez tworzenie\n          <a href=\"/config/automation/new\"> automatyzacji typu webhook </a>.\n        </div>\n      `;\n    }\n\n    return this._localHooks.map(\n      (entry) => html`\n        ${entry.webhook_id === \"aisdomprocesscommandfromframe\"\n          ? html` <div></div> `\n          : html`\n              <div class=\"webhook\" .entry=\"${entry}\">\n                <paper-item-body two-line>\n                  <div>\n                    ${entry.name}\n                    ${entry.domain === entry.name.toLowerCase()\n                      ? \"\"\n                      : ` (${entry.domain})`}\n                  </div>\n                  <div secondary>${entry.webhook_id}</div>\n                </paper-item-body>\n                <mwc-button @click=\"${this._handleManageButton}\">\n                  Pokaż\n                </mwc-button>\n              </div>\n            `}\n      `\n    );\n  }\n\n  private _showDialog(webhookId: string) {\n    const webhook = this._localHooks!.find(\n      (ent) => ent.webhook_id === webhookId\n    )!;\n    showManageCloudhookDialog(this, { webhook });\n  }\n\n  private _handleManageButton(ev: MouseEvent) {\n    const entry = (ev.currentTarget as any).parentElement.entry as Webhook;\n    this._showDialog(entry.webhook_id);\n  }\n\n  private async _fetchData() {\n    this._localHooks = await fetchWebhooks(this.hass!);\n  }\n\n  private renderStyle() {\n    return html`\n      <style>\n        .body-text {\n          padding: 8px 0;\n        }\n        .webhook {\n          display: flex;\n          padding: 4px 0;\n        }\n        .progress {\n          margin-right: 16px;\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n        }\n        .footer {\n          padding-top: 16px;\n        }\n        .body-text a,\n        .footer a {\n          color: var(--primary-color);\n        }\n      </style>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ais-webhooks\": AisWebhooks;\n  }\n}\n\ncustomElements.define(\"ais-webhooks\", AisWebhooks);\n","import \"@material/mwc-list/mwc-list-item\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../lovelace/entity-rows/hui-timer-entity-row\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { mdiDotsVertical } from \"@mdi/js\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-dashboard\";\nimport \"./ais-webhooks\";\nimport \"../../../components/ha-switch\";\nimport {\n  HaAisFileDialogParams,\n  showAisFileDialog,\n} from \"../../../dialogs/ais-files/show-dialog-ais-file\";\n\n@customElement(\"ha-config-ais-dom-config-remote\")\nclass HaConfigAisDomControl extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() private _qrCode?: TemplateResult;\n\n  @property() public narrow!: boolean;\n\n  @property() private remoteDomain;\n\n  async _generateQR() {\n    const qrcode = await import(\"qrcode\");\n    const canvas = await qrcode.toCanvas(`${this.remoteDomain}`, {\n      width: 280,\n      errorCorrectionLevel: \"Q\",\n    });\n    const context = canvas.getContext(\"2d\");\n\n    const imageObj = new Image();\n    imageObj.src = \"/static/icons/favicon-192x192.png\";\n    await new Promise((resolve) => {\n      imageObj.onload = resolve;\n    });\n    context.drawImage(\n      imageObj,\n      canvas.width / 3,\n      canvas.height / 3,\n      canvas.width / 3,\n      canvas.height / 3\n    );\n\n    this._qrCode = html`<img src=${canvas.toDataURL()}></img>`;\n  }\n\n  changeRemote() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_remote_access\",\n    });\n  }\n\n  enableGatePariringByPin() {\n    this.hass.callService(\"ais_cloud\", \"enable_gate_pairing_by_pin\");\n  }\n\n  protected firstUpdated() {\n    this._generateQR();\n  }\n\n  protected render(): TemplateResult {\n    this.remoteDomain =\n      \"https://\" +\n      this.hass.states[\"sensor.ais_secure_android_id_dom\"].state +\n      \".paczka.pro\";\n\n    return html`\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        ${this.hass.states[\"input_boolean.ais_remote_access\"].state === \"on\"\n          ? html`\n              <ha-button-menu corner=\"BOTTOM_START\" slot=\"toolbar-icon\">\n                <mwc-icon-button slot=\"trigger\" alt=\"menu\">\n                  <ha-svg-icon .path=${mdiDotsVertical}></ha-svg-icon>\n                </mwc-icon-button>\n                <mwc-list-item @click=${this._openCloudflareFileConfig}>\n                  Cloudflare config.yaml\n                </mwc-list-item>\n                <mwc-list-item @click=${this._restartTunnelService}>\n                  Restart tunnel sevice\n                </mwc-list-item>\n              </ha-button-menu>\n            `\n          : ` `}\n        <div>\n          <ha-config-section>\n            <span slot=\"header\">Zdalny dostęp</span>\n            <span slot=\"introduction\"\n              >W tej sekcji możesz skonfigurować zdalny dostęp do bramki</span\n            >\n            <ha-card header=\"Szyfrowany tunel\">\n              <div id=\"ha-switch-id\">\n                <ha-switch\n                  .checked=${this.hass.states[\"input_boolean.ais_remote_access\"]\n                    .state === \"on\"}\n                  @change=${this.changeRemote}\n                ></ha-switch>\n              </div>\n              <div class=\"card-content\">\n                Tunel zapewnia bezpieczne zdalne połączenie z Twoim urządzeniem\n                kiedy jesteś z dala od domu. Twoja bramka dostępna\n                ${this.hass.states[\"input_boolean.ais_remote_access\"].state ===\n                \"on\"\n                  ? html` jest `\n                  : ` będzie `}\n                z Internetu pod adresem\n                <a href=${this.remoteDomain} target=\"_blank\"\n                  >${this.remoteDomain}</a\n                >.\n                <div\n                  class=\"center-container border\"\n                  style=\"height: 320px; text-align: center;\"\n                >\n                  <div id=\"qr\" style=\"text-align: center; margin-top: 10px;\">\n                    ${this._qrCode\n                      ? this._qrCode\n                      : html`\n                          <mwc-button @click=${this._generateQR}\n                            >Pokaż kod QR\n                          </mwc-button>\n                        `}\n                  </div>\n                  Zeskanuj kod QR za pomocą aplikacji na telefonie.\n                </div>\n              </div>\n              <div class=\"card-content\" style=\"text-align:center;\">\n                <svg style=\"width:48px;height:48px\" viewBox=\"0 0 24 24\">\n                  <path\n                    fill=\"#929395\"\n                    d=\"M1,11H6L3.5,8.5L4.92,7.08L9.84,12L4.92,16.92L3.5,15.5L6,13H1V11M8,0H16L16.83,5H17A2,2 0 0,1 19,7V17C19,18.11 18.1,19 17,19H16.83L16,24H8L7.17,19H7C6.46,19 6,18.79 5.62,18.44L7.06,17H17V7H7.06L5.62,5.56C6,5.21 6.46,5 7,5H7.17L8,0Z\"\n                  />\n                </svg>\n                <br />\n                ${this.hass.states[\"timer.ais_dom_pin_join\"].state === \"active\"\n                  ? html`PIN aktywny przez dwie munuty: <br />\n                      <span class=\"pin\"\n                        >${this.hass.states[\"sensor.gate_pairing_pin\"]\n                          .state}</span\n                      ><br /> `\n                  : html`<br />\n                      <mwc-button @click=${this.enableGatePariringByPin}\n                        >Generuj kod PIN</mwc-button\n                      >`}\n              </div>\n              <div class=\"card-actions\">\n                <a\n                  href=\"https://www.ai-speaker.com/docs/ais_bramka_remote_www_index\"\n                  target=\"_blank\"\n                >\n                  <mwc-button>Dowiedz się jak to działa</mwc-button>\n                </a>\n              </div>\n            </ha-card>\n\n            <ais-webhooks .hass=${this.hass}></ais-webhooks>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _openCloudflareFileConfig() {\n    const filePath =\n      \"/data/data/pl.sviete.dom/files/home/.cloudflared/config.yaml\";\n    const file = await this.hass.callApi<string>(\"POST\", \"ais_file/read\", {\n      filePath: filePath,\n    });\n    const fileParams: HaAisFileDialogParams = {\n      dialogTitle: \"Cloudflare config.yaml\",\n      filePath: filePath,\n      fileBody: file,\n      readonly: true,\n    };\n    showAisFileDialog(this, fileParams);\n  }\n\n  private async _restartTunnelService() {\n    this.hass.callService(\"ais_shell_command\", \"restart_pm2_service\", {\n      service: \"tunnel\",\n    });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      css`\n        .content {\n          padding-bottom: 32px;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        span.pin {\n          color: var(--primary-color);\n          font-size: 2em;\n        }\n        .border {\n          margin-bottom: 12px;\n          border-bottom: 2px solid rgba(0, 0, 0, 0.11);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        ha-card > div#ha-switch-id {\n          margin: -4px 0;\n          position: absolute;\n          right: 8px;\n          top: 32px;\n        }\n        .card-actions a {\n          text-decoration: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-ais-dom-config-remote\": HaConfigAisDomControl;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeDisplayTimer, timerTimeRemaining } from \"../../../data/timer\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig } from \"./types\";\n\n@customElement(\"hui-timer-entity-row\")\nclass HuiTimerEntityRow extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  @state() private _timeRemaining?: number;\n\n  private _interval?: number;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._clearInterval();\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this._config && this._config.entity) {\n      const stateObj = this.hass?.states[this._config!.entity];\n      if (stateObj) {\n        this._startInterval(stateObj);\n      }\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        <div class=\"text-content\">\n          ${computeDisplayTimer(this.hass, stateObj, this._timeRemaining)}\n        </div>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (changedProps.has(\"_timeRemaining\")) {\n      return true;\n    }\n\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\")) {\n      const stateObj = this.hass!.states[this._config!.entity];\n      const oldHass = changedProps.get(\"hass\") as this[\"hass\"];\n      const oldStateObj = oldHass\n        ? oldHass.states[this._config!.entity]\n        : undefined;\n\n      if (oldStateObj !== stateObj) {\n        this._startInterval(stateObj);\n      } else if (!stateObj) {\n        this._clearInterval();\n      }\n    }\n  }\n\n  private _clearInterval(): void {\n    if (this._interval) {\n      window.clearInterval(this._interval);\n      this._interval = undefined;\n    }\n  }\n\n  private _startInterval(stateObj: HassEntity): void {\n    this._clearInterval();\n    this._calculateRemaining(stateObj);\n\n    if (stateObj.state === \"active\") {\n      this._interval = window.setInterval(\n        () => this._calculateRemaining(stateObj),\n        1000\n      );\n    }\n  }\n\n  private _calculateRemaining(stateObj: HassEntity): void {\n    this._timeRemaining = timerTimeRemaining(stateObj);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-timer-entity-row\": HuiTimerEntityRow;\n  }\n}\n"],"names":[],"sourceRoot":""}