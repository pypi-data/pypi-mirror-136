{"version":3,"file":"ac6a72d0.js","mappings":";;AA4CA;;AAEA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAKA;AACA;AAGA;AACA;AACA;AAGA;AAKA;AAJA;;;;;;;;;;;;;;;AA5CA;;;;;;;;ACnBA;;;;;;;;;;;;;;;;;ACAA","sources":["webpack://home-assistant-frontend/./src/components/entity/ha-entity-toggle.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-switch.ts"],"sourcesContent":["import { mdiFlash, mdiFlashOff } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { STATES_OFF } from \"../../common/const\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { UNAVAILABLE, UNAVAILABLE_STATES } from \"../../data/entity\";\nimport { forwardHaptic } from \"../../data/haptics\";\nimport { HomeAssistant } from \"../../types\";\nimport \"../ha-formfield\";\nimport \"../ha-icon-button\";\nimport \"../ha-switch\";\n\nconst isOn = (stateObj?: HassEntity) =>\n  stateObj !== undefined &&\n  !STATES_OFF.includes(stateObj.state) &&\n  !UNAVAILABLE_STATES.includes(stateObj.state);\n\nexport class HaEntityToggle extends LitElement {\n  // hass is not a property so that we only re-render on stateObj changes\n  public hass?: HomeAssistant;\n\n  @property() public stateObj?: HassEntity;\n\n  @property() public label?: string;\n\n  @state() private _isOn = false;\n\n  protected render(): TemplateResult {\n    if (!this.stateObj) {\n      return html` <ha-switch disabled></ha-switch> `;\n    }\n\n    if (this.stateObj.attributes.assumed_state) {\n      return html`\n        <ha-icon-button\n          .label=${`Turn ${computeStateName(this.stateObj)} off`}\n          .path=${mdiFlashOff}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          @click=${this._turnOff}\n          ?state-active=${!this._isOn}\n        ></ha-icon-button>\n        <ha-icon-button\n          .label=${`Turn ${computeStateName(this.stateObj)} on`}\n          .path=${mdiFlash}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          @click=${this._turnOn}\n          ?state-active=${this._isOn}\n        ></ha-icon-button>\n      `;\n    }\n\n    const switchTemplate = html`<ha-switch\n      aria-label=${`Toggle ${computeStateName(this.stateObj)} ${\n        this._isOn ? \"off\" : \"on\"\n      }`}\n      .checked=${this._isOn}\n      .disabled=${UNAVAILABLE_STATES.includes(this.stateObj.state)}\n      @change=${this._toggleChanged}\n    ></ha-switch>`;\n\n    if (!this.label) {\n      return switchTemplate;\n    }\n\n    return html`\n      <ha-formfield .label=${this.label}>${switchTemplate}</ha-formfield>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"click\", (ev) => ev.stopPropagation());\n  }\n\n  public willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"stateObj\")) {\n      this._isOn = isOn(this.stateObj);\n    }\n  }\n\n  private _toggleChanged(ev) {\n    const newVal = ev.target.checked;\n\n    if (newVal !== this._isOn) {\n      this._callService(newVal);\n    }\n  }\n\n  private _turnOn() {\n    this._callService(true);\n  }\n\n  private _turnOff() {\n    this._callService(false);\n  }\n\n  // We will force a re-render after a successful call to re-sync the toggle\n  // with the state. It will be out of sync if our service call did not\n  // result in the entity to be turned on. Since the state is not changing,\n  // the resync is not called automatic.\n  private async _callService(turnOn): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    forwardHaptic(\"light\");\n    const stateDomain = computeStateDomain(this.stateObj);\n    let serviceDomain;\n    let service;\n\n    if (stateDomain === \"lock\") {\n      serviceDomain = \"lock\";\n      service = turnOn ? \"unlock\" : \"lock\";\n    } else if (stateDomain === \"cover\") {\n      serviceDomain = \"cover\";\n      service = turnOn ? \"open_cover\" : \"close_cover\";\n    } else if (stateDomain === \"group\") {\n      serviceDomain = \"homeassistant\";\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    } else {\n      serviceDomain = stateDomain;\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    const currentState = this.stateObj;\n\n    // Optimistic update.\n    this._isOn = turnOn;\n\n    await this.hass.callService(serviceDomain, service, {\n      entity_id: this.stateObj.entity_id,\n    });\n\n    setTimeout(async () => {\n      // If after 2 seconds we have not received a state update\n      // reset the switch to it's original state.\n      if (this.stateObj === currentState) {\n        this._isOn = isOn(this.stateObj);\n      }\n    }, 2000);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        white-space: nowrap;\n        min-width: 38px;\n      }\n      ha-icon-button {\n        color: var(--ha-icon-button-inactive-color, var(--primary-text-color));\n        transition: color 0.5s;\n      }\n      ha-icon-button[state-active] {\n        color: var(--ha-icon-button-active-color, var(--primary-color));\n      }\n      ha-switch {\n        padding: 13px 5px;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-toggle\", HaEntityToggle);\n","import { Formfield } from \"@material/mwc-formfield\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\n// @ts-expect-error\nexport class HaFormfield extends Formfield {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  protected static get styles(): CSSResultGroup {\n    return [\n      Formfield.styles,\n      css`\n        :host(:not([alignEnd])) ::slotted(ha-switch) {\n          margin-right: 10px;\n        }\n        :host([dir=\"rtl\"]:not([alignEnd])) ::slotted(ha-switch) {\n          margin-left: 10px;\n          margin-right: auto;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { Switch } from \"@material/mwc-switch/deprecated\";\nimport { css, CSSResultGroup } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\n// @ts-expect-error\nexport class HaSwitch extends Switch {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      Switch.styles,\n      css`\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n"],"names":[],"sourceRoot":""}