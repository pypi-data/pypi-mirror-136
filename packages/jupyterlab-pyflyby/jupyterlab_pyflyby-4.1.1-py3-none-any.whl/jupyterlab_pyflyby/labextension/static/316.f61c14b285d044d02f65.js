(self.webpackChunk_deshaw_jupyterlab_pyflyby=self.webpackChunk_deshaw_jupyterlab_pyflyby||[]).push([[316],{316:(t,e,s)=>{"use strict";s.r(e),s.d(e,{default:()=>A});var n=s(850),o=s(706),i=s(435),l=s(183),a=s(305),r=s(271),c=s.n(r);const d="pyflyby-cell",h="# THIS CELL WAS AUTO-GENERATED BY PYFLYBY\n",y="# END AUTO-GENERATED BLOCK\n",u="pyflyby.missing_imports",m="pyflyby.format_imports",g="pyflyby.init_comms",p=t=>"string"==typeof t?t.split("\n"):t,_=t=>!(t.startsWith("#")||t.startsWith('"""')||""===t.trim()||t.match(/^\s.*$/))||t.startsWith("%"),f=t=>""===t.trim()||!t.match(/^\s.*$/);var b=s(983),C=s(939);async function w(t="",e={}){const s=C.ServerConnection.makeSettings(),n=b.URLExt.join(s.baseUrl,"pyflyby",t);let o;try{o=await C.ServerConnection.makeRequest(n,e,s)}catch(t){throw new C.ServerConnection.NetworkError(t)}let i=await o.text();if(i.length>0)try{i=JSON.parse(i)}catch(t){console.log("Not a JSON response body.",o)}if(!o.ok)throw new C.ServerConnection.ResponseError(o,i.message||i);return i}const x=(0,a.debug)("PYFLYBY:");class k{constructor(){this.requestedLockCount=0,this.clearedLockCount=0,this._disable={},this.promise={0:Promise.resolve()}}enable(t){this.requestedLockCount++,this.promise[t]=new Promise((e=>{this._disable[t]=e,setTimeout((()=>{var e,s,n;(null===(e=this._disable)||void 0===e?void 0:e[t])&&(null===(n=(s=this._disable)[t])||void 0===n||n.call(s))}),1500*(this.requestedLockCount-this.clearedLockCount))}))}disable(){var t,e;this.clearedLockCount++,null===(e=(t=this._disable)[this.clearedLockCount])||void 0===e||e.call(t),delete this._disable[this.clearedLockCount]}}let Y=!1;class E extends o.Widget{constructor(t,e,s){super(),this._context=null,this._sessionContext=null,this._settings=null,this._comms={},this._lock=new k,s.load("@deshaw/jupyterlab-pyflyby:plugin").then((t=>{this._settings=t,(t.get("enabled").user||t.get("enabled").composite)&&(this._sessionContext.kernelChanged.connect(this._handleKernelChange,this),this._sessionContext.statusChanged.connect(this._handleKernelStatusChange,this))}),(t=>{x("PYFLYBY extension has been disabled")})),this._context=t,this._sessionContext=t.sessionContext}async _launchDialog(t){const e=new i.Dialog({title:"PYFLYBY",body:"PYFLYBY will be adding imports to the first code cell in the notebook.\n            To disable the PYFLYBY extension or to disable this notification in future, go\n            to Settings -> Advanced Settings Editor and choose PYFLYBY preferences tab",buttons:[i.Dialog.okButton()]});try{return await e.launch(),t}catch(t){console.error(t)}}_findAndSetImportCoordinates(){const{model:t}=this._context;let e=n.ArrayExt.findFirstIndex((0,n.toArray)(t.cells),((t,e)=>{const s=t.metadata.get("tags");return!(!s||-1===s.indexOf(d))}));-1===e&&(e=(t=>{const e=(0,n.toArray)(t);for(let t=0;t<e.length;t++){const s=e[t];if("code"===s.type){const e=p(s.toJSON().source);if(e.length>0&&!e[0].startsWith("%")&&!e[0].startsWith('"""'))for(let s=0;s<e.length;s++)if(_(e[s]))return t}}return-1})((0,n.toArray)(t.cells)));let s=t.cells.get(e),o=(t=>{const e=p(t.toJSON().source);for(let t=e.length-1;t>=0;t--)if(e[t]===y.substr(0,y.length-1)){let s=0;for(let n=0;n<t-1;n++)s+=e[n].length+1;return s}for(let t=e.length-1;t>=0;t--)if(s=e[t],_(s)&&(s.includes("__future__")||-1!==s.split(" ").indexOf("import")||s.includes("import_all_names"))&&(t===e.length-1||f(e[t+1]))){let s=0;for(let n=0;n<=t;n++)s+=e[n].length+1;return s}var s;return-1})(t.cells.get(e));return-1===o&&(s=this._context.model.contentFactory.createCodeCell({cell:{source:`${h}\n\n${y}`,cell_type:"code",metadata:{}}}),this._context.model.cells.insert(e,s),o=h.length+1),s.metadata.set("tags",[d]),{cellIndex:e,position:o}}_insertImport(t){let e=null;return Y||this._settings.get("disableNotification").user?e=Promise.resolve(t):(e=this._launchDialog(t),Y=!0),this._findAndSetImportCoordinates(),e}_sendFormatCodeMsg(t){const e=n.ArrayExt.findFirstIndex((0,n.toArray)(this._context.model.cells),((t,e)=>{const s=t.metadata.get("tags");return!(!s||-1===s.indexOf(d))}));if(-1!==e){const s=this._context.model.cells.get(e).toJSON().source,n=this._comms["pyflyby.format_imports"];n&&!n.isDisposed&&n.send({input_code:s,imports:t,type:m})}}_getCommMsgHandler(){return async t=>{const e=t.content.data;switch(e.type){case u:{const t=e.missing_imports;this._insertImport(t).then((async t=>{const e=this._lock.requestedLockCount;this._lock.enable(e+1),await this._lock.promise[e],this._sendFormatCodeMsg(t)}));break}case m:this._formatImports(e),this._lock.disable();break;case g:this._initializeComms().catch(console.error)}}}async _initializeComms(){if(!this._sessionContext.session)return;const{kernel:t}=this._sessionContext.session;if(!t)return;const e=t.createComm("pyflyby.missing_imports");e.onMsg=this._getCommMsgHandler();try{e.open()}catch(t){console.error(`Unable to open PYFLYBY comm - ${t}`)}const s=t.createComm(m);s.onMsg=this._getCommMsgHandler(),s.onClose=t=>{const e=t.content.comm_id;delete this._comms[e]},this._comms["pyflyby.format_imports"]=s;try{s.open()}catch(t){console.error(`Unable to open PYFLYBY comm - ${t}`)}return t.registerCommTarget(g,((t,e)=>{t.onMsg=this._getCommMsgHandler()})),Promise.resolve()}_formatImports(t){const{formatted_code:e}=t,s=n.ArrayExt.findFirstIndex((0,n.toArray)(this._context.model.cells),((t,e)=>{const s=t.metadata.get("tags");return!(!s||-1===s.indexOf(d))}));if(-1!==s){const t=this._context.model.cells.get(s);t.value.remove(0,t.value.text.length),t.value.insert(0,e)}}async _handleKernelChange(t,e){return await this._initializeComms()}_handleKernelStatusChange(t,e){return"restarting"===e?this._initializeComms():null}}class S{constructor(t){this._settingRegistry=null,this._settingRegistry=t,this._loadSettings().catch(console.error)}async _loadSettings(){try{await this._settingRegistry.load("@deshaw/jupyterlab-pyflyby:plugin"),x("Successfully loaded PYFLYBY extension settings")}catch(t){console.error("Settings could not be loaded")}}createNew(t,e){return new E(e,t,this._settingRegistry)}}async function v(){try{await w("install-pyflyby",{method:"POST"})}catch(t){const e=await t.json();console.error(e.result)}}const L=c().createElement("div",null,c().createElement("p",null,"To use @deshaw/jupyterlab-pyflyby,"," ",c().createElement("a",{href:"https://github.com/deshaw/pyflyby/blob/master/README.rst",style:{color:"#0000EE"},target:"_blank",rel:"noopener noreferrer"},"pyflyby")," ","ipython extension needs to be installed."),c().createElement("br",null),c().createElement("p",null,'Clicking on "Install" will run following command'),c().createElement("div",{style:{font:"monospace",color:"#ffffff",backgroundColor:"#000000",marginTop:"5px"}},"$ py pyflyby.install_in_ipython_config_file"),c().createElement("br",null)),A={id:"@deshaw/jupyterlab-pyflyby:plugin",autoStart:!0,requires:[l.ISettingRegistry],activate:async function(t,e){console.log("JupyterLab extension @deshaw/jupyterlab-pyflyby is activated!");const s=await e.load("@deshaw/jupyterlab-pyflyby:plugin"),n=s.get("enabled").user||s.get("enabled").composite,o=s.get("installDialogDisplayed").user;n&&"loaded"!==await async function(){return(await w("pyflyby-status")).status}()&&(o||(await(0,i.showDialog)({title:"Installation required",body:L,buttons:[i.Dialog.okButton({label:"Install"}),i.Dialog.cancelButton({label:"Cancel",displayType:"default"})],defaultButton:0})).button.accept?await v():await async function(t){try{await w("disable-pyflyby",{method:"POST",mode:"cors",cache:"no-cache",credentials:"include",headers:{"Content-type":"application/x-www-form-urlencoded"},body:new URLSearchParams("installDialogDisplayed=true")})}catch(t){const e=await t.json();console.error(e.result)}await t.reload("@deshaw/jupyterlab-pyflyby:plugin")}(e)),t.docRegistry.addWidgetExtension("Notebook",new S(e))}}}}]);