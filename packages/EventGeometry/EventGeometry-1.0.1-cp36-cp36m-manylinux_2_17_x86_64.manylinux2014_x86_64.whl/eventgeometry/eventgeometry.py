# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
# EventGeometry FastJet Contrib

"""


import numpy as np
import itertools


import pyfjcore



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _eventgeometry
else:
    import _eventgeometry

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _eventgeometry.SWIG_PyInstanceMethod_New
_swig_new_static_method = _eventgeometry.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eventgeometry.delete_SwigPyIterator
    value = _swig_new_instance_method(_eventgeometry.SwigPyIterator_value)
    incr = _swig_new_instance_method(_eventgeometry.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_eventgeometry.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_eventgeometry.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_eventgeometry.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_eventgeometry.SwigPyIterator_copy)
    next = _swig_new_instance_method(_eventgeometry.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_eventgeometry.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_eventgeometry.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_eventgeometry.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _eventgeometry:
_eventgeometry.SwigPyIterator_swigregister(SwigPyIterator)

import pyfjcore

from pyfjcore import FastJetError

class vectorDouble(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eventgeometry.vectorDouble_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eventgeometry.vectorDouble___nonzero__)
    __bool__ = _swig_new_instance_method(_eventgeometry.vectorDouble___bool__)
    __len__ = _swig_new_instance_method(_eventgeometry.vectorDouble___len__)
    __getslice__ = _swig_new_instance_method(_eventgeometry.vectorDouble___getslice__)
    __setslice__ = _swig_new_instance_method(_eventgeometry.vectorDouble___setslice__)
    __delslice__ = _swig_new_instance_method(_eventgeometry.vectorDouble___delslice__)
    __delitem__ = _swig_new_instance_method(_eventgeometry.vectorDouble___delitem__)
    __getitem__ = _swig_new_instance_method(_eventgeometry.vectorDouble___getitem__)
    __setitem__ = _swig_new_instance_method(_eventgeometry.vectorDouble___setitem__)
    pop = _swig_new_instance_method(_eventgeometry.vectorDouble_pop)
    append = _swig_new_instance_method(_eventgeometry.vectorDouble_append)
    empty = _swig_new_instance_method(_eventgeometry.vectorDouble_empty)
    size = _swig_new_instance_method(_eventgeometry.vectorDouble_size)
    swap = _swig_new_instance_method(_eventgeometry.vectorDouble_swap)
    begin = _swig_new_instance_method(_eventgeometry.vectorDouble_begin)
    end = _swig_new_instance_method(_eventgeometry.vectorDouble_end)
    rbegin = _swig_new_instance_method(_eventgeometry.vectorDouble_rbegin)
    rend = _swig_new_instance_method(_eventgeometry.vectorDouble_rend)
    clear = _swig_new_instance_method(_eventgeometry.vectorDouble_clear)
    get_allocator = _swig_new_instance_method(_eventgeometry.vectorDouble_get_allocator)
    pop_back = _swig_new_instance_method(_eventgeometry.vectorDouble_pop_back)
    erase = _swig_new_instance_method(_eventgeometry.vectorDouble_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorDouble self) -> vectorDouble
        __init__(vectorDouble self, vectorDouble other) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size) -> vectorDouble
        __init__(vectorDouble self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectorDouble
        """
        _eventgeometry.vectorDouble_swiginit(self, _eventgeometry.new_vectorDouble(*args))
    push_back = _swig_new_instance_method(_eventgeometry.vectorDouble_push_back)
    front = _swig_new_instance_method(_eventgeometry.vectorDouble_front)
    back = _swig_new_instance_method(_eventgeometry.vectorDouble_back)
    assign = _swig_new_instance_method(_eventgeometry.vectorDouble_assign)
    resize = _swig_new_instance_method(_eventgeometry.vectorDouble_resize)
    insert = _swig_new_instance_method(_eventgeometry.vectorDouble_insert)
    reserve = _swig_new_instance_method(_eventgeometry.vectorDouble_reserve)
    capacity = _swig_new_instance_method(_eventgeometry.vectorDouble_capacity)
    __swig_destroy__ = _eventgeometry.delete_vectorDouble

# Register vectorDouble in _eventgeometry:
_eventgeometry.vectorDouble_swigregister(vectorDouble)

class vectorString(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eventgeometry.vectorString_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eventgeometry.vectorString___nonzero__)
    __bool__ = _swig_new_instance_method(_eventgeometry.vectorString___bool__)
    __len__ = _swig_new_instance_method(_eventgeometry.vectorString___len__)
    __getslice__ = _swig_new_instance_method(_eventgeometry.vectorString___getslice__)
    __setslice__ = _swig_new_instance_method(_eventgeometry.vectorString___setslice__)
    __delslice__ = _swig_new_instance_method(_eventgeometry.vectorString___delslice__)
    __delitem__ = _swig_new_instance_method(_eventgeometry.vectorString___delitem__)
    __getitem__ = _swig_new_instance_method(_eventgeometry.vectorString___getitem__)
    __setitem__ = _swig_new_instance_method(_eventgeometry.vectorString___setitem__)
    pop = _swig_new_instance_method(_eventgeometry.vectorString_pop)
    append = _swig_new_instance_method(_eventgeometry.vectorString_append)
    empty = _swig_new_instance_method(_eventgeometry.vectorString_empty)
    size = _swig_new_instance_method(_eventgeometry.vectorString_size)
    swap = _swig_new_instance_method(_eventgeometry.vectorString_swap)
    begin = _swig_new_instance_method(_eventgeometry.vectorString_begin)
    end = _swig_new_instance_method(_eventgeometry.vectorString_end)
    rbegin = _swig_new_instance_method(_eventgeometry.vectorString_rbegin)
    rend = _swig_new_instance_method(_eventgeometry.vectorString_rend)
    clear = _swig_new_instance_method(_eventgeometry.vectorString_clear)
    get_allocator = _swig_new_instance_method(_eventgeometry.vectorString_get_allocator)
    pop_back = _swig_new_instance_method(_eventgeometry.vectorString_pop_back)
    erase = _swig_new_instance_method(_eventgeometry.vectorString_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorString self) -> vectorString
        __init__(vectorString self, vectorString other) -> vectorString
        __init__(vectorString self, std::vector< std::string >::size_type size) -> vectorString
        __init__(vectorString self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectorString
        """
        _eventgeometry.vectorString_swiginit(self, _eventgeometry.new_vectorString(*args))
    push_back = _swig_new_instance_method(_eventgeometry.vectorString_push_back)
    front = _swig_new_instance_method(_eventgeometry.vectorString_front)
    back = _swig_new_instance_method(_eventgeometry.vectorString_back)
    assign = _swig_new_instance_method(_eventgeometry.vectorString_assign)
    resize = _swig_new_instance_method(_eventgeometry.vectorString_resize)
    insert = _swig_new_instance_method(_eventgeometry.vectorString_insert)
    reserve = _swig_new_instance_method(_eventgeometry.vectorString_reserve)
    capacity = _swig_new_instance_method(_eventgeometry.vectorString_capacity)
    __swig_destroy__ = _eventgeometry.delete_vectorString

# Register vectorString in _eventgeometry:
_eventgeometry.vectorString_swigregister(vectorString)

class pairVectorDouble(object):
    r"""Proxy of C++ std::pair< std::vector< double >,std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pairVectorDouble self) -> pairVectorDouble
        __init__(pairVectorDouble self, vectorDouble first, vectorDouble second) -> pairVectorDouble
        __init__(pairVectorDouble self, pairVectorDouble other) -> pairVectorDouble
        """
        _eventgeometry.pairVectorDouble_swiginit(self, _eventgeometry.new_pairVectorDouble(*args))
    first = property(_eventgeometry.pairVectorDouble_first_get, _eventgeometry.pairVectorDouble_first_set, doc=r"""first : std::vector<(double,std::allocator<(double)>)>""")
    second = property(_eventgeometry.pairVectorDouble_second_get, _eventgeometry.pairVectorDouble_second_set, doc=r"""second : std::vector<(double,std::allocator<(double)>)>""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _eventgeometry.delete_pairVectorDouble

# Register pairVectorDouble in _eventgeometry:
_eventgeometry.pairVectorDouble_swigregister(pairVectorDouble)

EMDStatus_Success = _eventgeometry.EMDStatus_Success

EMDStatus_Empty = _eventgeometry.EMDStatus_Empty

EMDStatus_SupplyMismatch = _eventgeometry.EMDStatus_SupplyMismatch

EMDStatus_Unbounded = _eventgeometry.EMDStatus_Unbounded

EMDStatus_MaxIterReached = _eventgeometry.EMDStatus_MaxIterReached

EMDStatus_Infeasible = _eventgeometry.EMDStatus_Infeasible

ExtraParticle_Neither = _eventgeometry.ExtraParticle_Neither

ExtraParticle_Zero = _eventgeometry.ExtraParticle_Zero

ExtraParticle_One = _eventgeometry.ExtraParticle_One

EMDPairsStorage_Full = _eventgeometry.EMDPairsStorage_Full

EMDPairsStorage_FullSymmetric = _eventgeometry.EMDPairsStorage_FullSymmetric

EMDPairsStorage_FlattenedSymmetric = _eventgeometry.EMDPairsStorage_FlattenedSymmetric

EMDPairsStorage_External = _eventgeometry.EMDPairsStorage_External

check_emd_status = _eventgeometry.check_emd_status
class EMDBaseFloat64(object):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMDBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eventgeometry.delete_EMDBaseFloat64
    R = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_R)
    beta = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_beta)
    set_R = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_R)
    set_beta = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_beta)
    set_network_simplex_params = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_network_simplex_params)
    norm = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_norm)
    set_norm = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_norm)
    do_timing = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_do_timing)
    set_do_timing = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_do_timing)
    external_dists = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_external_dists)
    set_external_dists = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_set_external_dists)
    n0 = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_n0)
    n1 = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_n1)
    extra = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_extra)
    emd = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_emd)
    status = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_status)
    weightdiff = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_weightdiff)
    scale = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_scale)
    n_iter = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_n_iter)
    dists_vec = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_dists_vec)
    flows_vec = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_flows_vec)
    flow = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_flow)
    node_potentials = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_node_potentials)
    duration = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_duration)
    clear = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_clear)
    flows = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_flows)
    dists = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_dists)
    npy_node_potentials = _swig_new_instance_method(_eventgeometry.EMDBaseFloat64_npy_node_potentials)

# Register EMDBaseFloat64 in _eventgeometry:
_eventgeometry.EMDBaseFloat64_swigregister(EMDBaseFloat64)
cvar = _eventgeometry.cvar
PI = cvar.PI
TWOPI = cvar.TWOPI

class PairwiseEMDBaseFloat64(object):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMDBase< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDBaseFloat64
    R = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_R)
    set_R = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_R)
    beta = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_beta)
    set_beta = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_beta)
    norm = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_norm)
    set_norm = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_norm)
    set_network_simplex_params = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_network_simplex_params)

    def set_external_emd_handler(self, handler):
        if not handler.thisown:
            raise RuntimeError('ExternalEMDHandler must own itself; perhaps it is already in use elsewhere')
        handler.thisown = 0
        _eventgeometry.PairwiseEMDBaseFloat64_set_external_emd_handler(self, handler)
        self._external_emd_handler = handler


    have_external_emd_handler = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_have_external_emd_handler)
    num_threads = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_num_threads)
    set_omp_dynamic_chunksize = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_omp_dynamic_chunksize)
    omp_dynamic_chunksize = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_omp_dynamic_chunksize)
    set_request_mode = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_set_request_mode)
    request_mode = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_request_mode)
    duration = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_duration)
    nevA = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_nevA)
    nevB = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_nevB)
    num_emds = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_num_emds)
    storage = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_storage)
    errored = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_errored)
    error_messages = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_error_messages)
    emds_vec = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_emds_vec)
    emd = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_emd)


          # ensure proper destruction of objects held by this instance
    def __del__(self):
        if hasattr(self, '_external_emd_handler'):
            self._external_emd_handler.thisown = 1
            del self._external_emd_handler

    def __call__(self, eventsA, eventsB=None, gdim=None, mask=False,
                       event_weightsA=None, event_weightsB=None):

        if eventsB is None:
            self.init(len(eventsA))
            eventsB = event_weightsB = []
        else:
            self.init(len(eventsA), len(eventsB))

        if event_weightsA is None:
            event_weightsA = np.ones(len(eventsA), dtype=float)
        elif len(event_weightsA) != len(eventsA):
            raise ValueError('length of `event_weightsA` does not match length of `eventsA`')

        if event_weightsB is None:
            event_weightsB = np.ones(len(eventsB), dtype=float)
        elif len(event_weightsB) != len(eventsB):
            raise ValueError('length of `event_weightsB` does not match length of `eventsB`')

        self.event_arrs = []
        _store_events(self, itertools.chain(eventsA, eventsB),
                            itertools.chain(event_weightsA, event_weightsB),
                            gdim, mask)

        if not self.request_mode():
            self.compute()

    emds = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_emds)
    raw_emds = _swig_new_instance_method(_eventgeometry.PairwiseEMDBaseFloat64_raw_emds)

# Register PairwiseEMDBaseFloat64 in _eventgeometry:
_eventgeometry.PairwiseEMDBaseFloat64_swigregister(PairwiseEMDBaseFloat64)

class ExternalEMDHandlerFloat64(object):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::ExternalEMDHandler< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _eventgeometry.delete_ExternalEMDHandlerFloat64
    description = _swig_new_instance_method(_eventgeometry.ExternalEMDHandlerFloat64_description)
    num_calls = _swig_new_instance_method(_eventgeometry.ExternalEMDHandlerFloat64_num_calls)
    __call__ = _swig_new_instance_method(_eventgeometry.ExternalEMDHandlerFloat64___call__)
    evaluate = _swig_new_instance_method(_eventgeometry.ExternalEMDHandlerFloat64_evaluate)
    evaluate_symmetric = _swig_new_instance_method(_eventgeometry.ExternalEMDHandlerFloat64_evaluate_symmetric)

# Register ExternalEMDHandlerFloat64 in _eventgeometry:
_eventgeometry.ExternalEMDHandlerFloat64_swigregister(ExternalEMDHandlerFloat64)

class Histogram1DHandlerLogFloat64(ExternalEMDHandlerFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::Histogram1DHandler< boost::histogram::axis::transform::log,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, nbins: "unsigned int", axis_min: "double", axis_max: "double"):
        r"""__init__(Histogram1DHandlerLogFloat64 self, unsigned int nbins, double axis_min, double axis_max) -> Histogram1DHandlerLogFloat64"""
        _eventgeometry.Histogram1DHandlerLogFloat64_swiginit(self, _eventgeometry.new_Histogram1DHandlerLogFloat64(nbins, axis_min, axis_max))
    __swig_destroy__ = _eventgeometry.delete_Histogram1DHandlerLogFloat64
    nbins = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_nbins)
    axis_min = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_axis_min)
    axis_max = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_axis_max)
    description = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_description)
    hist_vals_vars_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_hist_vals_vars_vec)
    bin_centers_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_bin_edges_vec)
    __iadd__ = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64___iadd__)
    __repr__ = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64___repr__)
    bin_centers = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_bin_centers)
    bin_edges = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_bin_edges)
    hist_vals_vars = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerLogFloat64_hist_vals_vars)

    def hist_vals_errs(self, overflows=True):
        vals, vars = self.hist_vals_vars(overflows)
        return vals, np.sqrt(vars)


# Register Histogram1DHandlerLogFloat64 in _eventgeometry:
_eventgeometry.Histogram1DHandlerLogFloat64_swigregister(Histogram1DHandlerLogFloat64)

class Histogram1DHandlerFloat64(ExternalEMDHandlerFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::Histogram1DHandler< boost::histogram::axis::transform::id,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, nbins: "unsigned int", axis_min: "double", axis_max: "double"):
        r"""__init__(Histogram1DHandlerFloat64 self, unsigned int nbins, double axis_min, double axis_max) -> Histogram1DHandlerFloat64"""
        _eventgeometry.Histogram1DHandlerFloat64_swiginit(self, _eventgeometry.new_Histogram1DHandlerFloat64(nbins, axis_min, axis_max))
    __swig_destroy__ = _eventgeometry.delete_Histogram1DHandlerFloat64
    nbins = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_nbins)
    axis_min = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_axis_min)
    axis_max = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_axis_max)
    description = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_description)
    hist_vals_vars_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_hist_vals_vars_vec)
    bin_centers_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_bin_centers_vec)
    bin_edges_vec = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_bin_edges_vec)
    __iadd__ = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64___iadd__)
    __repr__ = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64___repr__)
    bin_centers = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_bin_centers)
    bin_edges = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_bin_edges)
    hist_vals_vars = _swig_new_instance_method(_eventgeometry.Histogram1DHandlerFloat64_hist_vals_vars)

    def hist_vals_errs(self, overflows=True):
        vals, vars = self.hist_vals_vars(overflows)
        return vals, np.sqrt(vars)


# Register Histogram1DHandlerFloat64 in _eventgeometry:
_eventgeometry.Histogram1DHandlerFloat64_swigregister(Histogram1DHandlerFloat64)

class CorrelationDimension(Histogram1DHandlerLogFloat64):
    r"""
    Proxy of C++ fastjet::contrib::eventgeometry::CorrelationDimension< double > class.
    Proxy of C++ fastjet::contrib::eventgeometry::CorrelationDimension< double > class.
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, nbins: "unsigned int", axis_min: "double", axis_max: "double"):
        r"""__init__(CorrelationDimension self, unsigned int nbins, double axis_min, double axis_max) -> CorrelationDimension"""
        _eventgeometry.CorrelationDimension_swiginit(self, _eventgeometry.new_CorrelationDimension(nbins, axis_min, axis_max))
    corrdims_vec = _swig_new_instance_method(_eventgeometry.CorrelationDimension_corrdims_vec)
    corrdim_bins_vec = _swig_new_instance_method(_eventgeometry.CorrelationDimension_corrdim_bins_vec)
    cumulative_vals_vars_vec = _swig_new_instance_method(_eventgeometry.CorrelationDimension_cumulative_vals_vars_vec)
    __repr__ = _swig_new_instance_method(_eventgeometry.CorrelationDimension___repr__)
    corrdim_bins = _swig_new_instance_method(_eventgeometry.CorrelationDimension_corrdim_bins)
    corrdims = _swig_new_instance_method(_eventgeometry.CorrelationDimension_corrdims)
    cumulative_vals_vars = _swig_new_instance_method(_eventgeometry.CorrelationDimension_cumulative_vals_vars)
    __swig_destroy__ = _eventgeometry.delete_CorrelationDimension

# Register CorrelationDimension in _eventgeometry:
_eventgeometry.CorrelationDimension_swigregister(CorrelationDimension)

class vectorPseudoJetContainer(object):
    r"""Proxy of C++ std::vector< fastjet::PseudoJetContainer > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___nonzero__)
    __bool__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___bool__)
    __len__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___len__)
    __getslice__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___getslice__)
    __setslice__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___setslice__)
    __delslice__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___delslice__)
    __delitem__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___delitem__)
    __getitem__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___getitem__)
    __setitem__ = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer___setitem__)
    pop = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_pop)
    append = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_append)
    empty = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_empty)
    size = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_size)
    swap = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_swap)
    begin = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_begin)
    end = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_end)
    rbegin = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_rbegin)
    rend = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_rend)
    clear = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_clear)
    get_allocator = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_get_allocator)
    pop_back = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_pop_back)
    erase = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorPseudoJetContainer self) -> vectorPseudoJetContainer
        __init__(vectorPseudoJetContainer self, vectorPseudoJetContainer other) -> vectorPseudoJetContainer
        __init__(vectorPseudoJetContainer self, std::vector< fastjet::PseudoJetContainer >::size_type size) -> vectorPseudoJetContainer
        __init__(vectorPseudoJetContainer self, std::vector< fastjet::PseudoJetContainer >::size_type size, PseudoJetContainer value) -> vectorPseudoJetContainer
        """
        _eventgeometry.vectorPseudoJetContainer_swiginit(self, _eventgeometry.new_vectorPseudoJetContainer(*args))
    push_back = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_push_back)
    front = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_front)
    back = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_back)
    assign = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_assign)
    resize = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_resize)
    insert = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_insert)
    reserve = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_reserve)
    capacity = _swig_new_instance_method(_eventgeometry.vectorPseudoJetContainer_capacity)
    __swig_destroy__ = _eventgeometry.delete_vectorPseudoJetContainer

# Register vectorPseudoJetContainer in _eventgeometry:
_eventgeometry.vectorPseudoJetContainer_swigregister(vectorPseudoJetContainer)

class vectorVectorPseudoJet(object):
    r"""Proxy of C++ std::vector< std::vector< fastjet::PseudoJet > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___nonzero__)
    __bool__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___bool__)
    __len__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___len__)
    __getslice__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___getslice__)
    __setslice__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___setslice__)
    __delslice__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___delslice__)
    __delitem__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___delitem__)
    __getitem__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___getitem__)
    __setitem__ = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet___setitem__)
    pop = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_pop)
    append = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_append)
    empty = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_empty)
    size = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_size)
    swap = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_swap)
    begin = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_begin)
    end = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_end)
    rbegin = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_rbegin)
    rend = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_rend)
    clear = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_clear)
    get_allocator = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_get_allocator)
    pop_back = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_pop_back)
    erase = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_erase)

    def __init__(self, *args):
        r"""
        __init__(vectorVectorPseudoJet self) -> vectorVectorPseudoJet
        __init__(vectorVectorPseudoJet self, vectorVectorPseudoJet other) -> vectorVectorPseudoJet
        __init__(vectorVectorPseudoJet self, std::vector< std::vector< fastjet::PseudoJet > >::size_type size) -> vectorVectorPseudoJet
        __init__(vectorVectorPseudoJet self, std::vector< std::vector< fastjet::PseudoJet > >::size_type size, vectorPseudoJet value) -> vectorVectorPseudoJet
        """
        _eventgeometry.vectorVectorPseudoJet_swiginit(self, _eventgeometry.new_vectorVectorPseudoJet(*args))
    push_back = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_push_back)
    front = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_front)
    back = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_back)
    assign = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_assign)
    resize = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_resize)
    insert = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_insert)
    reserve = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_reserve)
    capacity = _swig_new_instance_method(_eventgeometry.vectorVectorPseudoJet_capacity)
    __swig_destroy__ = _eventgeometry.delete_vectorVectorPseudoJet

# Register vectorVectorPseudoJet in _eventgeometry:
_eventgeometry.vectorVectorPseudoJet_swigregister(vectorVectorPseudoJet)

phi_fix = _eventgeometry.phi_fix
class EMDTransverseMomentumDeltaR(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::DeltaR > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseMomentumDeltaR self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseMomentumDeltaR"""
        _eventgeometry.EMDTransverseMomentumDeltaR_swiginit(self, _eventgeometry.new_EMDTransverseMomentumDeltaR(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseMomentumDeltaR
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumDeltaR___call__)

# Register EMDTransverseMomentumDeltaR in _eventgeometry:
_eventgeometry.EMDTransverseMomentumDeltaR_swigregister(EMDTransverseMomentumDeltaR)

class PairwiseEMDTransverseMomentumDeltaR(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::DeltaR >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseMomentumDeltaR self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseMomentumDeltaR"""
        _eventgeometry.PairwiseEMDTransverseMomentumDeltaR_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseMomentumDeltaR(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseMomentumDeltaR
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumDeltaR__add_event)

# Register PairwiseEMDTransverseMomentumDeltaR in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseMomentumDeltaR_swigregister(PairwiseEMDTransverseMomentumDeltaR)

class EMDTransverseMomentumHadronicDot(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::HadronicDot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseMomentumHadronicDot self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseMomentumHadronicDot"""
        _eventgeometry.EMDTransverseMomentumHadronicDot_swiginit(self, _eventgeometry.new_EMDTransverseMomentumHadronicDot(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseMomentumHadronicDot
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDot___call__)

# Register EMDTransverseMomentumHadronicDot in _eventgeometry:
_eventgeometry.EMDTransverseMomentumHadronicDot_swigregister(EMDTransverseMomentumHadronicDot)

class PairwiseEMDTransverseMomentumHadronicDot(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::HadronicDot >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseMomentumHadronicDot self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseMomentumHadronicDot"""
        _eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseMomentumHadronicDot(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseMomentumHadronicDot
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot__add_event)

# Register PairwiseEMDTransverseMomentumHadronicDot in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseMomentumHadronicDot_swigregister(PairwiseEMDTransverseMomentumHadronicDot)

class EMDTransverseMomentumHadronicDotMassive(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::HadronicDotMassive > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseMomentumHadronicDotMassive self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseMomentumHadronicDotMassive"""
        _eventgeometry.EMDTransverseMomentumHadronicDotMassive_swiginit(self, _eventgeometry.new_EMDTransverseMomentumHadronicDotMassive(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseMomentumHadronicDotMassive
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseMomentumHadronicDotMassive___call__)

# Register EMDTransverseMomentumHadronicDotMassive in _eventgeometry:
_eventgeometry.EMDTransverseMomentumHadronicDotMassive_swigregister(EMDTransverseMomentumHadronicDotMassive)

class PairwiseEMDTransverseMomentumHadronicDotMassive(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseMomentum,fastjet::contrib::eventgeometry::HadronicDotMassive >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseMomentumHadronicDotMassive self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseMomentumHadronicDotMassive"""
        _eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseMomentumHadronicDotMassive(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseMomentumHadronicDotMassive
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive__add_event)

# Register PairwiseEMDTransverseMomentumHadronicDotMassive in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseMomentumHadronicDotMassive_swigregister(PairwiseEMDTransverseMomentumHadronicDotMassive)

class EMDTransverseEnergyDeltaR(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::DeltaR > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseEnergyDeltaR self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseEnergyDeltaR"""
        _eventgeometry.EMDTransverseEnergyDeltaR_swiginit(self, _eventgeometry.new_EMDTransverseEnergyDeltaR(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseEnergyDeltaR
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyDeltaR___call__)

# Register EMDTransverseEnergyDeltaR in _eventgeometry:
_eventgeometry.EMDTransverseEnergyDeltaR_swigregister(EMDTransverseEnergyDeltaR)

class PairwiseEMDTransverseEnergyDeltaR(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::DeltaR >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseEnergyDeltaR self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseEnergyDeltaR"""
        _eventgeometry.PairwiseEMDTransverseEnergyDeltaR_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseEnergyDeltaR(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseEnergyDeltaR
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyDeltaR__add_event)

# Register PairwiseEMDTransverseEnergyDeltaR in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseEnergyDeltaR_swigregister(PairwiseEMDTransverseEnergyDeltaR)

class EMDTransverseEnergyHadronicDot(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::HadronicDot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseEnergyHadronicDot self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseEnergyHadronicDot"""
        _eventgeometry.EMDTransverseEnergyHadronicDot_swiginit(self, _eventgeometry.new_EMDTransverseEnergyHadronicDot(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseEnergyHadronicDot
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDot___call__)

# Register EMDTransverseEnergyHadronicDot in _eventgeometry:
_eventgeometry.EMDTransverseEnergyHadronicDot_swigregister(EMDTransverseEnergyHadronicDot)

class PairwiseEMDTransverseEnergyHadronicDot(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::HadronicDot >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseEnergyHadronicDot self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseEnergyHadronicDot"""
        _eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseEnergyHadronicDot(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseEnergyHadronicDot
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot__add_event)

# Register PairwiseEMDTransverseEnergyHadronicDot in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseEnergyHadronicDot_swigregister(PairwiseEMDTransverseEnergyHadronicDot)

class EMDTransverseEnergyHadronicDotMassive(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::HadronicDotMassive > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDTransverseEnergyHadronicDotMassive self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDTransverseEnergyHadronicDotMassive"""
        _eventgeometry.EMDTransverseEnergyHadronicDotMassive_swiginit(self, _eventgeometry.new_EMDTransverseEnergyHadronicDotMassive(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDTransverseEnergyHadronicDotMassive
    description = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDTransverseEnergyHadronicDotMassive___call__)

# Register EMDTransverseEnergyHadronicDotMassive in _eventgeometry:
_eventgeometry.EMDTransverseEnergyHadronicDotMassive_swigregister(EMDTransverseEnergyHadronicDotMassive)

class PairwiseEMDTransverseEnergyHadronicDotMassive(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::TransverseEnergy,fastjet::contrib::eventgeometry::HadronicDotMassive >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDTransverseEnergyHadronicDotMassive self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDTransverseEnergyHadronicDotMassive"""
        _eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_swiginit(self, _eventgeometry.new_PairwiseEMDTransverseEnergyHadronicDotMassive(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDTransverseEnergyHadronicDotMassive
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive__add_event)

# Register PairwiseEMDTransverseEnergyHadronicDotMassive in _eventgeometry:
_eventgeometry.PairwiseEMDTransverseEnergyHadronicDotMassive_swigregister(PairwiseEMDTransverseEnergyHadronicDotMassive)

class EMDMomentumEEDot(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEDot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDMomentumEEDot self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDMomentumEEDot"""
        _eventgeometry.EMDMomentumEEDot_swiginit(self, _eventgeometry.new_EMDMomentumEEDot(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDMomentumEEDot
    description = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDot___call__)

# Register EMDMomentumEEDot in _eventgeometry:
_eventgeometry.EMDMomentumEEDot_swigregister(EMDMomentumEEDot)

class PairwiseEMDMomentumEEDot(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEDot >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDMomentumEEDot self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDMomentumEEDot"""
        _eventgeometry.PairwiseEMDMomentumEEDot_swiginit(self, _eventgeometry.new_PairwiseEMDMomentumEEDot(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDMomentumEEDot
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDot__add_event)

# Register PairwiseEMDMomentumEEDot in _eventgeometry:
_eventgeometry.PairwiseEMDMomentumEEDot_swigregister(PairwiseEMDMomentumEEDot)

class EMDMomentumEEDotMassless(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEDotMassless > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDMomentumEEDotMassless self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDMomentumEEDotMassless"""
        _eventgeometry.EMDMomentumEEDotMassless_swiginit(self, _eventgeometry.new_EMDMomentumEEDotMassless(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDMomentumEEDotMassless
    description = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEDotMassless___call__)

# Register EMDMomentumEEDotMassless in _eventgeometry:
_eventgeometry.EMDMomentumEEDotMassless_swigregister(EMDMomentumEEDotMassless)

class PairwiseEMDMomentumEEDotMassless(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEDotMassless >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDMomentumEEDotMassless self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDMomentumEEDotMassless"""
        _eventgeometry.PairwiseEMDMomentumEEDotMassless_swiginit(self, _eventgeometry.new_PairwiseEMDMomentumEEDotMassless(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDMomentumEEDotMassless
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEDotMassless__add_event)

# Register PairwiseEMDMomentumEEDotMassless in _eventgeometry:
_eventgeometry.PairwiseEMDMomentumEEDotMassless_swigregister(PairwiseEMDMomentumEEDotMassless)

class EMDMomentumEEArcLength(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEArcLength > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDMomentumEEArcLength self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDMomentumEEArcLength"""
        _eventgeometry.EMDMomentumEEArcLength_swiginit(self, _eventgeometry.new_EMDMomentumEEArcLength(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDMomentumEEArcLength
    description = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLength___call__)

# Register EMDMomentumEEArcLength in _eventgeometry:
_eventgeometry.EMDMomentumEEArcLength_swigregister(EMDMomentumEEArcLength)

class PairwiseEMDMomentumEEArcLength(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEArcLength >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDMomentumEEArcLength self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDMomentumEEArcLength"""
        _eventgeometry.PairwiseEMDMomentumEEArcLength_swiginit(self, _eventgeometry.new_PairwiseEMDMomentumEEArcLength(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDMomentumEEArcLength
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLength__add_event)

# Register PairwiseEMDMomentumEEArcLength in _eventgeometry:
_eventgeometry.PairwiseEMDMomentumEEArcLength_swigregister(PairwiseEMDMomentumEEArcLength)

class EMDMomentumEEArcLengthMassive(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEArcLengthMassive > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDMomentumEEArcLengthMassive self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDMomentumEEArcLengthMassive"""
        _eventgeometry.EMDMomentumEEArcLengthMassive_swiginit(self, _eventgeometry.new_EMDMomentumEEArcLengthMassive(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDMomentumEEArcLengthMassive
    description = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDMomentumEEArcLengthMassive___call__)

# Register EMDMomentumEEArcLengthMassive in _eventgeometry:
_eventgeometry.EMDMomentumEEArcLengthMassive_swigregister(EMDMomentumEEArcLengthMassive)

class PairwiseEMDMomentumEEArcLengthMassive(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Momentum,fastjet::contrib::eventgeometry::EEArcLengthMassive >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDMomentumEEArcLengthMassive self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDMomentumEEArcLengthMassive"""
        _eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_swiginit(self, _eventgeometry.new_PairwiseEMDMomentumEEArcLengthMassive(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDMomentumEEArcLengthMassive
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive__add_event)

# Register PairwiseEMDMomentumEEArcLengthMassive in _eventgeometry:
_eventgeometry.PairwiseEMDMomentumEEArcLengthMassive_swigregister(PairwiseEMDMomentumEEArcLengthMassive)

class EMDEnergyEEDot(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEDot > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDEnergyEEDot self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDEnergyEEDot"""
        _eventgeometry.EMDEnergyEEDot_swiginit(self, _eventgeometry.new_EMDEnergyEEDot(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDEnergyEEDot
    description = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDot___call__)

# Register EMDEnergyEEDot in _eventgeometry:
_eventgeometry.EMDEnergyEEDot_swigregister(EMDEnergyEEDot)

class PairwiseEMDEnergyEEDot(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEDot >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDEnergyEEDot self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDEnergyEEDot"""
        _eventgeometry.PairwiseEMDEnergyEEDot_swiginit(self, _eventgeometry.new_PairwiseEMDEnergyEEDot(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDEnergyEEDot
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDot__add_event)

# Register PairwiseEMDEnergyEEDot in _eventgeometry:
_eventgeometry.PairwiseEMDEnergyEEDot_swigregister(PairwiseEMDEnergyEEDot)

class EMDEnergyEEDotMassless(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEDotMassless > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDEnergyEEDotMassless self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDEnergyEEDotMassless"""
        _eventgeometry.EMDEnergyEEDotMassless_swiginit(self, _eventgeometry.new_EMDEnergyEEDotMassless(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDEnergyEEDotMassless
    description = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEDotMassless___call__)

# Register EMDEnergyEEDotMassless in _eventgeometry:
_eventgeometry.EMDEnergyEEDotMassless_swigregister(EMDEnergyEEDotMassless)

class PairwiseEMDEnergyEEDotMassless(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEDotMassless >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDEnergyEEDotMassless self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDEnergyEEDotMassless"""
        _eventgeometry.PairwiseEMDEnergyEEDotMassless_swiginit(self, _eventgeometry.new_PairwiseEMDEnergyEEDotMassless(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDEnergyEEDotMassless
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEDotMassless__add_event)

# Register PairwiseEMDEnergyEEDotMassless in _eventgeometry:
_eventgeometry.PairwiseEMDEnergyEEDotMassless_swigregister(PairwiseEMDEnergyEEDotMassless)

class EMDEnergyEEArcLength(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEArcLength > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDEnergyEEArcLength self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDEnergyEEArcLength"""
        _eventgeometry.EMDEnergyEEArcLength_swiginit(self, _eventgeometry.new_EMDEnergyEEArcLength(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDEnergyEEArcLength
    description = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLength___call__)

# Register EMDEnergyEEArcLength in _eventgeometry:
_eventgeometry.EMDEnergyEEArcLength_swigregister(EMDEnergyEEArcLength)

class PairwiseEMDEnergyEEArcLength(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEArcLength >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDEnergyEEArcLength self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDEnergyEEArcLength"""
        _eventgeometry.PairwiseEMDEnergyEEArcLength_swiginit(self, _eventgeometry.new_PairwiseEMDEnergyEEArcLength(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDEnergyEEArcLength
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLength__add_event)

# Register PairwiseEMDEnergyEEArcLength in _eventgeometry:
_eventgeometry.PairwiseEMDEnergyEEArcLength_swigregister(PairwiseEMDEnergyEEArcLength)

class EMDEnergyEEArcLengthMassive(EMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEArcLengthMassive > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, R: "double"=1, beta: "double"=1, norm: "bool"=False, do_timing: "bool"=False, external_dists: "bool"=False, n_iter_max: "std::size_t"=100000, epsilon_large_factor: "double"=1000, epsilon_small_factor: "double"=1):
        r"""__init__(EMDEnergyEEArcLengthMassive self, double R=1, double beta=1, bool norm=False, bool do_timing=False, bool external_dists=False, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1) -> EMDEnergyEEArcLengthMassive"""
        _eventgeometry.EMDEnergyEEArcLengthMassive_swiginit(self, _eventgeometry.new_EMDEnergyEEArcLengthMassive(R, beta, norm, do_timing, external_dists, n_iter_max, epsilon_large_factor, epsilon_small_factor))
    __swig_destroy__ = _eventgeometry.delete_EMDEnergyEEArcLengthMassive
    description = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive_description)
    __repr__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive_preprocess_MaskCircle)
    __call__ = _swig_new_instance_method(_eventgeometry.EMDEnergyEEArcLengthMassive___call__)

# Register EMDEnergyEEArcLengthMassive in _eventgeometry:
_eventgeometry.EMDEnergyEEArcLengthMassive_swigregister(EMDEnergyEEArcLengthMassive)

class PairwiseEMDEnergyEEArcLengthMassive(PairwiseEMDBaseFloat64):
    r"""Proxy of C++ fastjet::contrib::eventgeometry::PairwiseEMD< fastjet::contrib::eventgeometry::EMD< double,fastjet::contrib::eventgeometry::Energy,fastjet::contrib::eventgeometry::EEArcLengthMassive >,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        r"""__init__(PairwiseEMDEnergyEEArcLengthMassive self, double R=1, double beta=1, bool norm=False, int num_threads=-1, fastjet::contrib::eventgeometry::index_type print_every=-10, unsigned int verbose=1, bool request_mode=False, bool store_sym_emds_raw=True, bool throw_on_error=False, unsigned int omp_dynamic_chunksize=10, std::size_t n_iter_max=100000, double epsilon_large_factor=1000, double epsilon_small_factor=1, std::ostream & os=std::cout) -> PairwiseEMDEnergyEEArcLengthMassive"""
        _eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_swiginit(self, _eventgeometry.new_PairwiseEMDEnergyEEArcLengthMassive(*args, **kwargs))
    __swig_destroy__ = _eventgeometry.delete_PairwiseEMDEnergyEEArcLengthMassive
    description = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_description)
    clear = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_clear)
    init = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_init)
    compute = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_compute)
    __repr__ = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive___repr__)
    preprocess_CenterWeightedCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_preprocess_CenterWeightedCentroid)
    preprocess_CenterEScheme = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_preprocess_CenterEScheme)
    preprocess_CenterPtCentroid = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_preprocess_CenterPtCentroid)
    preprocess_MaskCircle = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_preprocess_MaskCircle)
    _add_event = _swig_new_instance_method(_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive__add_event)

# Register PairwiseEMDEnergyEEArcLengthMassive in _eventgeometry:
_eventgeometry.PairwiseEMDEnergyEEArcLengthMassive_swigregister(PairwiseEMDEnergyEEArcLengthMassive)


def _store_events(pairwise_emd, events, event_weights, gdim, mask):

    if gdim or mask:
        raise ValueError('`gdim` and `mask` are not supported')

    for event, event_weight in zip(events, event_weights):
        pairwise_emd._add_event(event, event_weight)


def EMD(*args, particle_weight='TransverseMomentum', pairwise_distance='DeltaR', **kwargs):
    if particle_weight == 'TransverseMomentum':
        if pairwise_distance == 'DeltaR':
            return EMDTransverseMomentumDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return EMDTransverseMomentumHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return EMDTransverseMomentumHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `TransverseMomentum`'.format(pairwise_distance))

    elif particle_weight == 'TransverseEnergy':
        if pairwise_distance == 'DeltaR':
            return EMDTransverseEnergyDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return EMDTransverseEnergyHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return EMDTransverseEnergyHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `TransverseEnergy`'.format(pairwise_distance))

    elif particle_weight == 'Energy':
        if pairwise_distance == 'EEDot':
            return EMDEnergyEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassless':
            return EMDEnergyEEDotMassless(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return EMDEnergyEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return EMDEnergyEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `Energy`'.format(pairwise_distance))

    elif particle_weight == 'Momentum':
        if pairwise_distance == 'EEDot':
            return EMDMomentumEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassless':
            return EMDMomentumEEDotMassless(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return EMDMomentumEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return EMDMomentumEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with weight `Momentum`'.format(pairwise_distance))

    else:
        raise TypeError('particle weight `{}` not allowed'.format(particle_weight))


def PairwiseEMD(*args, particle_weight='TransverseMomentum', pairwise_distance='DeltaR', **kwargs):
    if particle_weight == 'TransverseMomentum':
        if pairwise_distance == 'DeltaR':
            return PairwiseEMDTransverseMomentumDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return PairwiseEMDTransverseMomentumHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return PairwiseEMDTransverseMomentumHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `TransverseMomentum`'.format(pairwise_distance))

    elif particle_weight == 'TransverseEnergy':
        if pairwise_distance == 'DeltaR':
            return PairwiseEMDTransverseEnergyDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return PairwiseEMDTransverseEnergyHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return PairwiseEMDTransverseEnergyHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `TransverseEnergy`'.format(pairwise_distance))

    elif particle_weight == 'Energy':
        if pairwise_distance == 'EEDot':
            return PairwiseEMDEnergyEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassless':
            return PairwiseEMDEnergyEEDotMassless(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return PairwiseEMDEnergyEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return PairwiseEMDEnergyEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with particle weight `Energy`'.format(pairwise_distance))

    elif particle_weight == 'Momentum':
        if pairwise_distance == 'EEDot':
            return PairwiseEMDMomentumEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassless':
            return PairwiseEMDMomentumEEDotMassless(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return PairwiseEMDMomentumEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return PairwiseEMDMomentumEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not allowed with weight `Momentum`'.format(pairwise_distance))

    else:
        raise TypeError('particle weight `{}` not allowed'.format(particle_weight))



