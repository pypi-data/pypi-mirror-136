import enum
import functools
import logging
from typing import Union, Tuple

import stringcase
from django.apps import apps
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType
from graphql_jwt import decorators
from graphql_jwt.exceptions import PermissionDenied

from django_koldar_utils.django_toolbox import django_helpers


LOG = logging.getLogger(__name__)


class PermissionClass(enum.Enum):
    """
    An enumeration that list all the possible actions a permission can use
    """
    CREATE = "add"
    READ = "view"
    UPDATE = "change"
    DELETE = "delete"


def get_permission_codename(action: PermissionClass, model: type) -> str:
    """
    Fetch the code name of a permission

    :param action: the action a standard permission should allow
    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return f"{action.value}_{stringcase.lowercase(model.__name__)}"


def get_permission_create_name(model: type) -> str:
    """
    Fetch the code name of a create permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.CREATE, model)


def get_permission_read_name(model: type) -> str:
    """
    Fetch the code name of a read permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.READ, model)


def get_permission_update_name(model: type) -> str:
    """
    Fetch the code name of an update permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.UPDATE, model)


def get_permission_delete_name(model: type) -> str:
    """
    Fetch the code name of a delete permission

    :param model: model involved
    :return: permission code name that can be used in permission_required
    """
    return get_permission_codename(PermissionClass.DELETE, model)


def create_permission_to_save(codename: str, model: type, name: str = None) -> Permission:
    """
    Generate  anew instance of Permission. This is very handy if you wnat to programmatically create permissions.
    Just save the instance generated by this method.

    :param name: name of hte permission. If left unspecifid, it is derived from codename
    :param codename: codename of the permission
    :param in_migration: true if we are runnign this code in a migration. false otherwise
    :param model: model that owns the permission
    :return: a new instance of permission
    """

    content_type = ContentType.objects.get_for_model(model)
    if django_helpers.are_we_in_migration():
        permissions_class = apps.get_model('auth', 'Permission')
    else:
        permissions_class = Permission
    if name is None:
        name = stringcase.sentencecase(codename)
    permission = permissions_class(
        codename=codename,
        name=name,
        content_type=content_type,
    )
    return permission


def create_saved_crud_permissions(model: type, concept: str = None, generate_create: bool = True, generate_view: bool = True, generate_update: bool = True, generate_delete: bool = True) -> Tuple[Permission, Permission, Permission, Permission]:
    """
    Create the basic 4 crud permission given a a string.
    We will store such 4 permissions inside the databae immediately, so you don't need to asve them.

    The permissions will be saved as "can_create_x", "can_view_x", "can_update_x", "can_delete_x" where
    x is a representation of "model"

    :param model: a django_toolbox model type models.Model
    :param concept: name fo the permission concept. If left missing, it is model
    :param generate_create: if True, we will generate the create permission
    :param generate_view: if True, we will generate the view permission
    :param generate_update: if True, we will generate the update permission
    :param generate_delete: if True, we will generate the delete permission
    :return: 4 permissions CRUD
    """

    if concept is None:
        concept = model.__name__

    generated = []

    if generate_create:
        create = create_permission_to_save(
            codename=f"can_create_{stringcase.snakecase(concept)}",
            name=f"Can create {stringcase.sentencecase(concept)}",
            model=model
        )
        create.save()
        generated.append(create)
    else:
        create = None

    if generate_view:
        read = create_permission_to_save(
            codename=f"can_view_{stringcase.snakecase(concept)}",
            name=f"Can view {stringcase.sentencecase(concept)}",
            model=model
        )
        read.save()
        generated.append(read)
    else:
        read = None

    if generate_update:
        update = create_permission_to_save(
            codename=f"can_update_{stringcase.snakecase(concept)}",
            name=f"Can update {stringcase.sentencecase(concept)}",
            model=model
        )
        update.save()
        generated.append(update)
    else:
         update = None

    if generate_delete:
        delete = create_permission_to_save(
            codename=f"can_delete_{stringcase.snakecase(concept)}",
            name=f"Can delete {stringcase.sentencecase(concept)}",
            model=model
        )
        delete.save()
        generated.append(delete)
    else:
        delete = None
    LOG.info(f"""created the following permissions: {', '.join(map(lambda x: f"{x.codename} (id={x.id})", generated))}""")
    return create, read, update, delete



