"use strict";(self.webpackChunkopensarlab_notifications=self.webpackChunkopensarlab_notifications||[]).push([[763],{763:(t,n,e)=>{e.r(n),e.d(n,{default:()=>l});var o=e(646),a=e.n(o),s=e(51),i=e.n(s),r=e(249),c=e(890);const l={id:"jupyterlab-topbar-opensarlab-notifications",autoStart:!0,activate:async t=>{try{let t=document.createElement("link");t.href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css",t.rel="stylesheet",document.head.appendChild(t),a()((async()=>{i().options={closeButton:!0,newestOnTop:!0,progressBar:!0,positionClass:"toast-bottom-right",preventDuplicates:!1,onclick:null,showDuration:30,hideDuration:1,timeOut:0,extendedTimeOut:0,showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"};let t=null;try{t=await async function(t="",n={}){const e=c.ServerConnection.makeSettings(),o=r.URLExt.join(e.baseUrl,"opensarlab-notifications",t);let a;try{a=await c.ServerConnection.makeRequest(o,n,e)}catch(t){throw new c.ServerConnection.NetworkError(t)}const s=await a.json();if(!a.ok)throw new c.ServerConnection.ResponseError(a,s.message);return s}("notifications"),console.log(t),t.data.forEach((function(t){i()[t.type](t.message,t.title)}))}catch(t){console.error(`Error on GET /opensarlab-notifications/notifications.\n${t}`)}}))}catch(t){console.error(`Error on GET opensarlab-notifications/notifications.\n${t}`)}}}}}]);