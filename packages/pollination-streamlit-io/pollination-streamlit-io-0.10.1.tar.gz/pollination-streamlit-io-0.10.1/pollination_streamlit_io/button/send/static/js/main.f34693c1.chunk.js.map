{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","state","action","data","uniqueId","options","layer","units","isFocused","render","labels","props","args","className","styles","poButton","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","window","parent","chrome","webview","console","log","msgObject","json","JSON","stringify","postMessage","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,0B,4KC6BvBC,E,4MACGC,MAAQ,CACXC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,QAAS,CACPC,MAAO,GACPC,MAAO,IAETC,WAAW,G,EAGRC,OAAS,WACd,IAAIC,EAAiB,CACnB,aAAgB,gBAChB,cAAiB,iBACjB,aAAgB,gBAChB,YAAe,eACf,qBAAwB,0BAO1B,OACE,8BACI,EAAKC,MAAMC,KAAX,UAA6BF,GAC/B,4BACEG,UAAWC,IAAOC,SAClBC,QAAS,EAAKC,UACdC,SAAU,EAAKP,MAAMO,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SAEb,8BACE,yBAAKC,MAfI,CACfC,OAAQ,mBAcoBC,IAAKC,wBAAiDC,IAAI,UAEhFjB,EAAO,EAAKC,MAAMC,KAAX,W,EAOTK,UAAY,WAClB,GAAmC,oBAAxBW,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,YADAC,QAAQC,IAAI,2CAId,IAAIC,EAAY,CACdhC,OAAQ,EAAKS,MAAMC,KAAX,OACRT,KAAM,EAAKQ,MAAMC,KAAX,KACNR,SAAU,EAAKO,MAAMC,KAAX,SACVP,QAAS,EAAKM,MAAMC,KAAX,SAEPuB,EAAOC,KAAKC,UAAUH,GAC1BN,OAAOC,OAAOC,OAAOC,QAAQO,YAAYH,GAEzC,EAAKI,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEEtC,OAAQgC,EAAUhC,OAClBC,KAAM+B,EAAU/B,KAChBC,SAAU8B,EAAU9B,SACpBC,QAAS6B,EAAU7B,aAErB,kBAAMoC,IAAUC,kBAAkB,EAAKzC,MAAMC,WAE/C8B,QAAQC,IAAI,+CAIZD,QAAQC,IAAI,2C,EAIRb,SAAW,WACjB,EAAKmB,SAAS,CAAE/B,WAAW,K,EAGrBc,QAAU,WAChB,EAAKiB,SAAS,CAAE/B,WAAW,K,yBArFJmC,KAyFZC,cAAwB5C,GCnHvC6C,IAASpC,OACP,kBAAC,IAAMqC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f34693c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport styles from './style.module.scss';\n\ninterface State {\n  action: string\n  data: string\n  uniqueId: string\n  options: {\n    layer: string,\n    units: string\n  }\n  isFocused: boolean\n}\n\ninterface Labels {\n  [key: string]: string;\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n  public state = {\n      action: '',\n      data: '',\n      uniqueId: '',\n      options: {\n        layer: '',\n        units: ''\n      },\n      isFocused: false \n    }\n\n  public render = (): ReactNode => {\n    let labels: Labels = {\n      \"BakeGeometry\": \"Bake Geometry\",\n      \"ClearGeometry\": \"Clear Geometry\",\n      \"DrawGeometry\": \"Draw Geometry\",\n      \"DisableDraw\": \"Disable Draw\",\n      \"BakePollinationModel\": \"Bake Pollination Model\"\n    }\n\n    const imgStyle = {\n      margin: \"0px 3px 2px 0px\"\n    }\n\n    return (\n      <span>\n        { this.props.args[\"action\"] in labels && (\n        <button\n          className={styles.poButton}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt=\"logo\" />\n          </span>\n          { labels[this.props.args[\"action\"]] }\n        </button>\n        )}\n      </span>\n    )\n  }\n\n  private onClicked = (): void => {\n    if (typeof window.parent.chrome != \"undefined\") {\n      if (typeof window.parent.chrome.webview == \"undefined\")\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return;\n      }\n      \n      var msgObject = {\n        action: this.props.args[\"action\"],\n        data: this.props.args[\"data\"],\n        uniqueId: this.props.args[\"uniqueId\"],\n        options: this.props.args[\"options\"]\n      };\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n\n      this.setState(\n        (prevState) => ({ \n          ...prevState, \n          action: msgObject.action,\n          data: msgObject.data,\n          uniqueId: msgObject.uniqueId,\n          options: msgObject.options\n        }),\n        () => Streamlit.setComponentValue(this.state.action)\n      );\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n    }\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}