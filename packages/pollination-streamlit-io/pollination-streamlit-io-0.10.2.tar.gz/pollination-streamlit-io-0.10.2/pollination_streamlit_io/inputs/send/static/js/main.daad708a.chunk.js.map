{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","state","action","data","uniqueId","options","layer","units","isFocused","isChecked","render","className","styles","poCheckboxLabel","poCheckbox","type","defaultChecked","props","args","onChange","disabled","onFocus","_onFocus","onBlur","_onBlur","poCheckboxSpan","setStateNow","msgObject","status","setState","prevState","console","log","sendMessageTo","command","window","parent","chrome","webview","json","JSON","stringify","postMessage","event","check","target","checked","dotNetAction","msg","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,gBAAkB,+BAA+B,eAAiB,8BAA8B,WAAa,4B,4KC0BzHC,E,4MACGC,MAAQ,CACbC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,QAAS,CACPC,MAAO,GACPC,MAAO,IAETC,WAAW,EACXC,WAAW,G,EAuBNC,OAAS,WACd,OACE,2BAAOC,UAAWC,IAAOC,iBACvB,2BACEF,UAAWC,IAAOE,WAClBC,KAAK,WACLC,eAAgB,EAAKC,MAAMC,KAAX,UAChBC,SAAU,EAAKA,SACfC,SAAU,EAAKH,MAAMG,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,UACf,0BAAMb,UAAWC,IAAOa,gBAAxB,mB,EAOEC,YAAc,SAACC,EACrBC,GACA,EAAKC,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEE5B,OAAQyB,EAAUzB,OAClBC,KAAMwB,EAAUxB,KAChBC,SAAUuB,EAAUvB,SACpBC,QAASsB,EAAUtB,QACnBI,UAAWmB,OAGfG,QAAQC,IAAI,2C,EAGNC,cAAgB,SAACC,GACvB,GAAmC,oBAAxBC,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,OADAP,QAAQC,IAAI,2CACL,EAAK/B,MAGd,IAAI0B,EAAY,CACdzB,OAAQgC,EACR/B,KAAM,EAAKc,MAAMC,KAAX,KACNd,SAAU,EAAKa,MAAMC,KAAX,SACVb,QAAS,EAAKY,MAAMC,KAAX,SAGPqB,EAAOC,KAAKC,UAAUd,GAE1B,OADAQ,OAAOC,OAAOC,OAAOC,QAAQI,YAAYH,GAClCZ,EAKP,OADAI,QAAQC,IAAI,0CACL,EAAK/B,O,EAIRkB,SAAW,SAACwB,GAClB,IAAIC,EAAQD,EAAME,OAAOC,QACrBC,EAAgBH,EAAS,eAAiB,cAC1CI,EAAM,EAAKf,cAAcc,GAC7B,EAAKrB,YAAYsB,EAAKJ,I,EAGhBtB,SAAW,WACjB,EAAKO,SAAS,CAAErB,WAAW,K,EAGrBgB,QAAU,WAChB,EAAKK,SAAS,CAAErB,WAAW,K,wDArF7B,WACE,GAAIyC,KAAKhD,MAAMQ,WACbwC,KAAKhD,MAAME,MAAQ8C,KAAKhC,MAAMC,KAAX,KACrB,CAEE,IAAI8B,EAAMC,KAAKhB,cAAc,eAE7Be,EAAMC,KAAKhB,cAAc,gBAEzBgB,KAAKvB,YAAYsB,GAAK,GAExBjB,QAAQC,IAAI,yC,GA9BWkB,KA4GZC,cAAwBnD,GCnIvCoD,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.daad708a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poCheckboxLabel\":\"style_poCheckboxLabel__2IHB4\",\"poCheckboxSpan\":\"style_poCheckboxSpan__ltXcy\",\"poCheckbox\":\"style_poCheckbox__3Q56z\"};","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode, useEffect } from \"react\"\n\nimport styles from './style.module.scss';\n\ninterface State {\n  action: string\n  data: string\n  uniqueId: string\n  options: {\n    layer: string,\n    units: string\n  }\n  isFocused: boolean\n  isChecked: boolean\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n  public state = {\n    action: '',\n    data: '',\n    uniqueId: '',\n    options: {\n      layer: '',\n      units: ''\n    },\n    isFocused: false, \n    isChecked: false\n  }\n\n  // // Live refresh\n  // componentDidMount() {\n  //   console.log('[POLLINATION-DEBUG]: checkbox did mount.');\n  //   Streamlit.setFrameHeight();\n  // }\n\n  componentDidUpdate() {\n    if (this.state.isChecked && \n      this.state.data != this.props.args[\"data\"])\n    {\n      // Disable draw firstly\n      let msg = this.sendMessageTo(\"DisableDraw\");\n      // Enable draw with new data\n      msg = this.sendMessageTo(\"DrawGeometry\");\n      // Save data inside the state\n      this.setStateNow(msg, true);\n    }\n    console.log('[POLLINATION-DEBUG]: auto-update.');\n  }\n\n  public render = (): ReactNode => {\n    return (\n      <label className={styles.poCheckboxLabel}>\n        <input \n          className={styles.poCheckbox}\n          type=\"checkbox\" \n          defaultChecked={this.props.args[\"isChecked\"]} \n          onChange={this.onChange} \n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}/>\n        <span className={styles.poCheckboxSpan}>\n          Draw Geometry\n        </span>\n      </label>\n    )\n  }\n\n  private setStateNow = (msgObject: State, \n    status: boolean): void =>{\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        action: msgObject.action,\n        data: msgObject.data,\n        uniqueId: msgObject.uniqueId,\n        options: msgObject.options,\n        isChecked: status\n      })\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private sendMessageTo = (command: string): State => {\n    if (typeof window.parent.chrome != \"undefined\") {\n      if (typeof window.parent.chrome.webview == \"undefined\")\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n      \n      var msgObject = {\n        action: command,\n        data: this.props.args[\"data\"],\n        uniqueId: this.props.args[\"uniqueId\"],\n        options: this.props.args[\"options\"]\n      } as State;\n\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n      return msgObject;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private onChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    let check = event.target.checked;\n    let dotNetAction = (check) ? \"DrawGeometry\" : \"DisableDraw\";\n    let msg = this.sendMessageTo(dotNetAction);\n    this.setStateNow(msg, check);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}