[
  {
    "Variable": "project",
    "Category": "Project information",
    "Description": "The documented projectâ€™s name."
  },
  {
    "Variable": "author",
    "Category": "Project information",
    "Description": "The author name(s) of the document.  The default value is ``'unknown'``."
  },
  {
    "Variable": "copyright",
    "Category": "Project information",
    "Description": "A copyright statement in the style ``'2008, Author Name'``."
  },
  {
    "Variable": "project_copyright",
    "Category": "Project information",
    "Description": "An alias of ``copyright``.\n\n.. versionadded:: 3.5"
  },
  {
    "Variable": "version",
    "Category": "Project information",
    "Description": "The major project version, used as the replacement for ``|version|``.  For\nexample, for the Python documentation, this may be something like ``2.6``."
  },
  {
    "Variable": "release",
    "Category": "Project information",
    "Description": "The full project version, used as the replacement for ``|release|`` and\ne.g. in the HTML templates.  For example, for the Python documentation, this\nmay be something like ``2.6.0rc1``.\n\nIf you don't need the separation provided between ``version`` and\n``release``, just set them both to the same value."
  },
  {
    "Variable": "extensions",
    "Category": "General configuration",
    "Description": "A list of strings that are module names of :doc:`extensions\n<extensions/index>`. These can be extensions coming with Sphinx (named\n``sphinx.ext.*``) or custom ones.\n\nNote that you can extend :data:`sys.path` within the conf file if your\nextensions live in another directory -- but make sure you use absolute paths.\nIf your extension path is relative to the :term:`configuration directory`,\nuse :func:`os.path.abspath` like so::\n\n    import sys, os\n\n    sys.path.append(os.path.abspath('sphinxext'))\n\n    extensions = ['extname']\n\nThat way, you can load an extension called ``extname`` from the subdirectory\n``sphinxext``.\n\nThe configuration file itself can be an extension; for that, you only need\nto provide a :func:`setup` function in it."
  }
]