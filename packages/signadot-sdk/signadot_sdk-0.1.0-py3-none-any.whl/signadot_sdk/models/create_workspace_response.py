# coding: utf-8

"""
    Signadot API

    API for Signadot Workspaces  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from signadot_sdk.configuration import Configuration


class CreateWorkspaceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preview_endpoints': 'list[PreviewEndpoint]',
        'warnings': 'list[str]',
        'workspace_id': 'str'
    }

    attribute_map = {
        'preview_endpoints': 'previewEndpoints',
        'warnings': 'warnings',
        'workspace_id': 'workspaceID'
    }

    def __init__(self, preview_endpoints=None, warnings=None, workspace_id=None, _configuration=None):  # noqa: E501
        """CreateWorkspaceResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._preview_endpoints = None
        self._warnings = None
        self._workspace_id = None
        self.discriminator = None

        if preview_endpoints is not None:
            self.preview_endpoints = preview_endpoints
        if warnings is not None:
            self.warnings = warnings
        if workspace_id is not None:
            self.workspace_id = workspace_id

    @property
    def preview_endpoints(self):
        """Gets the preview_endpoints of this CreateWorkspaceResponse.  # noqa: E501


        :return: The preview_endpoints of this CreateWorkspaceResponse.  # noqa: E501
        :rtype: list[PreviewEndpoint]
        """
        return self._preview_endpoints

    @preview_endpoints.setter
    def preview_endpoints(self, preview_endpoints):
        """Sets the preview_endpoints of this CreateWorkspaceResponse.


        :param preview_endpoints: The preview_endpoints of this CreateWorkspaceResponse.  # noqa: E501
        :type: list[PreviewEndpoint]
        """

        self._preview_endpoints = preview_endpoints

    @property
    def warnings(self):
        """Gets the warnings of this CreateWorkspaceResponse.  # noqa: E501


        :return: The warnings of this CreateWorkspaceResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this CreateWorkspaceResponse.


        :param warnings: The warnings of this CreateWorkspaceResponse.  # noqa: E501
        :type: list[str]
        """

        self._warnings = warnings

    @property
    def workspace_id(self):
        """Gets the workspace_id of this CreateWorkspaceResponse.  # noqa: E501


        :return: The workspace_id of this CreateWorkspaceResponse.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this CreateWorkspaceResponse.


        :param workspace_id: The workspace_id of this CreateWorkspaceResponse.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateWorkspaceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWorkspaceResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateWorkspaceResponse):
            return True

        return self.to_dict() != other.to_dict()
