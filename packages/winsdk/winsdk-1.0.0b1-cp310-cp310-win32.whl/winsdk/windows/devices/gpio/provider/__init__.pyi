# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class ProviderGpioPinDriveMode(enum.IntEnum):
    INPUT = 0
    OUTPUT = 1
    INPUT_PULL_UP = 2
    INPUT_PULL_DOWN = 3
    OUTPUT_OPEN_DRAIN = 4
    OUTPUT_OPEN_DRAIN_PULL_UP = 5
    OUTPUT_OPEN_SOURCE = 6
    OUTPUT_OPEN_SOURCE_PULL_DOWN = 7

class ProviderGpioPinEdge(enum.IntEnum):
    FALLING_EDGE = 0
    RISING_EDGE = 1

class ProviderGpioPinValue(enum.IntEnum):
    LOW = 0
    HIGH = 1

class ProviderGpioSharingMode(enum.IntEnum):
    EXCLUSIVE = 0
    SHARED_READ_ONLY = 1

class GpioPinProviderValueChangedEventArgs(_winrt.Object):
    ...
    edge: ProviderGpioPinEdge
    def __init__(self, edge: ProviderGpioPinEdge) -> None:
        ...

class IGpioControllerProvider(_winrt.Object):
    ...
    pin_count: _winrt.Int32
    def open_pin_provider(pin: _winrt.Int32, sharing_mode: ProviderGpioSharingMode) -> IGpioPinProvider:
        ...

class IGpioPinProvider(_winrt.Object):
    ...
    debounce_timeout: winsdk.windows.foundation.TimeSpan
    pin_number: _winrt.Int32
    sharing_mode: ProviderGpioSharingMode
    def get_drive_mode() -> ProviderGpioPinDriveMode:
        ...
    def is_drive_mode_supported(drive_mode: ProviderGpioPinDriveMode) -> _winrt.Boolean:
        ...
    def read() -> ProviderGpioPinValue:
        ...
    def set_drive_mode(value: ProviderGpioPinDriveMode) -> None:
        ...
    def write(value: ProviderGpioPinValue) -> None:
        ...
    def add_value_changed(handler: winsdk.windows.foundation.TypedEventHandler[IGpioPinProvider, GpioPinProviderValueChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_value_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class IGpioProvider(_winrt.Object):
    ...
    def get_controllers() -> winsdk.windows.foundation.collections.IVectorView[IGpioControllerProvider]:
        ...

