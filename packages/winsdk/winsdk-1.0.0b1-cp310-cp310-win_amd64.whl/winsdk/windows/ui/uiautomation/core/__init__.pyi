# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.ui.uiautomation
except Exception:
    pass

class AutomationRemoteOperationStatus(enum.IntEnum):
    SUCCESS = 0
    MALFORMED_BYTECODE = 1
    INSTRUCTION_LIMIT_EXCEEDED = 2
    UNHANDLED_EXCEPTION = 3
    EXECUTION_FAILURE = 4

class AutomationAnnotationTypeRegistration:
    local_id: _winrt.Int32
    def __init__(self, local_id: _winrt.Int32) -> None: ...

class AutomationRemoteOperationOperandId:
    value: _winrt.Int32
    def __init__(self, value: _winrt.Int32) -> None: ...

class AutomationRemoteOperationResult(_winrt.Object):
    ...
    error_location: _winrt.Int32
    extended_error: winsdk.windows.foundation.HResult
    status: AutomationRemoteOperationStatus
    def get_operand(operand_id: AutomationRemoteOperationOperandId) -> _winrt.Object:
        ...
    def has_operand(operand_id: AutomationRemoteOperationOperandId) -> _winrt.Boolean:
        ...

class CoreAutomationRegistrar(_winrt.Object):
    ...
    def register_annotation_type(guid: uuid.UUID) -> AutomationAnnotationTypeRegistration:
        ...
    def unregister_annotation_type(registration: AutomationAnnotationTypeRegistration) -> None:
        ...

class CoreAutomationRemoteOperation(_winrt.Object):
    ...
    def __init__(self, ) -> None:
        ...
    def add_to_results(operand_id: AutomationRemoteOperationOperandId) -> None:
        ...
    def execute(bytecode_buffer: typing.Sequence[_winrt.UInt8]) -> AutomationRemoteOperationResult:
        ...
    def import_connection_bound_object(operand_id: AutomationRemoteOperationOperandId, connection_bound_object: winsdk.windows.ui.uiautomation.AutomationConnectionBoundObject) -> None:
        ...
    def import_element(operand_id: AutomationRemoteOperationOperandId, element: winsdk.windows.ui.uiautomation.AutomationElement) -> None:
        ...
    def import_text_range(operand_id: AutomationRemoteOperationOperandId, text_range: winsdk.windows.ui.uiautomation.AutomationTextRange) -> None:
        ...
    def is_opcode_supported(opcode: _winrt.UInt32) -> _winrt.Boolean:
        ...

class CoreAutomationRemoteOperationContext(_winrt.Object):
    ...
    def get_operand(id: AutomationRemoteOperationOperandId) -> _winrt.Object:
        ...
    def set_operand(id: AutomationRemoteOperationOperandId, operand: _winrt.Object) -> None:
        ...
    def set_operand(id: AutomationRemoteOperationOperandId, operand: _winrt.Object, operand_interface_id: uuid.UUID) -> None:
        ...

class RemoteAutomationClientSession(_winrt.Object):
    ...
    session_id: uuid.UUID
    def __init__(self, name: str) -> None:
        ...
    def __init__(self, name: str, session_id: uuid.UUID) -> None:
        ...
    def create_window_async(remote_window_id: _winrt.UInt64, remote_process_id: _winrt.UInt32, parent_automation_element: _winrt.Object) -> winsdk.windows.foundation.IAsyncOperation[RemoteAutomationWindow]:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_connection_requested(handler: winsdk.windows.foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationConnectionRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_connection_requested(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_disconnected(handler: winsdk.windows.foundation.TypedEventHandler[RemoteAutomationClientSession, RemoteAutomationDisconnectedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_disconnected(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class RemoteAutomationConnectionRequestedEventArgs(_winrt.Object):
    ...
    local_pipe_name: str
    remote_process_id: _winrt.UInt32

class RemoteAutomationDisconnectedEventArgs(_winrt.Object):
    ...
    local_pipe_name: str

class RemoteAutomationServer(_winrt.Object):
    ...
    def report_session(session_id: uuid.UUID) -> None:
        ...

class RemoteAutomationWindow(_winrt.Object):
    ...
    automation_provider: _winrt.Object
    def unregister_async() -> winsdk.windows.foundation.IAsyncAction:
        ...

class ICoreAutomationConnectionBoundObjectProvider(_winrt.Object):
    ...
    is_com_threading_required: _winrt.Boolean

class ICoreAutomationRemoteOperationExtensionProvider(_winrt.Object):
    ...
    def call_extension(extension_id: uuid.UUID, context: CoreAutomationRemoteOperationContext, operand_ids: typing.Sequence[AutomationRemoteOperationOperandId]) -> None:
        ...
    def is_extension_supported(extension_id: uuid.UUID) -> _winrt.Boolean:
        ...

