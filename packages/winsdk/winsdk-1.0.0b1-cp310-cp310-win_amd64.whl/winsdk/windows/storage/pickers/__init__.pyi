# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

class PickerLocationId(enum.IntEnum):
    DOCUMENTS_LIBRARY = 0
    COMPUTER_FOLDER = 1
    DESKTOP = 2
    DOWNLOADS = 3
    HOME_GROUP = 4
    MUSIC_LIBRARY = 5
    PICTURES_LIBRARY = 6
    VIDEOS_LIBRARY = 7
    OBJECTS3_D = 8
    UNSPECIFIED = 9

class PickerViewMode(enum.IntEnum):
    LIST = 0
    THUMBNAIL = 1

class FileExtensionVector(winsdk.windows.foundation.collections.IVector[str], winsdk.windows.foundation.collections.IIterable[str], _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: str) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[str]:
        ...
    def get_at(index: _winrt.UInt32) -> str:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[str]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[str]:
        ...
    def index_of(value: str) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[str]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: str) -> None:
        ...

class FileOpenPicker(_winrt.Object):
    ...
    view_mode: PickerViewMode
    suggested_start_location: PickerLocationId
    settings_identifier: str
    commit_button_text: str
    file_type_filter: winsdk.windows.foundation.collections.IVector[str]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    user: winsdk.windows.system.User
    def __init__(self, ) -> None:
        ...
    def create_for_user(user: winsdk.windows.system.User) -> FileOpenPicker:
        ...
    def pick_multiple_files_and_continue() -> None:
        ...
    def pick_multiple_files_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]:
        ...
    def pick_single_file_and_continue() -> None:
        ...
    def pick_single_file_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...
    def pick_single_file_async(picker_operation_id: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...
    def resume_pick_single_file_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...

class FilePickerFileTypesOrderedMap(winsdk.windows.foundation.collections.IMap[str, winsdk.windows.foundation.collections.IVector[str]], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, winsdk.windows.foundation.collections.IVector[str]]], _winrt.Object):
    ...
    size: _winrt.UInt32
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, winsdk.windows.foundation.collections.IVector[str]]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, winsdk.windows.foundation.collections.IVector[str]]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: winsdk.windows.foundation.collections.IVector[str]) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> winsdk.windows.foundation.collections.IVector[str]:
        ...
    def remove(key: str) -> None:
        ...

class FilePickerSelectedFilesArray(winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile], winsdk.windows.foundation.collections.IIterable[winsdk.windows.storage.StorageFile], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.storage.StorageFile]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.storage.StorageFile:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.storage.StorageFile]]:
        ...
    def index_of(value: winsdk.windows.storage.StorageFile) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...

class FileSavePicker(_winrt.Object):
    ...
    suggested_start_location: PickerLocationId
    suggested_save_file: winsdk.windows.storage.StorageFile
    suggested_file_name: str
    settings_identifier: str
    default_file_extension: str
    commit_button_text: str
    file_type_choices: winsdk.windows.foundation.collections.IMap[str, winsdk.windows.foundation.collections.IVector[str]]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    enterprise_id: str
    user: winsdk.windows.system.User
    def __init__(self, ) -> None:
        ...
    def create_for_user(user: winsdk.windows.system.User) -> FileSavePicker:
        ...
    def pick_save_file_and_continue() -> None:
        ...
    def pick_save_file_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...

class FolderPicker(_winrt.Object):
    ...
    view_mode: PickerViewMode
    suggested_start_location: PickerLocationId
    settings_identifier: str
    commit_button_text: str
    file_type_filter: winsdk.windows.foundation.collections.IVector[str]
    continuation_data: winsdk.windows.foundation.collections.ValueSet
    user: winsdk.windows.system.User
    def __init__(self, ) -> None:
        ...
    def create_for_user(user: winsdk.windows.system.User) -> FolderPicker:
        ...
    def pick_folder_and_continue() -> None:
        ...
    def pick_single_folder_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFolder]:
        ...

