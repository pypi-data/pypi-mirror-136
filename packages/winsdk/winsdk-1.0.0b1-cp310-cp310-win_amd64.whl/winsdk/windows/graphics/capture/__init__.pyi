# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.graphics
except Exception:
    pass

try:
    import winsdk.windows.graphics.directx
except Exception:
    pass

try:
    import winsdk.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winsdk.windows.security.authorization.appcapabilityaccess
except Exception:
    pass

try:
    import winsdk.windows.system
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

try:
    import winsdk.windows.ui.composition
except Exception:
    pass

class GraphicsCaptureAccessKind(enum.IntEnum):
    BORDERLESS = 0
    PROGRAMMATIC = 1

class Direct3D11CaptureFrame(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    content_size: winsdk.windows.graphics.SizeInt32
    surface: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface
    system_relative_time: winsdk.windows.foundation.TimeSpan
    def close() -> None:
        ...

class Direct3D11CaptureFramePool(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    dispatcher_queue: winsdk.windows.system.DispatcherQueue
    def close() -> None:
        ...
    def create(device: winsdk.windows.graphics.directx.direct3d11.IDirect3DDevice, pixel_format: winsdk.windows.graphics.directx.DirectXPixelFormat, number_of_buffers: _winrt.Int32, size: winsdk.windows.graphics.SizeInt32) -> Direct3D11CaptureFramePool:
        ...
    def create_capture_session(item: GraphicsCaptureItem) -> GraphicsCaptureSession:
        ...
    def create_free_threaded(device: winsdk.windows.graphics.directx.direct3d11.IDirect3DDevice, pixel_format: winsdk.windows.graphics.directx.DirectXPixelFormat, number_of_buffers: _winrt.Int32, size: winsdk.windows.graphics.SizeInt32) -> Direct3D11CaptureFramePool:
        ...
    def recreate(device: winsdk.windows.graphics.directx.direct3d11.IDirect3DDevice, pixel_format: winsdk.windows.graphics.directx.DirectXPixelFormat, number_of_buffers: _winrt.Int32, size: winsdk.windows.graphics.SizeInt32) -> None:
        ...
    def try_get_next_frame() -> Direct3D11CaptureFrame:
        ...
    def add_frame_arrived(handler: winsdk.windows.foundation.TypedEventHandler[Direct3D11CaptureFramePool, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_frame_arrived(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class GraphicsCaptureAccess(_winrt.Object):
    ...
    def request_access_async(request: GraphicsCaptureAccessKind) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.security.authorization.appcapabilityaccess.AppCapabilityAccessStatus]:
        ...

class GraphicsCaptureItem(_winrt.Object):
    ...
    display_name: str
    size: winsdk.windows.graphics.SizeInt32
    def create_from_visual(visual: winsdk.windows.ui.composition.Visual) -> GraphicsCaptureItem:
        ...
    def try_create_from_display_id(display_id: winsdk.windows.graphics.DisplayId) -> GraphicsCaptureItem:
        ...
    def try_create_from_window_id(window_id: winsdk.windows.ui.WindowId) -> GraphicsCaptureItem:
        ...
    def add_closed(handler: winsdk.windows.foundation.TypedEventHandler[GraphicsCaptureItem, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_closed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class GraphicsCapturePicker(_winrt.Object):
    ...
    def __init__(self, ) -> None:
        ...
    def pick_single_item_async() -> winsdk.windows.foundation.IAsyncOperation[GraphicsCaptureItem]:
        ...

class GraphicsCaptureSession(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    is_cursor_capture_enabled: _winrt.Boolean
    is_border_required: _winrt.Boolean
    def close() -> None:
        ...
    def is_supported() -> _winrt.Boolean:
        ...
    def start_capture() -> None:
        ...

