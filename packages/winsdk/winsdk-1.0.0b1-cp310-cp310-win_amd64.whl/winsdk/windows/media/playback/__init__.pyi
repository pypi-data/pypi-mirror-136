# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.enumeration
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.foundation.numerics
except Exception:
    pass

try:
    import winsdk.windows.graphics.directx.direct3d11
except Exception:
    pass

try:
    import winsdk.windows.media
except Exception:
    pass

try:
    import winsdk.windows.media.audio
except Exception:
    pass

try:
    import winsdk.windows.media.casting
except Exception:
    pass

try:
    import winsdk.windows.media.core
except Exception:
    pass

try:
    import winsdk.windows.media.mediaproperties
except Exception:
    pass

try:
    import winsdk.windows.media.protection
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.ui.composition
except Exception:
    pass

class AutoLoadedDisplayPropertyKind(enum.IntEnum):
    NONE = 0
    MUSIC_OR_VIDEO = 1
    MUSIC = 2
    VIDEO = 3

class FailedMediaStreamKind(enum.IntEnum):
    UNKNOWN = 0
    AUDIO = 1
    VIDEO = 2

class MediaBreakInsertionMethod(enum.IntEnum):
    INTERRUPT = 0
    REPLACE = 1

class MediaCommandEnablingRule(enum.IntEnum):
    AUTO = 0
    ALWAYS = 1
    NEVER = 2

class MediaPlaybackItemChangedReason(enum.IntEnum):
    INITIAL_ITEM = 0
    END_OF_STREAM = 1
    ERROR = 2
    APP_REQUESTED = 3

class MediaPlaybackItemErrorCode(enum.IntEnum):
    NONE = 0
    ABORTED = 1
    NETWORK_ERROR = 2
    DECODE_ERROR = 3
    SOURCE_NOT_SUPPORTED_ERROR = 4
    ENCRYPTION_ERROR = 5

class MediaPlaybackSessionVideoConstrictionReason(enum.IntEnum):
    NONE = 0
    VIRTUAL_MACHINE = 1
    UNSUPPORTED_DISPLAY_ADAPTER = 2
    UNSIGNED_DRIVER = 3
    FRAME_SERVER_ENABLED = 4
    OUTPUT_PROTECTION_FAILED = 5
    UNKNOWN = 6

class MediaPlaybackState(enum.IntEnum):
    NONE = 0
    OPENING = 1
    BUFFERING = 2
    PLAYING = 3
    PAUSED = 4

class MediaPlayerAudioCategory(enum.IntEnum):
    OTHER = 0
    COMMUNICATIONS = 3
    ALERTS = 4
    SOUND_EFFECTS = 5
    GAME_EFFECTS = 6
    GAME_MEDIA = 7
    GAME_CHAT = 8
    SPEECH = 9
    MOVIE = 10
    MEDIA = 11

class MediaPlayerAudioDeviceType(enum.IntEnum):
    CONSOLE = 0
    MULTIMEDIA = 1
    COMMUNICATIONS = 2

class MediaPlayerError(enum.IntEnum):
    UNKNOWN = 0
    ABORTED = 1
    NETWORK_ERROR = 2
    DECODING_ERROR = 3
    SOURCE_NOT_SUPPORTED = 4

class MediaPlayerState(enum.IntEnum):
    CLOSED = 0
    OPENING = 1
    BUFFERING = 2
    PLAYING = 3
    PAUSED = 4
    STOPPED = 5

class SphericalVideoProjectionMode(enum.IntEnum):
    SPHERICAL = 0
    FLAT = 1

class StereoscopicVideoRenderMode(enum.IntEnum):
    MONO = 0
    STEREO = 1

class TimedMetadataTrackPresentationMode(enum.IntEnum):
    DISABLED = 0
    HIDDEN = 1
    APPLICATION_PRESENTED = 2
    PLATFORM_PRESENTED = 3

class BackgroundMediaPlayer(_winrt.Object):
    ...
    current: MediaPlayer
    def is_media_playing() -> _winrt.Boolean:
        ...
    def send_message_to_background(value: winsdk.windows.foundation.collections.ValueSet) -> None:
        ...
    def send_message_to_foreground(value: winsdk.windows.foundation.collections.ValueSet) -> None:
        ...
    def shutdown() -> None:
        ...
    def add_message_received_from_background(value: winsdk.windows.foundation.EventHandler[MediaPlayerDataReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received_from_background(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_message_received_from_foreground(value: winsdk.windows.foundation.EventHandler[MediaPlayerDataReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_message_received_from_foreground(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class CurrentMediaPlaybackItemChangedEventArgs(_winrt.Object):
    ...
    new_item: MediaPlaybackItem
    old_item: MediaPlaybackItem
    reason: MediaPlaybackItemChangedReason

class MediaBreak(_winrt.Object):
    ...
    can_start: _winrt.Boolean
    custom_properties: winsdk.windows.foundation.collections.ValueSet
    insertion_method: MediaBreakInsertionMethod
    playback_list: MediaPlaybackList
    presentation_position: typing.Optional[winsdk.windows.foundation.TimeSpan]
    def __init__(self, insertion_method: MediaBreakInsertionMethod) -> None:
        ...
    def __init__(self, insertion_method: MediaBreakInsertionMethod, presentation_position: winsdk.windows.foundation.TimeSpan) -> None:
        ...

class MediaBreakEndedEventArgs(_winrt.Object):
    ...
    media_break: MediaBreak

class MediaBreakManager(_winrt.Object):
    ...
    current_break: MediaBreak
    playback_session: MediaPlaybackSession
    def play_break(value: MediaBreak) -> None:
        ...
    def skip_current_break() -> None:
        ...
    def add_break_ended(handler: winsdk.windows.foundation.TypedEventHandler[MediaBreakManager, MediaBreakEndedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_break_ended(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_break_skipped(handler: winsdk.windows.foundation.TypedEventHandler[MediaBreakManager, MediaBreakSkippedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_break_skipped(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_break_started(handler: winsdk.windows.foundation.TypedEventHandler[MediaBreakManager, MediaBreakStartedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_break_started(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_breaks_seeked_over(handler: winsdk.windows.foundation.TypedEventHandler[MediaBreakManager, MediaBreakSeekedOverEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_breaks_seeked_over(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaBreakSchedule(_winrt.Object):
    ...
    preroll_break: MediaBreak
    postroll_break: MediaBreak
    midroll_breaks: winsdk.windows.foundation.collections.IVectorView[MediaBreak]
    playback_item: MediaPlaybackItem
    def insert_midroll_break(media_break: MediaBreak) -> None:
        ...
    def remove_midroll_break(media_break: MediaBreak) -> None:
        ...
    def add_schedule_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaBreakSchedule, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_schedule_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaBreakSeekedOverEventArgs(_winrt.Object):
    ...
    new_position: winsdk.windows.foundation.TimeSpan
    old_position: winsdk.windows.foundation.TimeSpan
    seeked_over_breaks: winsdk.windows.foundation.collections.IVectorView[MediaBreak]

class MediaBreakSkippedEventArgs(_winrt.Object):
    ...
    media_break: MediaBreak

class MediaBreakStartedEventArgs(_winrt.Object):
    ...
    media_break: MediaBreak

class MediaItemDisplayProperties(_winrt.Object):
    ...
    type: winsdk.windows.media.MediaPlaybackType
    thumbnail: winsdk.windows.storage.streams.RandomAccessStreamReference
    music_properties: winsdk.windows.media.MusicDisplayProperties
    video_properties: winsdk.windows.media.VideoDisplayProperties
    def clear_all() -> None:
        ...

class MediaPlaybackAudioTrackList(winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.core.AudioTrack], winsdk.windows.foundation.collections.IIterable[winsdk.windows.media.core.AudioTrack], winsdk.windows.media.core.ISingleSelectMediaTrackList, _winrt.Object):
    ...
    size: _winrt.UInt32
    selected_index: _winrt.Int32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.media.core.AudioTrack]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.media.core.AudioTrack:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.media.core.AudioTrack]]:
        ...
    def index_of(value: winsdk.windows.media.core.AudioTrack) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def add_selected_index_changed(handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.media.core.ISingleSelectMediaTrackList, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_selected_index_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackCommandManager(_winrt.Object):
    ...
    is_enabled: _winrt.Boolean
    auto_repeat_mode_behavior: MediaPlaybackCommandManagerCommandBehavior
    fast_forward_behavior: MediaPlaybackCommandManagerCommandBehavior
    media_player: MediaPlayer
    next_behavior: MediaPlaybackCommandManagerCommandBehavior
    pause_behavior: MediaPlaybackCommandManagerCommandBehavior
    play_behavior: MediaPlaybackCommandManagerCommandBehavior
    position_behavior: MediaPlaybackCommandManagerCommandBehavior
    previous_behavior: MediaPlaybackCommandManagerCommandBehavior
    rate_behavior: MediaPlaybackCommandManagerCommandBehavior
    rewind_behavior: MediaPlaybackCommandManagerCommandBehavior
    shuffle_behavior: MediaPlaybackCommandManagerCommandBehavior
    def add_auto_repeat_mode_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_auto_repeat_mode_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_fast_forward_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerFastForwardReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_fast_forward_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_next_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerNextReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_next_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_pause_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerPauseReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_pause_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_play_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerPlayReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_play_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_position_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerPositionReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_position_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_previous_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerPreviousReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_previous_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_rate_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerRateReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_rate_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_rewind_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerRewindReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_rewind_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_shuffle_received(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManager, MediaPlaybackCommandManagerShuffleReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_shuffle_received(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackCommandManagerAutoRepeatModeReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    auto_repeat_mode: winsdk.windows.media.MediaPlaybackAutoRepeatMode
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerCommandBehavior(_winrt.Object):
    ...
    enabling_rule: MediaCommandEnablingRule
    command_manager: MediaPlaybackCommandManager
    is_enabled: _winrt.Boolean
    def add_is_enabled_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackCommandManagerCommandBehavior, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_is_enabled_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackCommandManagerFastForwardReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerNextReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerPauseReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerPlayReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerPositionReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    position: winsdk.windows.foundation.TimeSpan
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerPreviousReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerRateReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    playback_rate: _winrt.Double
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerRewindReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackCommandManagerShuffleReceivedEventArgs(_winrt.Object):
    ...
    handled: _winrt.Boolean
    is_shuffle_requested: _winrt.Boolean
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class MediaPlaybackItem(IMediaPlaybackSource, _winrt.Object):
    ...
    audio_tracks: MediaPlaybackAudioTrackList
    source: winsdk.windows.media.core.MediaSource
    timed_metadata_tracks: MediaPlaybackTimedMetadataTrackList
    video_tracks: MediaPlaybackVideoTrackList
    can_skip: _winrt.Boolean
    break_schedule: MediaBreakSchedule
    duration_limit: typing.Optional[winsdk.windows.foundation.TimeSpan]
    start_time: winsdk.windows.foundation.TimeSpan
    is_disabled_in_playback_list: _winrt.Boolean
    auto_loaded_display_properties: AutoLoadedDisplayPropertyKind
    total_download_progress: _winrt.Double
    def __init__(self, source: winsdk.windows.media.core.MediaSource, start_time: winsdk.windows.foundation.TimeSpan) -> None:
        ...
    def __init__(self, source: winsdk.windows.media.core.MediaSource, start_time: winsdk.windows.foundation.TimeSpan, duration_limit: winsdk.windows.foundation.TimeSpan) -> None:
        ...
    def __init__(self, source: winsdk.windows.media.core.MediaSource) -> None:
        ...
    def apply_display_properties(value: MediaItemDisplayProperties) -> None:
        ...
    def find_from_media_source(source: winsdk.windows.media.core.MediaSource) -> MediaPlaybackItem:
        ...
    def get_display_properties() -> MediaItemDisplayProperties:
        ...
    def add_audio_tracks_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackItem, winsdk.windows.foundation.collections.IVectorChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_audio_tracks_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_timed_metadata_tracks_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackItem, winsdk.windows.foundation.collections.IVectorChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_timed_metadata_tracks_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_video_tracks_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackItem, winsdk.windows.foundation.collections.IVectorChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_video_tracks_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackItemError(_winrt.Object):
    ...
    error_code: MediaPlaybackItemErrorCode
    extended_error: winsdk.windows.foundation.HResult

class MediaPlaybackItemFailedEventArgs(_winrt.Object):
    ...
    error: MediaPlaybackItemError
    item: MediaPlaybackItem

class MediaPlaybackItemOpenedEventArgs(_winrt.Object):
    ...
    item: MediaPlaybackItem

class MediaPlaybackList(IMediaPlaybackSource, _winrt.Object):
    ...
    shuffle_enabled: _winrt.Boolean
    auto_repeat_enabled: _winrt.Boolean
    current_item: MediaPlaybackItem
    current_item_index: _winrt.UInt32
    items: winsdk.windows.foundation.collections.IObservableVector[MediaPlaybackItem]
    starting_item: MediaPlaybackItem
    max_prefetch_time: typing.Optional[winsdk.windows.foundation.TimeSpan]
    shuffled_items: winsdk.windows.foundation.collections.IVectorView[MediaPlaybackItem]
    max_played_items_to_keep_open: typing.Optional[_winrt.UInt32]
    def __init__(self, ) -> None:
        ...
    def move_next() -> MediaPlaybackItem:
        ...
    def move_previous() -> MediaPlaybackItem:
        ...
    def move_to(item_index: _winrt.UInt32) -> MediaPlaybackItem:
        ...
    def set_shuffled_items(value: typing.Iterable[MediaPlaybackItem]) -> None:
        ...
    def add_current_item_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackList, CurrentMediaPlaybackItemChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_current_item_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_item_failed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackList, MediaPlaybackItemFailedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_item_failed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_item_opened(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackList, MediaPlaybackItemOpenedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_item_opened(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackSession(_winrt.Object):
    ...
    stereoscopic_video_packing_mode: winsdk.windows.media.mediaproperties.StereoscopicVideoPackingMode
    position: winsdk.windows.foundation.TimeSpan
    playback_rate: _winrt.Double
    normalized_source_rect: winsdk.windows.foundation.Rect
    buffering_progress: _winrt.Double
    can_pause: _winrt.Boolean
    can_seek: _winrt.Boolean
    download_progress: _winrt.Double
    is_protected: _winrt.Boolean
    media_player: MediaPlayer
    natural_duration: winsdk.windows.foundation.TimeSpan
    natural_video_height: _winrt.UInt32
    natural_video_width: _winrt.UInt32
    playback_state: MediaPlaybackState
    is_mirroring: _winrt.Boolean
    spherical_video_projection: MediaPlaybackSphericalVideoProjection
    playback_rotation: winsdk.windows.media.mediaproperties.MediaRotation
    def get_buffered_ranges() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.MediaTimeRange]:
        ...
    def get_output_degradation_policy_state() -> MediaPlaybackSessionOutputDegradationPolicyState:
        ...
    def get_played_ranges() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.MediaTimeRange]:
        ...
    def get_seekable_ranges() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.MediaTimeRange]:
        ...
    def is_supported_playback_rate_range(rate1: _winrt.Double, rate2: _winrt.Double) -> _winrt.Boolean:
        ...
    def add_buffering_ended(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffering_ended(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_buffering_progress_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffering_progress_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_buffering_started(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffering_started(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_download_progress_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_download_progress_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_natural_duration_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_natural_duration_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_natural_video_size_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_natural_video_size_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_playback_rate_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_playback_rate_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_playback_state_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_playback_state_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_position_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_position_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_seek_completed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_seek_completed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_buffered_ranges_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffered_ranges_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_played_ranges_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_played_ranges_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_seekable_ranges_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_seekable_ranges_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_supported_playback_rates_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackSession, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_supported_playback_rates_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackSessionBufferingStartedEventArgs(_winrt.Object):
    ...
    is_playback_interruption: _winrt.Boolean

class MediaPlaybackSessionOutputDegradationPolicyState(_winrt.Object):
    ...
    video_constriction_reason: MediaPlaybackSessionVideoConstrictionReason

class MediaPlaybackSphericalVideoProjection(_winrt.Object):
    ...
    view_orientation: winsdk.windows.foundation.numerics.Quaternion
    projection_mode: SphericalVideoProjectionMode
    is_enabled: _winrt.Boolean
    horizontal_field_of_view_in_degrees: _winrt.Double
    frame_format: winsdk.windows.media.mediaproperties.SphericalVideoFrameFormat

class MediaPlaybackTimedMetadataTrackList(winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.core.TimedMetadataTrack], winsdk.windows.foundation.collections.IIterable[winsdk.windows.media.core.TimedMetadataTrack], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.media.core.TimedMetadataTrack]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.media.core.TimedMetadataTrack:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.media.core.TimedMetadataTrack]]:
        ...
    def get_presentation_mode(index: _winrt.UInt32) -> TimedMetadataTrackPresentationMode:
        ...
    def index_of(value: winsdk.windows.media.core.TimedMetadataTrack) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def set_presentation_mode(index: _winrt.UInt32, value: TimedMetadataTrackPresentationMode) -> None:
        ...
    def add_presentation_mode_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlaybackTimedMetadataTrackList, TimedMetadataPresentationModeChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_presentation_mode_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlaybackVideoTrackList(winsdk.windows.foundation.collections.IVectorView[winsdk.windows.media.core.VideoTrack], winsdk.windows.foundation.collections.IIterable[winsdk.windows.media.core.VideoTrack], winsdk.windows.media.core.ISingleSelectMediaTrackList, _winrt.Object):
    ...
    size: _winrt.UInt32
    selected_index: _winrt.Int32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.media.core.VideoTrack]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.media.core.VideoTrack:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.media.core.VideoTrack]]:
        ...
    def index_of(value: winsdk.windows.media.core.VideoTrack) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def add_selected_index_changed(handler: winsdk.windows.foundation.TypedEventHandler[winsdk.windows.media.core.ISingleSelectMediaTrackList, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_selected_index_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlayer(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    volume: _winrt.Double
    position: winsdk.windows.foundation.TimeSpan
    playback_rate: _winrt.Double
    is_looping_enabled: _winrt.Boolean
    is_muted: _winrt.Boolean
    auto_play: _winrt.Boolean
    current_state: MediaPlayerState
    natural_duration: winsdk.windows.foundation.TimeSpan
    playback_media_markers: PlaybackMediaMarkerSequence
    is_protected: _winrt.Boolean
    buffering_progress: _winrt.Double
    can_pause: _winrt.Boolean
    can_seek: _winrt.Boolean
    audio_device_type: MediaPlayerAudioDeviceType
    audio_category: MediaPlayerAudioCategory
    system_media_transport_controls: winsdk.windows.media.SystemMediaTransportControls
    timeline_controller_position_offset: winsdk.windows.foundation.TimeSpan
    timeline_controller: winsdk.windows.media.MediaTimelineController
    stereoscopic_video_render_mode: StereoscopicVideoRenderMode
    real_time_playback: _winrt.Boolean
    audio_device: winsdk.windows.devices.enumeration.DeviceInformation
    audio_balance: _winrt.Double
    command_manager: MediaPlaybackCommandManager
    break_manager: MediaBreakManager
    playback_session: MediaPlaybackSession
    is_video_frame_server_enabled: _winrt.Boolean
    audio_state_monitor: winsdk.windows.media.audio.AudioStateMonitor
    protection_manager: winsdk.windows.media.protection.MediaProtectionManager
    source: IMediaPlaybackSource
    def __init__(self, ) -> None:
        ...
    def add_audio_effect(activatable_class_id: str, effect_optional: _winrt.Boolean, configuration: winsdk.windows.foundation.collections.IPropertySet) -> None:
        ...
    def add_video_effect(activatable_class_id: str, effect_optional: _winrt.Boolean, effect_configuration: winsdk.windows.foundation.collections.IPropertySet) -> None:
        ...
    def close() -> None:
        ...
    def copy_frame_to_stereoscopic_video_surfaces(destination_left_eye: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface, destination_right_eye: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface) -> None:
        ...
    def copy_frame_to_video_surface(destination: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface) -> None:
        ...
    def copy_frame_to_video_surface(destination: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface, target_rectangle: winsdk.windows.foundation.Rect) -> None:
        ...
    def get_as_casting_source() -> winsdk.windows.media.casting.CastingSource:
        ...
    def get_surface(compositor: winsdk.windows.ui.composition.Compositor) -> MediaPlayerSurface:
        ...
    def pause() -> None:
        ...
    def play() -> None:
        ...
    def remove_all_effects() -> None:
        ...
    def render_subtitles_to_surface(destination: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface) -> _winrt.Boolean:
        ...
    def render_subtitles_to_surface(destination: winsdk.windows.graphics.directx.direct3d11.IDirect3DSurface, target_rectangle: winsdk.windows.foundation.Rect) -> _winrt.Boolean:
        ...
    def set_file_source(file: winsdk.windows.storage.IStorageFile) -> None:
        ...
    def set_media_source(source: winsdk.windows.media.core.IMediaSource) -> None:
        ...
    def set_stream_source(stream: winsdk.windows.storage.streams.IRandomAccessStream) -> None:
        ...
    def set_surface_size(size: winsdk.windows.foundation.Size) -> None:
        ...
    def set_uri_source(value: winsdk.windows.foundation.Uri) -> None:
        ...
    def step_backward_one_frame() -> None:
        ...
    def step_forward_one_frame() -> None:
        ...
    def add_buffering_ended(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffering_ended(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_buffering_started(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_buffering_started(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_current_state_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_current_state_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_media_ended(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_media_ended(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_media_failed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, MediaPlayerFailedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_media_failed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_media_opened(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_media_opened(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_media_player_rate_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, MediaPlayerRateChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_media_player_rate_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_playback_media_marker_reached(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, PlaybackMediaMarkerReachedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_playback_media_marker_reached(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_seek_completed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_seek_completed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_volume_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_volume_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_is_muted_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_is_muted_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_source_changed(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_source_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_video_frame_available(value: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_video_frame_available(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_subtitle_frame_changed(handler: winsdk.windows.foundation.TypedEventHandler[MediaPlayer, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_subtitle_frame_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MediaPlayerDataReceivedEventArgs(_winrt.Object):
    ...
    data: winsdk.windows.foundation.collections.ValueSet

class MediaPlayerFailedEventArgs(_winrt.Object):
    ...
    error: MediaPlayerError
    error_message: str
    extended_error_code: winsdk.windows.foundation.HResult

class MediaPlayerRateChangedEventArgs(_winrt.Object):
    ...
    new_rate: _winrt.Double

class MediaPlayerSurface(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    composition_surface: winsdk.windows.ui.composition.ICompositionSurface
    compositor: winsdk.windows.ui.composition.Compositor
    media_player: MediaPlayer
    def close() -> None:
        ...

class PlaybackMediaMarker(_winrt.Object):
    ...
    media_marker_type: str
    text: str
    time: winsdk.windows.foundation.TimeSpan
    def __init__(self, value: winsdk.windows.foundation.TimeSpan) -> None:
        ...
    def __init__(self, value: winsdk.windows.foundation.TimeSpan, media_market_type: str, text: str) -> None:
        ...

class PlaybackMediaMarkerReachedEventArgs(_winrt.Object):
    ...
    playback_media_marker: PlaybackMediaMarker

class PlaybackMediaMarkerSequence(winsdk.windows.foundation.collections.IIterable[PlaybackMediaMarker], _winrt.Object):
    ...
    size: _winrt.UInt32
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[PlaybackMediaMarker]:
        ...
    def insert(value: PlaybackMediaMarker) -> None:
        ...

class TimedMetadataPresentationModeChangedEventArgs(_winrt.Object):
    ...
    new_presentation_mode: TimedMetadataTrackPresentationMode
    old_presentation_mode: TimedMetadataTrackPresentationMode
    track: winsdk.windows.media.core.TimedMetadataTrack

class IMediaEnginePlaybackSource(_winrt.Object):
    ...
    current_item: MediaPlaybackItem
    def set_playback_source(source: IMediaPlaybackSource) -> None:
        ...

class IMediaPlaybackSource(_winrt.Object):
    ...

