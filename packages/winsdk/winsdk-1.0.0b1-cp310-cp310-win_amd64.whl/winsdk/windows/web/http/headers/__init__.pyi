# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.globalization
except Exception:
    pass

try:
    import winsdk.windows.networking
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.web.http
except Exception:
    pass

class HttpCacheDirectiveHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpNameValueHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    shared_max_age: typing.Optional[winsdk.windows.foundation.TimeSpan]
    min_fresh: typing.Optional[winsdk.windows.foundation.TimeSpan]
    max_stale: typing.Optional[winsdk.windows.foundation.TimeSpan]
    max_age: typing.Optional[winsdk.windows.foundation.TimeSpan]
    def append(value: HttpNameValueHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpNameValueHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpNameValueHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpNameValueHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpNameValueHeaderValue]:
        ...
    def index_of(value: HttpNameValueHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpNameValueHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpNameValueHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpNameValueHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpChallengeHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    scheme: str
    token: str
    def __init__(self, scheme: str) -> None:
        ...
    def __init__(self, scheme: str, token: str) -> None:
        ...
    def parse(input: str) -> HttpChallengeHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpChallengeHeaderValue]:
        ...

class HttpChallengeHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpChallengeHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpChallengeHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpChallengeHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpChallengeHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpChallengeHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpChallengeHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpChallengeHeaderValue]:
        ...
    def index_of(value: HttpChallengeHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpChallengeHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpChallengeHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpChallengeHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpConnectionOptionHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    token: str
    def __init__(self, token: str) -> None:
        ...
    def parse(input: str) -> HttpConnectionOptionHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpConnectionOptionHeaderValue]:
        ...

class HttpConnectionOptionHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpConnectionOptionHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpConnectionOptionHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpConnectionOptionHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpConnectionOptionHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpConnectionOptionHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpConnectionOptionHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpConnectionOptionHeaderValue]:
        ...
    def index_of(value: HttpConnectionOptionHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpConnectionOptionHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpConnectionOptionHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpConnectionOptionHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpContentCodingHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    content_coding: str
    def __init__(self, content_coding: str) -> None:
        ...
    def parse(input: str) -> HttpContentCodingHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpContentCodingHeaderValue]:
        ...

class HttpContentCodingHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpContentCodingHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpContentCodingHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpContentCodingHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpContentCodingHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpContentCodingHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpContentCodingHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpContentCodingHeaderValue]:
        ...
    def index_of(value: HttpContentCodingHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpContentCodingHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpContentCodingHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpContentCodingHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpContentCodingWithQualityHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    content_coding: str
    quality: typing.Optional[_winrt.Double]
    def __init__(self, content_coding: str) -> None:
        ...
    def __init__(self, content_coding: str, quality: _winrt.Double) -> None:
        ...
    def parse(input: str) -> HttpContentCodingWithQualityHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpContentCodingWithQualityHeaderValue]:
        ...

class HttpContentCodingWithQualityHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpContentCodingWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpContentCodingWithQualityHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpContentCodingWithQualityHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpContentCodingWithQualityHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpContentCodingWithQualityHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpContentCodingWithQualityHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpContentCodingWithQualityHeaderValue]:
        ...
    def index_of(value: HttpContentCodingWithQualityHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpContentCodingWithQualityHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpContentCodingWithQualityHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpContentCodingWithQualityHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpContentDispositionHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: typing.Optional[_winrt.UInt64]
    name: str
    file_name_star: str
    file_name: str
    disposition_type: str
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    def __init__(self, disposition_type: str) -> None:
        ...
    def parse(input: str) -> HttpContentDispositionHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpContentDispositionHeaderValue]:
        ...

class HttpContentHeaderCollection(winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    last_modified: typing.Optional[winsdk.windows.foundation.DateTime]
    expires: typing.Optional[winsdk.windows.foundation.DateTime]
    content_type: HttpMediaTypeHeaderValue
    content_range: HttpContentRangeHeaderValue
    content_m_d5: winsdk.windows.storage.streams.IBuffer
    content_location: winsdk.windows.foundation.Uri
    content_length: typing.Optional[_winrt.UInt64]
    content_disposition: HttpContentDispositionHeaderValue
    content_encoding: HttpContentCodingHeaderValueCollection
    content_language: HttpLanguageHeaderValueCollection
    def __init__(self, ) -> None:
        ...
    def append(name: str, value: str) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, str]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> str:
        ...
    def remove(key: str) -> None:
        ...
    def to_string() -> str:
        ...
    def try_append_without_validation(name: str, value: str) -> _winrt.Boolean:
        ...

class HttpContentRangeHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    unit: str
    first_byte_position: typing.Optional[_winrt.UInt64]
    last_byte_position: typing.Optional[_winrt.UInt64]
    length: typing.Optional[_winrt.UInt64]
    def __init__(self, length: _winrt.UInt64) -> None:
        ...
    def __init__(self, from: _winrt.UInt64, to: _winrt.UInt64) -> None:
        ...
    def __init__(self, from: _winrt.UInt64, to: _winrt.UInt64, length: _winrt.UInt64) -> None:
        ...
    def parse(input: str) -> HttpContentRangeHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpContentRangeHeaderValue]:
        ...

class HttpCookiePairHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    value: str
    name: str
    def __init__(self, name: str) -> None:
        ...
    def __init__(self, name: str, value: str) -> None:
        ...
    def parse(input: str) -> HttpCookiePairHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpCookiePairHeaderValue]:
        ...

class HttpCookiePairHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpCookiePairHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpCookiePairHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpCookiePairHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpCookiePairHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpCookiePairHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpCookiePairHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpCookiePairHeaderValue]:
        ...
    def index_of(value: HttpCookiePairHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpCookiePairHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpCookiePairHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpCookiePairHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpCredentialsHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    scheme: str
    token: str
    def __init__(self, scheme: str) -> None:
        ...
    def __init__(self, scheme: str, token: str) -> None:
        ...
    def parse(input: str) -> HttpCredentialsHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpCredentialsHeaderValue]:
        ...

class HttpDateOrDeltaHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    date: typing.Optional[winsdk.windows.foundation.DateTime]
    delta: typing.Optional[winsdk.windows.foundation.TimeSpan]
    def parse(input: str) -> HttpDateOrDeltaHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpDateOrDeltaHeaderValue]:
        ...

class HttpExpectationHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    value: str
    name: str
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    def __init__(self, name: str) -> None:
        ...
    def __init__(self, name: str, value: str) -> None:
        ...
    def parse(input: str) -> HttpExpectationHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpExpectationHeaderValue]:
        ...

class HttpExpectationHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpExpectationHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpExpectationHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpExpectationHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpExpectationHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpExpectationHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpExpectationHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpExpectationHeaderValue]:
        ...
    def index_of(value: HttpExpectationHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpExpectationHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpExpectationHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpExpectationHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpLanguageHeaderValueCollection(winsdk.windows.foundation.collections.IVector[winsdk.windows.globalization.Language], winsdk.windows.foundation.collections.IIterable[winsdk.windows.globalization.Language], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: winsdk.windows.globalization.Language) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.globalization.Language]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.globalization.Language:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.globalization.Language]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.globalization.Language]:
        ...
    def index_of(value: winsdk.windows.globalization.Language) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: winsdk.windows.globalization.Language) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[winsdk.windows.globalization.Language]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: winsdk.windows.globalization.Language) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpLanguageRangeWithQualityHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    language_range: str
    quality: typing.Optional[_winrt.Double]
    def __init__(self, language_range: str) -> None:
        ...
    def __init__(self, language_range: str, quality: _winrt.Double) -> None:
        ...
    def parse(input: str) -> HttpLanguageRangeWithQualityHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpLanguageRangeWithQualityHeaderValue]:
        ...

class HttpLanguageRangeWithQualityHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpLanguageRangeWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpLanguageRangeWithQualityHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpLanguageRangeWithQualityHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpLanguageRangeWithQualityHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpLanguageRangeWithQualityHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpLanguageRangeWithQualityHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpLanguageRangeWithQualityHeaderValue]:
        ...
    def index_of(value: HttpLanguageRangeWithQualityHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpLanguageRangeWithQualityHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpLanguageRangeWithQualityHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpLanguageRangeWithQualityHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpMediaTypeHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    media_type: str
    char_set: str
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    def __init__(self, media_type: str) -> None:
        ...
    def parse(input: str) -> HttpMediaTypeHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpMediaTypeHeaderValue]:
        ...

class HttpMediaTypeWithQualityHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    quality: typing.Optional[_winrt.Double]
    media_type: str
    char_set: str
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    def __init__(self, media_type: str) -> None:
        ...
    def __init__(self, media_type: str, quality: _winrt.Double) -> None:
        ...
    def parse(input: str) -> HttpMediaTypeWithQualityHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpMediaTypeWithQualityHeaderValue]:
        ...

class HttpMediaTypeWithQualityHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpMediaTypeWithQualityHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpMediaTypeWithQualityHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpMediaTypeWithQualityHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpMediaTypeWithQualityHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpMediaTypeWithQualityHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpMediaTypeWithQualityHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpMediaTypeWithQualityHeaderValue]:
        ...
    def index_of(value: HttpMediaTypeWithQualityHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpMediaTypeWithQualityHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpMediaTypeWithQualityHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpMediaTypeWithQualityHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpMethodHeaderValueCollection(winsdk.windows.foundation.collections.IVector[winsdk.windows.web.http.HttpMethod], winsdk.windows.foundation.collections.IIterable[winsdk.windows.web.http.HttpMethod], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: winsdk.windows.web.http.HttpMethod) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.web.http.HttpMethod]:
        ...
    def get_at(index: _winrt.UInt32) -> winsdk.windows.web.http.HttpMethod:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.web.http.HttpMethod]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.web.http.HttpMethod]:
        ...
    def index_of(value: winsdk.windows.web.http.HttpMethod) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: winsdk.windows.web.http.HttpMethod) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[winsdk.windows.web.http.HttpMethod]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: winsdk.windows.web.http.HttpMethod) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpNameValueHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    value: str
    name: str
    def __init__(self, name: str) -> None:
        ...
    def __init__(self, name: str, value: str) -> None:
        ...
    def parse(input: str) -> HttpNameValueHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpNameValueHeaderValue]:
        ...

class HttpProductHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    name: str
    version: str
    def __init__(self, product_name: str) -> None:
        ...
    def __init__(self, product_name: str, product_version: str) -> None:
        ...
    def parse(input: str) -> HttpProductHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpProductHeaderValue]:
        ...

class HttpProductInfoHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    comment: str
    product: HttpProductHeaderValue
    def __init__(self, product_comment: str) -> None:
        ...
    def __init__(self, product_name: str, product_version: str) -> None:
        ...
    def parse(input: str) -> HttpProductInfoHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpProductInfoHeaderValue]:
        ...

class HttpProductInfoHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpProductInfoHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpProductInfoHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpProductInfoHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpProductInfoHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpProductInfoHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpProductInfoHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpProductInfoHeaderValue]:
        ...
    def index_of(value: HttpProductInfoHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpProductInfoHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpProductInfoHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpProductInfoHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

class HttpRequestHeaderCollection(winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    referer: winsdk.windows.foundation.Uri
    proxy_authorization: HttpCredentialsHeaderValue
    max_forwards: typing.Optional[_winrt.UInt32]
    if_unmodified_since: typing.Optional[winsdk.windows.foundation.DateTime]
    if_modified_since: typing.Optional[winsdk.windows.foundation.DateTime]
    host: winsdk.windows.networking.HostName
    from: str
    date: typing.Optional[winsdk.windows.foundation.DateTime]
    authorization: HttpCredentialsHeaderValue
    accept: HttpMediaTypeWithQualityHeaderValueCollection
    accept_encoding: HttpContentCodingWithQualityHeaderValueCollection
    accept_language: HttpLanguageRangeWithQualityHeaderValueCollection
    cache_control: HttpCacheDirectiveHeaderValueCollection
    connection: HttpConnectionOptionHeaderValueCollection
    cookie: HttpCookiePairHeaderValueCollection
    expect: HttpExpectationHeaderValueCollection
    transfer_encoding: HttpTransferCodingHeaderValueCollection
    user_agent: HttpProductInfoHeaderValueCollection
    def append(name: str, value: str) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, str]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> str:
        ...
    def remove(key: str) -> None:
        ...
    def to_string() -> str:
        ...
    def try_append_without_validation(name: str, value: str) -> _winrt.Boolean:
        ...

class HttpResponseHeaderCollection(winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    retry_after: HttpDateOrDeltaHeaderValue
    location: winsdk.windows.foundation.Uri
    date: typing.Optional[winsdk.windows.foundation.DateTime]
    age: typing.Optional[winsdk.windows.foundation.TimeSpan]
    allow: HttpMethodHeaderValueCollection
    cache_control: HttpCacheDirectiveHeaderValueCollection
    connection: HttpConnectionOptionHeaderValueCollection
    proxy_authenticate: HttpChallengeHeaderValueCollection
    transfer_encoding: HttpTransferCodingHeaderValueCollection
    www_authenticate: HttpChallengeHeaderValueCollection
    def append(name: str, value: str) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, str]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> str:
        ...
    def remove(key: str) -> None:
        ...
    def to_string() -> str:
        ...
    def try_append_without_validation(name: str, value: str) -> _winrt.Boolean:
        ...

class HttpTransferCodingHeaderValue(winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    parameters: winsdk.windows.foundation.collections.IVector[HttpNameValueHeaderValue]
    value: str
    def __init__(self, input: str) -> None:
        ...
    def parse(input: str) -> HttpTransferCodingHeaderValue:
        ...
    def to_string() -> str:
        ...
    def try_parse(input: str) -> typing.Tuple[_winrt.Boolean, HttpTransferCodingHeaderValue]:
        ...

class HttpTransferCodingHeaderValueCollection(winsdk.windows.foundation.collections.IVector[HttpTransferCodingHeaderValue], winsdk.windows.foundation.collections.IIterable[HttpTransferCodingHeaderValue], winsdk.windows.foundation.IStringable, _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: HttpTransferCodingHeaderValue) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[HttpTransferCodingHeaderValue]:
        ...
    def get_at(index: _winrt.UInt32) -> HttpTransferCodingHeaderValue:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[HttpTransferCodingHeaderValue]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[HttpTransferCodingHeaderValue]:
        ...
    def index_of(value: HttpTransferCodingHeaderValue) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: HttpTransferCodingHeaderValue) -> None:
        ...
    def parse_add(input: str) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[HttpTransferCodingHeaderValue]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: HttpTransferCodingHeaderValue) -> None:
        ...
    def to_string() -> str:
        ...
    def try_parse_add(input: str) -> _winrt.Boolean:
        ...

