# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.data.text
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.fileproperties
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

class CommonFileQuery(enum.IntEnum):
    DEFAULT_QUERY = 0
    ORDER_BY_NAME = 1
    ORDER_BY_TITLE = 2
    ORDER_BY_MUSIC_PROPERTIES = 3
    ORDER_BY_SEARCH_RANK = 4
    ORDER_BY_DATE = 5

class CommonFolderQuery(enum.IntEnum):
    DEFAULT_QUERY = 0
    GROUP_BY_YEAR = 100
    GROUP_BY_MONTH = 101
    GROUP_BY_ARTIST = 102
    GROUP_BY_ALBUM = 103
    GROUP_BY_ALBUM_ARTIST = 104
    GROUP_BY_COMPOSER = 105
    GROUP_BY_GENRE = 106
    GROUP_BY_PUBLISHED_YEAR = 107
    GROUP_BY_RATING = 108
    GROUP_BY_TAG = 109
    GROUP_BY_AUTHOR = 110
    GROUP_BY_TYPE = 111

class DateStackOption(enum.IntEnum):
    NONE = 0
    YEAR = 1
    MONTH = 2

class FolderDepth(enum.IntEnum):
    SHALLOW = 0
    DEEP = 1

class IndexedState(enum.IntEnum):
    UNKNOWN = 0
    NOT_INDEXED = 1
    PARTIALLY_INDEXED = 2
    FULLY_INDEXED = 3

class IndexerOption(enum.IntEnum):
    USE_INDEXER_WHEN_AVAILABLE = 0
    ONLY_USE_INDEXER = 1
    DO_NOT_USE_INDEXER = 2
    ONLY_USE_INDEXER_AND_OPTIMIZE_FOR_INDEXED_PROPERTIES = 3

class SortEntry:
    property_name: str
    ascending_order: _winrt.Boolean
    def __init__(self, property_name: str, ascending_order: _winrt.Boolean) -> None: ...

class ContentIndexer(_winrt.Object):
    ...
    revision: _winrt.UInt64
    def add_async(indexable_content: IIndexableContent) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str]) -> ContentIndexerQuery:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str], sort_order: typing.Iterable[SortEntry]) -> ContentIndexerQuery:
        ...
    def create_query(search_filter: str, properties_to_retrieve: typing.Iterable[str], sort_order: typing.Iterable[SortEntry], search_filter_language: str) -> ContentIndexerQuery:
        ...
    def delete_all_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def delete_async(content_id: str) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def delete_multiple_async(content_ids: typing.Iterable[str]) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def get_indexer() -> ContentIndexer:
        ...
    def get_indexer(index_name: str) -> ContentIndexer:
        ...
    def retrieve_properties_async(content_id: str, properties_to_retrieve: typing.Iterable[str]) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]:
        ...
    def update_async(indexable_content: IIndexableContent) -> winsdk.windows.foundation.IAsyncAction:
        ...

class ContentIndexerQuery(_winrt.Object):
    ...
    query_folder: winsdk.windows.storage.StorageFolder
    def get_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[IIndexableContent]]:
        ...
    def get_async(start_index: _winrt.UInt32, max_items: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[IIndexableContent]]:
        ...
    def get_count_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_properties_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]]:
        ...
    def get_properties_async(start_index: _winrt.UInt32, max_items: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]]:
        ...

class IndexableContent(IIndexableContent, _winrt.Object):
    ...
    stream_content_type: str
    stream: winsdk.windows.storage.streams.IRandomAccessStream
    id: str
    properties: winsdk.windows.foundation.collections.IMap[str, _winrt.Object]
    def __init__(self, ) -> None:
        ...

class QueryOptions(_winrt.Object):
    ...
    user_search_filter: str
    language: str
    indexer_option: IndexerOption
    folder_depth: FolderDepth
    application_search_filter: str
    date_stack_option: DateStackOption
    file_type_filter: winsdk.windows.foundation.collections.IVector[str]
    group_property_name: str
    sort_order: winsdk.windows.foundation.collections.IVector[SortEntry]
    storage_provider_id_filter: winsdk.windows.foundation.collections.IVector[str]
    def __init__(self, query: CommonFileQuery, file_type_filter: typing.Iterable[str]) -> None:
        ...
    def __init__(self, query: CommonFolderQuery) -> None:
        ...
    def __init__(self, ) -> None:
        ...
    def load_from_string(value: str) -> None:
        ...
    def save_to_string() -> str:
        ...
    def set_property_prefetch(options: winsdk.windows.storage.fileproperties.PropertyPrefetchOptions, properties_to_retrieve: typing.Iterable[str]) -> None:
        ...
    def set_thumbnail_prefetch(mode: winsdk.windows.storage.fileproperties.ThumbnailMode, requested_size: _winrt.UInt32, options: winsdk.windows.storage.fileproperties.ThumbnailOptions) -> None:
        ...

class SortEntryVector(winsdk.windows.foundation.collections.IVector[SortEntry], winsdk.windows.foundation.collections.IIterable[SortEntry], _winrt.Object):
    ...
    size: _winrt.UInt32
    def append(value: SortEntry) -> None:
        ...
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[SortEntry]:
        ...
    def get_at(index: _winrt.UInt32) -> SortEntry:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[SortEntry]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IVectorView[SortEntry]:
        ...
    def index_of(value: SortEntry) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...
    def insert_at(index: _winrt.UInt32, value: SortEntry) -> None:
        ...
    def remove_at(index: _winrt.UInt32) -> None:
        ...
    def remove_at_end() -> None:
        ...
    def replace_all(items: typing.Sequence[SortEntry]) -> None:
        ...
    def set_at(index: _winrt.UInt32, value: SortEntry) -> None:
        ...

class StorageFileQueryResult(IStorageQueryResultBase, _winrt.Object):
    ...
    folder: winsdk.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.Object) -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_files_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]:
        ...
    def get_files_async(start_index: _winrt.UInt32, max_number_of_items: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]:
        ...
    def get_item_count_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_matching_properties_with_ranges(file: winsdk.windows.storage.StorageFile) -> winsdk.windows.foundation.collections.IMap[str, winsdk.windows.foundation.collections.IVectorView[winsdk.windows.data.text.TextSegment]]:
        ...
    def add_contents_changed(handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageFolderQueryResult(IStorageQueryResultBase, _winrt.Object):
    ...
    folder: winsdk.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.Object) -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_folders_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFolder]]:
        ...
    def get_folders_async(start_index: _winrt.UInt32, max_number_of_items: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFolder]]:
        ...
    def get_item_count_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def add_contents_changed(handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageItemQueryResult(IStorageQueryResultBase, _winrt.Object):
    ...
    folder: winsdk.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.Object) -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_item_count_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_items_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]:
        ...
    def get_items_async(start_index: _winrt.UInt32, max_number_of_items: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]:
        ...
    def add_contents_changed(handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class StorageLibraryChangeTrackerTriggerDetails(_winrt.Object):
    ...
    change_tracker: winsdk.windows.storage.StorageLibraryChangeTracker
    folder: winsdk.windows.storage.StorageFolder

class StorageLibraryContentChangedTriggerDetails(_winrt.Object):
    ...
    folder: winsdk.windows.storage.StorageFolder
    def create_modified_since_query(last_query_time: winsdk.windows.foundation.DateTime) -> StorageItemQueryResult:
        ...

class ValueAndLanguage(_winrt.Object):
    ...
    value: _winrt.Object
    language: str
    def __init__(self, ) -> None:
        ...

class IIndexableContent(_winrt.Object):
    ...
    id: str
    properties: winsdk.windows.foundation.collections.IMap[str, _winrt.Object]
    stream: winsdk.windows.storage.streams.IRandomAccessStream
    stream_content_type: str

class IStorageFolderQueryOperations(_winrt.Object):
    ...
    def are_query_options_supported(query_options: QueryOptions) -> _winrt.Boolean:
        ...
    def create_file_query() -> StorageFileQueryResult:
        ...
    def create_file_query(query: CommonFileQuery) -> StorageFileQueryResult:
        ...
    def create_file_query_with_options(query_options: QueryOptions) -> StorageFileQueryResult:
        ...
    def create_folder_query() -> StorageFolderQueryResult:
        ...
    def create_folder_query(query: CommonFolderQuery) -> StorageFolderQueryResult:
        ...
    def create_folder_query_with_options(query_options: QueryOptions) -> StorageFolderQueryResult:
        ...
    def create_item_query() -> StorageItemQueryResult:
        ...
    def create_item_query_with_options(query_options: QueryOptions) -> StorageItemQueryResult:
        ...
    def get_files_async(query: CommonFileQuery) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]:
        ...
    def get_files_async(query: CommonFileQuery, start_index: _winrt.UInt32, max_items_to_retrieve: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFile]]:
        ...
    def get_folders_async(query: CommonFolderQuery) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFolder]]:
        ...
    def get_folders_async(query: CommonFolderQuery, start_index: _winrt.UInt32, max_items_to_retrieve: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.StorageFolder]]:
        ...
    def get_indexed_state_async() -> winsdk.windows.foundation.IAsyncOperation[IndexedState]:
        ...
    def get_items_async(start_index: _winrt.UInt32, max_items_to_retrieve: _winrt.UInt32) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]:
        ...
    def is_common_file_query_supported(query: CommonFileQuery) -> _winrt.Boolean:
        ...
    def is_common_folder_query_supported(query: CommonFolderQuery) -> _winrt.Boolean:
        ...

class IStorageQueryResultBase(_winrt.Object):
    ...
    folder: winsdk.windows.storage.StorageFolder
    def apply_new_query_options(new_query_options: QueryOptions) -> None:
        ...
    def find_start_index_async(value: _winrt.Object) -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def get_current_query_options() -> QueryOptions:
        ...
    def get_item_count_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.UInt32]:
        ...
    def add_contents_changed(handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_contents_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_options_changed(changed_handler: winsdk.windows.foundation.TypedEventHandler[IStorageQueryResultBase, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_options_changed(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

