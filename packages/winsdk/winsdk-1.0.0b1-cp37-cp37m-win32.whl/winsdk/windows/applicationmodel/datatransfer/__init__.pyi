# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.security.enterprisedata
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

class ClipboardHistoryItemsResultStatus(enum.IntEnum):
    SUCCESS = 0
    ACCESS_DENIED = 1
    CLIPBOARD_HISTORY_DISABLED = 2

class DataPackageOperation(enum.IntFlag):
    NONE = 0
    COPY = 0x1
    MOVE = 0x2
    LINK = 0x4

class SetHistoryItemAsContentStatus(enum.IntEnum):
    SUCCESS = 0
    ACCESS_DENIED = 1
    ITEM_DELETED = 2

class ShareUITheme(enum.IntEnum):
    DEFAULT = 0
    LIGHT = 1
    DARK = 2

class Clipboard(_winrt.Object):
    ...
    def clear() -> None:
        ...
    def clear_history() -> _winrt.Boolean:
        ...
    def delete_item_from_history(item: ClipboardHistoryItem) -> _winrt.Boolean:
        ...
    def flush() -> None:
        ...
    def get_content() -> DataPackageView:
        ...
    def get_history_items_async() -> winsdk.windows.foundation.IAsyncOperation[ClipboardHistoryItemsResult]:
        ...
    def is_history_enabled() -> _winrt.Boolean:
        ...
    def is_roaming_enabled() -> _winrt.Boolean:
        ...
    def set_content(content: DataPackage) -> None:
        ...
    def set_content_with_options(content: DataPackage, options: ClipboardContentOptions) -> _winrt.Boolean:
        ...
    def set_history_item_as_content(item: ClipboardHistoryItem) -> SetHistoryItemAsContentStatus:
        ...
    def add_history_changed(handler: winsdk.windows.foundation.EventHandler[ClipboardHistoryChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_history_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_history_enabled_changed(handler: winsdk.windows.foundation.EventHandler[_winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_history_enabled_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_roaming_enabled_changed(handler: winsdk.windows.foundation.EventHandler[_winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_roaming_enabled_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_content_changed(handler: winsdk.windows.foundation.EventHandler[_winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_content_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class ClipboardContentOptions(_winrt.Object):
    ...
    is_roamable: _winrt.Boolean
    is_allowed_in_history: _winrt.Boolean
    history_formats: winsdk.windows.foundation.collections.IVector[str]
    roaming_formats: winsdk.windows.foundation.collections.IVector[str]
    def __init__(self, ) -> None:
        ...

class ClipboardHistoryChangedEventArgs(_winrt.Object):
    ...

class ClipboardHistoryItem(_winrt.Object):
    ...
    content: DataPackageView
    id: str
    timestamp: winsdk.windows.foundation.DateTime

class ClipboardHistoryItemsResult(_winrt.Object):
    ...
    items: winsdk.windows.foundation.collections.IVectorView[ClipboardHistoryItem]
    status: ClipboardHistoryItemsResultStatus

class DataPackage(_winrt.Object):
    ...
    requested_operation: DataPackageOperation
    properties: DataPackagePropertySet
    resource_map: winsdk.windows.foundation.collections.IMap[str, winsdk.windows.storage.streams.RandomAccessStreamReference]
    def __init__(self, ) -> None:
        ...
    def get_view() -> DataPackageView:
        ...
    def set_application_link(value: winsdk.windows.foundation.Uri) -> None:
        ...
    def set_bitmap(value: winsdk.windows.storage.streams.RandomAccessStreamReference) -> None:
        ...
    def set_data(format_id: str, value: _winrt.Object) -> None:
        ...
    def set_data_provider(format_id: str, delay_renderer: DataProviderHandler) -> None:
        ...
    def set_html_format(value: str) -> None:
        ...
    def set_rtf(value: str) -> None:
        ...
    def set_storage_items(value: typing.Iterable[winsdk.windows.storage.IStorageItem]) -> None:
        ...
    def set_storage_items(value: typing.Iterable[winsdk.windows.storage.IStorageItem], read_only: _winrt.Boolean) -> None:
        ...
    def set_text(value: str) -> None:
        ...
    def set_uri(value: winsdk.windows.foundation.Uri) -> None:
        ...
    def set_web_link(value: winsdk.windows.foundation.Uri) -> None:
        ...
    def add_destroyed(handler: winsdk.windows.foundation.TypedEventHandler[DataPackage, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_destroyed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_operation_completed(handler: winsdk.windows.foundation.TypedEventHandler[DataPackage, OperationCompletedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_operation_completed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_share_completed(handler: winsdk.windows.foundation.TypedEventHandler[DataPackage, ShareCompletedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_share_completed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_share_canceled(handler: winsdk.windows.foundation.TypedEventHandler[DataPackage, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_share_canceled(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class DataPackagePropertySet(winsdk.windows.foundation.collections.IMap[str, _winrt.Object], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]], _winrt.Object):
    ...
    title: str
    thumbnail: winsdk.windows.storage.streams.IRandomAccessStreamReference
    description: str
    application_name: str
    application_listing_uri: winsdk.windows.foundation.Uri
    file_types: winsdk.windows.foundation.collections.IVector[str]
    square30x30_logo: winsdk.windows.storage.streams.IRandomAccessStreamReference
    package_family_name: str
    logo_background_color: winsdk.windows.ui.Color
    content_source_web_link: winsdk.windows.foundation.Uri
    content_source_application_link: winsdk.windows.foundation.Uri
    enterprise_id: str
    content_source_user_activity_json: str
    size: _winrt.UInt32
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: _winrt.Object) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> _winrt.Object:
        ...
    def remove(key: str) -> None:
        ...

class DataPackagePropertySetView(winsdk.windows.foundation.collections.IMapView[str, _winrt.Object], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]], _winrt.Object):
    ...
    application_listing_uri: winsdk.windows.foundation.Uri
    application_name: str
    description: str
    file_types: winsdk.windows.foundation.collections.IVectorView[str]
    thumbnail: winsdk.windows.storage.streams.RandomAccessStreamReference
    title: str
    content_source_application_link: winsdk.windows.foundation.Uri
    content_source_web_link: winsdk.windows.foundation.Uri
    logo_background_color: winsdk.windows.ui.Color
    package_family_name: str
    square30x30_logo: winsdk.windows.storage.streams.IRandomAccessStreamReference
    enterprise_id: str
    content_source_user_activity_json: str
    is_from_roaming_clipboard: _winrt.Boolean
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, _winrt.Object]]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> _winrt.Object:
        ...
    def split() -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, _winrt.Object], winsdk.windows.foundation.collections.IMapView[str, _winrt.Object]]:
        ...

class DataPackageView(_winrt.Object):
    ...
    available_formats: winsdk.windows.foundation.collections.IVectorView[str]
    properties: DataPackagePropertySetView
    requested_operation: DataPackageOperation
    def contains(format_id: str) -> _winrt.Boolean:
        ...
    def get_application_link_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.Uri]:
        ...
    def get_bitmap_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.streams.RandomAccessStreamReference]:
        ...
    def get_data_async(format_id: str) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Object]:
        ...
    def get_html_format_async() -> winsdk.windows.foundation.IAsyncOperation[str]:
        ...
    def get_resource_map_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IMapView[str, winsdk.windows.storage.streams.RandomAccessStreamReference]]:
        ...
    def get_rtf_async() -> winsdk.windows.foundation.IAsyncOperation[str]:
        ...
    def get_storage_items_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[winsdk.windows.storage.IStorageItem]]:
        ...
    def get_text_async() -> winsdk.windows.foundation.IAsyncOperation[str]:
        ...
    def get_text_async(format_id: str) -> winsdk.windows.foundation.IAsyncOperation[str]:
        ...
    def get_uri_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.Uri]:
        ...
    def get_web_link_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.Uri]:
        ...
    def report_operation_completed(value: DataPackageOperation) -> None:
        ...
    def request_access_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]:
        ...
    def request_access_async(enterprise_id: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.security.enterprisedata.ProtectionPolicyEvaluationResult]:
        ...
    def set_accepted_format_id(format_id: str) -> None:
        ...
    def unlock_and_assume_enterprise_identity() -> winsdk.windows.security.enterprisedata.ProtectionPolicyEvaluationResult:
        ...

class DataProviderDeferral(_winrt.Object):
    ...
    def complete() -> None:
        ...

class DataProviderRequest(_winrt.Object):
    ...
    deadline: winsdk.windows.foundation.DateTime
    format_id: str
    def get_deferral() -> DataProviderDeferral:
        ...
    def set_data(value: _winrt.Object) -> None:
        ...

class DataRequest(_winrt.Object):
    ...
    data: DataPackage
    deadline: winsdk.windows.foundation.DateTime
    def fail_with_display_text(value: str) -> None:
        ...
    def get_deferral() -> DataRequestDeferral:
        ...

class DataRequestDeferral(_winrt.Object):
    ...
    def complete() -> None:
        ...

class DataRequestedEventArgs(_winrt.Object):
    ...
    request: DataRequest

class DataTransferManager(_winrt.Object):
    ...
    def get_for_current_view() -> DataTransferManager:
        ...
    def is_supported() -> _winrt.Boolean:
        ...
    def show_share_u_i() -> None:
        ...
    def show_share_u_i(options: ShareUIOptions) -> None:
        ...
    def add_data_requested(handler: winsdk.windows.foundation.TypedEventHandler[DataTransferManager, DataRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_data_requested(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_target_application_chosen(handler: winsdk.windows.foundation.TypedEventHandler[DataTransferManager, TargetApplicationChosenEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_target_application_chosen(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_share_providers_requested(handler: winsdk.windows.foundation.TypedEventHandler[DataTransferManager, ShareProvidersRequestedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_share_providers_requested(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class HtmlFormatHelper(_winrt.Object):
    ...
    def create_html_format(html_fragment: str) -> str:
        ...
    def get_static_fragment(html_format: str) -> str:
        ...

class OperationCompletedEventArgs(_winrt.Object):
    ...
    operation: DataPackageOperation
    accepted_format_id: str

class ShareCompletedEventArgs(_winrt.Object):
    ...
    share_target: ShareTargetInfo

class ShareProvider(_winrt.Object):
    ...
    tag: _winrt.Object
    background_color: winsdk.windows.ui.Color
    display_icon: winsdk.windows.storage.streams.RandomAccessStreamReference
    title: str
    def __init__(self, title: str, display_icon: winsdk.windows.storage.streams.RandomAccessStreamReference, background_color: winsdk.windows.ui.Color, handler: ShareProviderHandler) -> None:
        ...

class ShareProviderOperation(_winrt.Object):
    ...
    data: DataPackageView
    provider: ShareProvider
    def report_completed() -> None:
        ...

class ShareProvidersRequestedEventArgs(_winrt.Object):
    ...
    data: DataPackageView
    providers: winsdk.windows.foundation.collections.IVector[ShareProvider]
    def get_deferral() -> winsdk.windows.foundation.Deferral:
        ...

class ShareTargetInfo(_winrt.Object):
    ...
    app_user_model_id: str
    share_provider: ShareProvider

class ShareUIOptions(_winrt.Object):
    ...
    theme: ShareUITheme
    selection_rect: typing.Optional[winsdk.windows.foundation.Rect]
    def __init__(self, ) -> None:
        ...

class SharedStorageAccessManager(_winrt.Object):
    ...
    def add_file(file: winsdk.windows.storage.IStorageFile) -> str:
        ...
    def redeem_token_for_file_async(token: str) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...
    def remove_file(token: str) -> None:
        ...

class StandardDataFormats(_winrt.Object):
    ...
    bitmap: str
    html: str
    rtf: str
    storage_items: str
    text: str
    uri: str
    application_link: str
    web_link: str
    user_activity_json_array: str

class TargetApplicationChosenEventArgs(_winrt.Object):
    ...
    application_name: str

DataProviderHandler = typing.Callable[[DataProviderRequest], None]

ShareProviderHandler = typing.Callable[[ShareProviderOperation], None]

