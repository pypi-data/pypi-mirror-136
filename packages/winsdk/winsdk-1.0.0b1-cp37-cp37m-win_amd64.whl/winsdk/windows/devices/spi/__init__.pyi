# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.devices.spi.provider
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class SpiMode(enum.IntEnum):
    MODE0 = 0
    MODE1 = 1
    MODE2 = 2
    MODE3 = 3

class SpiSharingMode(enum.IntEnum):
    EXCLUSIVE = 0
    SHARED = 1

class SpiBusInfo(_winrt.Object):
    ...
    chip_select_line_count: _winrt.Int32
    max_clock_frequency: _winrt.Int32
    min_clock_frequency: _winrt.Int32
    supported_data_bit_lengths: winsdk.windows.foundation.collections.IVectorView[_winrt.Int32]

class SpiConnectionSettings(_winrt.Object):
    ...
    sharing_mode: SpiSharingMode
    mode: SpiMode
    data_bit_length: _winrt.Int32
    clock_frequency: _winrt.Int32
    chip_select_line: _winrt.Int32
    def __init__(self, chip_select_line: _winrt.Int32) -> None:
        ...

class SpiController(_winrt.Object):
    ...
    def get_controllers_async(provider: winsdk.windows.devices.spi.provider.ISpiProvider) -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.foundation.collections.IVectorView[SpiController]]:
        ...
    def get_default_async() -> winsdk.windows.foundation.IAsyncOperation[SpiController]:
        ...
    def get_device(settings: SpiConnectionSettings) -> SpiDevice:
        ...

class SpiDevice(winsdk.windows.foundation.IClosable, _winrt.Object):
    ...
    connection_settings: SpiConnectionSettings
    device_id: str
    def close() -> None:
        ...
    def from_id_async(bus_id: str, settings: SpiConnectionSettings) -> winsdk.windows.foundation.IAsyncOperation[SpiDevice]:
        ...
    def get_bus_info(bus_id: str) -> SpiBusInfo:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(friendly_name: str) -> str:
        ...
    def read(buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]:
        ...
    def transfer_full_duplex(write_buffer: typing.Sequence[_winrt.UInt8], read_buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]:
        ...
    def transfer_sequential(write_buffer: typing.Sequence[_winrt.UInt8], read_buffer_size: _winrt.UInt32) -> typing.List[_winrt.UInt8]:
        ...
    def write(buffer: typing.Sequence[_winrt.UInt8]) -> None:
        ...

class ISpiDeviceStatics(_winrt.Object):
    ...
    def from_id_async(bus_id: str, settings: SpiConnectionSettings) -> winsdk.windows.foundation.IAsyncOperation[SpiDevice]:
        ...
    def get_bus_info(bus_id: str) -> SpiBusInfo:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_selector(friendly_name: str) -> str:
        ...

