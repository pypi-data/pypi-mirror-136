# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.data.xml.dom
except Exception:
    pass

try:
    import winsdk.windows.devices.sms
except Exception:
    pass

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.networking
except Exception:
    pass

try:
    import winsdk.windows.networking.connectivity
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

class DataClasses(enum.IntFlag):
    NONE = 0
    GPRS = 0x1
    EDGE = 0x2
    UMTS = 0x4
    HSDPA = 0x8
    HSUPA = 0x10
    LTE_ADVANCED = 0x20
    NEW_RADIO_NON_STANDALONE = 0x40
    NEW_RADIO_STANDALONE = 0x80
    CDMA1X_RTT = 0x10000
    CDMA1X_EVDO = 0x20000
    CDMA1X_EVDO_REV_A = 0x40000
    CDMA1X_EVDV = 0x80000
    CDMA3X_RTT = 0x100000
    CDMA1X_EVDO_REV_B = 0x200000
    CDMA_UMB = 0x400000
    CUSTOM = 0x80000000

class ESimAuthenticationPreference(enum.IntEnum):
    ON_ENTRY = 0
    ON_ACTION = 1
    NEVER = 2

class ESimDiscoverResultKind(enum.IntEnum):
    NONE = 0
    EVENTS = 1
    PROFILE_METADATA = 2

class ESimOperationStatus(enum.IntEnum):
    SUCCESS = 0
    NOT_AUTHORIZED = 1
    NOT_FOUND = 2
    POLICY_VIOLATION = 3
    INSUFFICIENT_SPACE_ON_CARD = 4
    SERVER_FAILURE = 5
    SERVER_NOT_REACHABLE = 6
    TIMEOUT_WAITING_FOR_USER_CONSENT = 7
    INCORRECT_CONFIRMATION_CODE = 8
    CONFIRMATION_CODE_MAX_RETRIES_EXCEEDED = 9
    CARD_REMOVED = 10
    CARD_BUSY = 11
    OTHER = 12
    CARD_GENERAL_FAILURE = 13
    CONFIRMATION_CODE_MISSING = 14
    INVALID_MATCHING_ID = 15
    NO_ELIGIBLE_PROFILE_FOR_THIS_DEVICE = 16
    OPERATION_ABORTED = 17
    EID_MISMATCH = 18
    PROFILE_NOT_AVAILABLE_FOR_NEW_BINDING = 19
    PROFILE_NOT_RELEASED_BY_OPERATOR = 20
    OPERATION_PROHIBITED_BY_PROFILE_CLASS = 21
    PROFILE_NOT_PRESENT = 22
    NO_CORRESPONDING_REQUEST = 23
    TIMEOUT_WAITING_FOR_RESPONSE = 24
    ICCID_ALREADY_EXISTS = 25
    PROFILE_PROCESSING_ERROR = 26
    SERVER_NOT_TRUSTED = 27
    PROFILE_DOWNLOAD_MAX_RETRIES_EXCEEDED = 28

class ESimProfileClass(enum.IntEnum):
    OPERATIONAL = 0
    TEST = 1
    PROVISIONING = 2

class ESimProfileMetadataState(enum.IntEnum):
    UNKNOWN = 0
    WAITING_FOR_INSTALL = 1
    DOWNLOADING = 2
    INSTALLING = 3
    EXPIRED = 4
    REJECTING_DOWNLOAD = 5
    NO_LONGER_AVAILABLE = 6
    DENIED_BY_POLICY = 7

class ESimProfileState(enum.IntEnum):
    UNKNOWN = 0
    DISABLED = 1
    ENABLED = 2
    DELETED = 3

class ESimState(enum.IntEnum):
    UNKNOWN = 0
    IDLE = 1
    REMOVED = 2
    BUSY = 3

class ESimWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPING = 3
    STOPPED = 4

class HotspotAuthenticationResponseCode(enum.IntEnum):
    NO_ERROR = 0
    LOGIN_SUCCEEDED = 50
    LOGIN_FAILED = 100
    RADIUS_SERVER_ERROR = 102
    NETWORK_ADMINISTRATOR_ERROR = 105
    LOGIN_ABORTED = 151
    ACCESS_GATEWAY_INTERNAL_ERROR = 255

class MobileBroadbandAccountWatcherStatus(enum.IntEnum):
    CREATED = 0
    STARTED = 1
    ENUMERATION_COMPLETED = 2
    STOPPED = 3
    ABORTED = 4

class MobileBroadbandDeviceType(enum.IntEnum):
    UNKNOWN = 0
    EMBEDDED = 1
    REMOVABLE = 2
    REMOTE = 3

class MobileBroadbandModemStatus(enum.IntEnum):
    SUCCESS = 0
    OTHER_FAILURE = 1
    BUSY = 2
    NO_DEVICE_SUPPORT = 3

class MobileBroadbandPinFormat(enum.IntEnum):
    UNKNOWN = 0
    NUMERIC = 1
    ALPHANUMERIC = 2

class MobileBroadbandPinLockState(enum.IntEnum):
    UNKNOWN = 0
    UNLOCKED = 1
    PIN_REQUIRED = 2
    PIN_UNBLOCK_KEY_REQUIRED = 3

class MobileBroadbandPinType(enum.IntEnum):
    NONE = 0
    CUSTOM = 1
    PIN1 = 2
    PIN2 = 3
    SIM_PIN = 4
    FIRST_SIM_PIN = 5
    NETWORK_PIN = 6
    NETWORK_SUBSET_PIN = 7
    SERVICE_PROVIDER_PIN = 8
    CORPORATE_PIN = 9
    SUBSIDY_LOCK = 10

class MobileBroadbandRadioState(enum.IntEnum):
    OFF = 0
    ON = 1

class MobileBroadbandSlotState(enum.IntEnum):
    UNMANAGED = 0
    UNKNOWN = 1
    OFF_EMPTY = 2
    OFF = 3
    EMPTY = 4
    NOT_READY = 5
    ACTIVE = 6
    ERROR = 7
    ACTIVE_ESIM = 8
    ACTIVE_ESIM_NO_PROFILE = 9

class MobileBroadbandUiccAppOperationStatus(enum.IntEnum):
    SUCCESS = 0
    INVALID_UICC_FILE_PATH = 1
    ACCESS_CONDITION_NOT_HELD = 2
    UICC_BUSY = 3

class NetworkDeviceStatus(enum.IntEnum):
    DEVICE_NOT_READY = 0
    DEVICE_READY = 1
    SIM_NOT_INSERTED = 2
    BAD_SIM = 3
    DEVICE_HARDWARE_FAILURE = 4
    ACCOUNT_NOT_ACTIVATED = 5
    DEVICE_LOCKED = 6
    DEVICE_BLOCKED = 7

class NetworkOperatorDataUsageNotificationKind(enum.IntEnum):
    DATA_USAGE_PROGRESS = 0

class NetworkOperatorEventMessageType(enum.IntEnum):
    GSM = 0
    CDMA = 1
    USSD = 2
    DATA_PLAN_THRESHOLD_REACHED = 3
    DATA_PLAN_RESET = 4
    DATA_PLAN_DELETED = 5
    PROFILE_CONNECTED = 6
    PROFILE_DISCONNECTED = 7
    REGISTERED_ROAMING = 8
    REGISTERED_HOME = 9
    TETHERING_ENTITLEMENT_CHECK = 10
    TETHERING_OPERATIONAL_STATE_CHANGED = 11
    TETHERING_NUMBER_OF_CLIENTS_CHANGED = 12

class NetworkRegistrationState(enum.IntEnum):
    NONE = 0
    DEREGISTERED = 1
    SEARCHING = 2
    HOME = 3
    ROAMING = 4
    PARTNER = 5
    DENIED = 6

class ProfileMediaType(enum.IntEnum):
    WLAN = 0
    WWAN = 1

class TetheringCapability(enum.IntEnum):
    ENABLED = 0
    DISABLED_BY_GROUP_POLICY = 1
    DISABLED_BY_HARDWARE_LIMITATION = 2
    DISABLED_BY_OPERATOR = 3
    DISABLED_BY_SKU = 4
    DISABLED_BY_REQUIRED_APP_NOT_INSTALLED = 5
    DISABLED_DUE_TO_UNKNOWN_CAUSE = 6
    DISABLED_BY_SYSTEM_CAPABILITY = 7

class TetheringOperationStatus(enum.IntEnum):
    SUCCESS = 0
    UNKNOWN = 1
    MOBILE_BROADBAND_DEVICE_OFF = 2
    WI_FI_DEVICE_OFF = 3
    ENTITLEMENT_CHECK_TIMEOUT = 4
    ENTITLEMENT_CHECK_FAILURE = 5
    OPERATION_IN_PROGRESS = 6
    BLUETOOTH_DEVICE_OFF = 7
    NETWORK_LIMITED_CONNECTIVITY = 8

class TetheringOperationalState(enum.IntEnum):
    UNKNOWN = 0
    ON = 1
    OFF = 2
    IN_TRANSITION = 3

class TetheringWiFiBand(enum.IntEnum):
    AUTO = 0
    TWO_POINT_FOUR_GIGAHERTZ = 1
    FIVE_GIGAHERTZ = 2

class UiccAccessCondition(enum.IntEnum):
    ALWAYS_ALLOWED = 0
    PIN1 = 1
    PIN2 = 2
    PIN3 = 3
    PIN4 = 4
    ADMINISTRATIVE5 = 5
    ADMINISTRATIVE6 = 6
    NEVER_ALLOWED = 7

class UiccAppKind(enum.IntEnum):
    UNKNOWN = 0
    M_F = 1
    M_F_SIM = 2
    M_F_RUIM = 3
    U_SIM = 4
    C_SIM = 5
    I_SIM = 6

class UiccAppRecordKind(enum.IntEnum):
    UNKNOWN = 0
    TRANSPARENT = 1
    RECORD_ORIENTED = 2

class UssdResultCode(enum.IntEnum):
    NO_ACTION_REQUIRED = 0
    ACTION_REQUIRED = 1
    TERMINATED = 2
    OTHER_LOCAL_CLIENT = 3
    OPERATION_NOT_SUPPORTED = 4
    NETWORK_TIMEOUT = 5

class ESimProfileInstallProgress:
    total_size_in_bytes: _winrt.Int32
    installed_size_in_bytes: _winrt.Int32
    def __init__(self, total_size_in_bytes: _winrt.Int32, installed_size_in_bytes: _winrt.Int32) -> None: ...

class ProfileUsage:
    usage_in_megabytes: _winrt.UInt32
    last_sync_time: winsdk.windows.foundation.DateTime
    def __init__(self, usage_in_megabytes: _winrt.UInt32, last_sync_time: winsdk.windows.foundation.DateTime) -> None: ...

class ESim(_winrt.Object):
    ...
    available_memory_in_bytes: typing.Optional[_winrt.Int32]
    eid: str
    firmware_version: str
    mobile_broadband_modem_device_id: str
    policy: ESimPolicy
    state: ESimState
    def delete_profile_async(profile_id: str) -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def discover() -> ESimDiscoverResult:
        ...
    def discover(server_address: str, matching_id: str) -> ESimDiscoverResult:
        ...
    def discover_async() -> winsdk.windows.foundation.IAsyncOperation[ESimDiscoverResult]:
        ...
    def discover_async(server_address: str, matching_id: str) -> winsdk.windows.foundation.IAsyncOperation[ESimDiscoverResult]:
        ...
    def download_profile_metadata_async(activation_code: str) -> winsdk.windows.foundation.IAsyncOperation[ESimDownloadProfileMetadataResult]:
        ...
    def get_profiles() -> winsdk.windows.foundation.collections.IVectorView[ESimProfile]:
        ...
    def reset_async() -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def add_profile_changed(handler: winsdk.windows.foundation.TypedEventHandler[ESim, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_profile_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class ESimAddedEventArgs(_winrt.Object):
    ...
    e_sim: ESim

class ESimDiscoverEvent(_winrt.Object):
    ...
    matching_id: str
    rsp_server_address: str

class ESimDiscoverResult(_winrt.Object):
    ...
    events: winsdk.windows.foundation.collections.IVectorView[ESimDiscoverEvent]
    kind: ESimDiscoverResultKind
    profile_metadata: ESimProfileMetadata
    result: ESimOperationResult

class ESimDownloadProfileMetadataResult(_winrt.Object):
    ...
    profile_metadata: ESimProfileMetadata
    result: ESimOperationResult

class ESimManager(_winrt.Object):
    ...
    service_info: ESimServiceInfo
    def try_create_e_sim_watcher() -> ESimWatcher:
        ...
    def add_service_info_changed(handler: winsdk.windows.foundation.EventHandler[_winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_service_info_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class ESimOperationResult(_winrt.Object):
    ...
    status: ESimOperationStatus

class ESimPolicy(_winrt.Object):
    ...
    should_enable_managing_ui: _winrt.Boolean

class ESimProfile(_winrt.Object):
    ...
    class: ESimProfileClass
    id: str
    nickname: str
    policy: ESimProfilePolicy
    provider_icon: winsdk.windows.storage.streams.IRandomAccessStreamReference
    provider_id: str
    provider_name: str
    state: ESimProfileState
    def disable_async() -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def enable_async() -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def set_nickname_async(new_nickname: str) -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...

class ESimProfileMetadata(_winrt.Object):
    ...
    id: str
    is_confirmation_code_required: _winrt.Boolean
    policy: ESimProfilePolicy
    provider_icon: winsdk.windows.storage.streams.IRandomAccessStreamReference
    provider_id: str
    provider_name: str
    state: ESimProfileMetadataState
    def confirm_install_async() -> winsdk.windows.foundation.IAsyncOperationWithProgress[ESimOperationResult, ESimProfileInstallProgress]:
        ...
    def confirm_install_async(confirmation_code: str) -> winsdk.windows.foundation.IAsyncOperationWithProgress[ESimOperationResult, ESimProfileInstallProgress]:
        ...
    def deny_install_async() -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def postpone_install_async() -> winsdk.windows.foundation.IAsyncOperation[ESimOperationResult]:
        ...
    def add_state_changed(handler: winsdk.windows.foundation.TypedEventHandler[ESimProfileMetadata, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_state_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class ESimProfilePolicy(_winrt.Object):
    ...
    can_delete: _winrt.Boolean
    can_disable: _winrt.Boolean
    is_managed_by_enterprise: _winrt.Boolean

class ESimRemovedEventArgs(_winrt.Object):
    ...
    e_sim: ESim

class ESimServiceInfo(_winrt.Object):
    ...
    authentication_preference: ESimAuthenticationPreference
    is_e_sim_ui_enabled: _winrt.Boolean

class ESimUpdatedEventArgs(_winrt.Object):
    ...
    e_sim: ESim

class ESimWatcher(_winrt.Object):
    ...
    status: ESimWatcherStatus
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_added(handler: winsdk.windows.foundation.TypedEventHandler[ESimWatcher, ESimAddedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_added(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winsdk.windows.foundation.TypedEventHandler[ESimWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_removed(handler: winsdk.windows.foundation.TypedEventHandler[ESimWatcher, ESimRemovedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_removed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winsdk.windows.foundation.TypedEventHandler[ESimWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_updated(handler: winsdk.windows.foundation.TypedEventHandler[ESimWatcher, ESimUpdatedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_updated(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class HotspotAuthenticationContext(_winrt.Object):
    ...
    authentication_url: winsdk.windows.foundation.Uri
    network_adapter: winsdk.windows.networking.connectivity.NetworkAdapter
    redirect_message_url: winsdk.windows.foundation.Uri
    redirect_message_xml: winsdk.windows.data.xml.dom.XmlDocument
    wireless_network_id: _winrt.UInt8
    def abort_authentication(mark_as_manual: _winrt.Boolean) -> None:
        ...
    def issue_credentials(user_name: str, password: str, extra_parameters: str, mark_as_manual_connect_on_failure: _winrt.Boolean) -> None:
        ...
    def issue_credentials_async(user_name: str, password: str, extra_parameters: str, mark_as_manual_connect_on_failure: _winrt.Boolean) -> winsdk.windows.foundation.IAsyncOperation[HotspotCredentialsAuthenticationResult]:
        ...
    def skip_authentication() -> None:
        ...
    def trigger_attention_required(package_relative_application_id: str, application_parameters: str) -> None:
        ...
    def try_get_authentication_context(even_token: str) -> typing.Tuple[_winrt.Boolean, HotspotAuthenticationContext]:
        ...

class HotspotAuthenticationEventDetails(_winrt.Object):
    ...
    event_token: str

class HotspotCredentialsAuthenticationResult(_winrt.Object):
    ...
    authentication_reply_xml: winsdk.windows.data.xml.dom.XmlDocument
    has_network_error_occurred: _winrt.Boolean
    logoff_url: winsdk.windows.foundation.Uri
    response_code: HotspotAuthenticationResponseCode

class KnownCSimFilePaths(_winrt.Object):
    ...
    e_f_spn: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid1: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid2: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]

class KnownRuimFilePaths(_winrt.Object):
    ...
    e_f_spn: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid1: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid2: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]

class KnownSimFilePaths(_winrt.Object):
    ...
    e_f_ons: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    e_f_spn: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid1: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid2: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]

class KnownUSimFilePaths(_winrt.Object):
    ...
    e_f_opl: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    e_f_pnn: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    e_f_spn: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid1: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    gid2: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]

class MobileBroadbandAccount(_winrt.Object):
    ...
    current_device_information: MobileBroadbandDeviceInformation
    current_network: MobileBroadbandNetwork
    network_account_id: str
    service_provider_guid: uuid.UUID
    service_provider_name: str
    account_experience_url: winsdk.windows.foundation.Uri
    available_network_account_ids: winsdk.windows.foundation.collections.IVectorView[str]
    def create_from_network_account_id(network_account_id: str) -> MobileBroadbandAccount:
        ...
    def get_connection_profiles() -> winsdk.windows.foundation.collections.IVectorView[winsdk.windows.networking.connectivity.ConnectionProfile]:
        ...

class MobileBroadbandAccountEventArgs(_winrt.Object):
    ...
    network_account_id: str

class MobileBroadbandAccountUpdatedEventArgs(_winrt.Object):
    ...
    has_device_information_changed: _winrt.Boolean
    has_network_changed: _winrt.Boolean
    network_account_id: str

class MobileBroadbandAccountWatcher(_winrt.Object):
    ...
    status: MobileBroadbandAccountWatcherStatus
    def __init__(self, ) -> None:
        ...
    def start() -> None:
        ...
    def stop() -> None:
        ...
    def add_account_added(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_account_added(cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_account_removed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_account_removed(cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_account_updated(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandAccountWatcher, MobileBroadbandAccountUpdatedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_account_updated(cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_enumeration_completed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandAccountWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_enumeration_completed(cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_stopped(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandAccountWatcher, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_stopped(cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MobileBroadbandAntennaSar(_winrt.Object):
    ...
    antenna_index: _winrt.Int32
    sar_backoff_index: _winrt.Int32
    def __init__(self, antenna_index: _winrt.Int32, sar_backoff_index: _winrt.Int32) -> None:
        ...

class MobileBroadbandCellCdma(_winrt.Object):
    ...
    base_station_id: typing.Optional[_winrt.Int32]
    base_station_last_broadcast_gps_time: typing.Optional[winsdk.windows.foundation.TimeSpan]
    base_station_latitude: typing.Optional[_winrt.Double]
    base_station_longitude: typing.Optional[_winrt.Double]
    base_station_p_n_code: typing.Optional[_winrt.Int32]
    network_id: typing.Optional[_winrt.Int32]
    pilot_signal_strength_in_d_b: typing.Optional[_winrt.Double]
    system_id: typing.Optional[_winrt.Int32]

class MobileBroadbandCellGsm(_winrt.Object):
    ...
    base_station_id: typing.Optional[_winrt.Int32]
    cell_id: typing.Optional[_winrt.Int32]
    channel_number: typing.Optional[_winrt.Int32]
    location_area_code: typing.Optional[_winrt.Int32]
    provider_id: str
    received_signal_strength_in_d_bm: typing.Optional[_winrt.Double]
    timing_advance_in_bit_periods: typing.Optional[_winrt.Int32]

class MobileBroadbandCellLte(_winrt.Object):
    ...
    cell_id: typing.Optional[_winrt.Int32]
    channel_number: typing.Optional[_winrt.Int32]
    physical_cell_id: typing.Optional[_winrt.Int32]
    provider_id: str
    reference_signal_received_power_in_d_bm: typing.Optional[_winrt.Double]
    reference_signal_received_quality_in_d_bm: typing.Optional[_winrt.Double]
    timing_advance_in_bit_periods: typing.Optional[_winrt.Int32]
    tracking_area_code: typing.Optional[_winrt.Int32]

class MobileBroadbandCellNR(_winrt.Object):
    ...
    cell_id: typing.Optional[_winrt.Int64]
    channel_number: typing.Optional[_winrt.Int32]
    physical_cell_id: typing.Optional[_winrt.Int32]
    provider_id: str
    reference_signal_received_power_in_d_bm: typing.Optional[_winrt.Double]
    reference_signal_received_quality_in_d_bm: typing.Optional[_winrt.Double]
    signal_to_noise_ratio_in_d_b: typing.Optional[_winrt.Double]
    timing_advance_in_nanoseconds: typing.Optional[_winrt.Int32]
    tracking_area_code: typing.Optional[_winrt.Int32]

class MobileBroadbandCellTdscdma(_winrt.Object):
    ...
    cell_id: typing.Optional[_winrt.Int32]
    cell_parameter_id: typing.Optional[_winrt.Int32]
    channel_number: typing.Optional[_winrt.Int32]
    location_area_code: typing.Optional[_winrt.Int32]
    path_loss_in_d_b: typing.Optional[_winrt.Double]
    provider_id: str
    received_signal_code_power_in_d_bm: typing.Optional[_winrt.Double]
    timing_advance_in_bit_periods: typing.Optional[_winrt.Int32]

class MobileBroadbandCellUmts(_winrt.Object):
    ...
    cell_id: typing.Optional[_winrt.Int32]
    channel_number: typing.Optional[_winrt.Int32]
    location_area_code: typing.Optional[_winrt.Int32]
    path_loss_in_d_b: typing.Optional[_winrt.Double]
    primary_scrambling_code: typing.Optional[_winrt.Int32]
    provider_id: str
    received_signal_code_power_in_d_bm: typing.Optional[_winrt.Double]
    signal_to_noise_ratio_in_d_b: typing.Optional[_winrt.Double]

class MobileBroadbandCellsInfo(_winrt.Object):
    ...
    neighboring_cells_cdma: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellCdma]
    neighboring_cells_gsm: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellGsm]
    neighboring_cells_lte: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellLte]
    neighboring_cells_tdscdma: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellTdscdma]
    neighboring_cells_umts: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellUmts]
    serving_cells_cdma: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellCdma]
    serving_cells_gsm: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellGsm]
    serving_cells_lte: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellLte]
    serving_cells_tdscdma: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellTdscdma]
    serving_cells_umts: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellUmts]
    neighboring_cells_n_r: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellNR]
    serving_cells_n_r: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandCellNR]

class MobileBroadbandCurrentSlotIndexChangedEventArgs(_winrt.Object):
    ...
    current_slot_index: _winrt.Int32

class MobileBroadbandDeviceInformation(_winrt.Object):
    ...
    cellular_class: winsdk.windows.devices.sms.CellularClass
    current_radio_state: MobileBroadbandRadioState
    custom_data_class: str
    data_classes: DataClasses
    device_id: str
    device_type: MobileBroadbandDeviceType
    firmware_information: str
    manufacturer: str
    mobile_equipment_id: str
    model: str
    network_device_status: NetworkDeviceStatus
    sim_icc_id: str
    subscriber_id: str
    telephone_numbers: winsdk.windows.foundation.collections.IVectorView[str]
    pin_manager: MobileBroadbandPinManager
    revision: str
    serial_number: str
    sim_gid1: str
    sim_pnn: str
    sim_spn: str
    slot_manager: MobileBroadbandSlotManager

class MobileBroadbandDeviceService(_winrt.Object):
    ...
    device_service_id: uuid.UUID
    supported_commands: winsdk.windows.foundation.collections.IVectorView[_winrt.UInt32]
    def open_command_session() -> MobileBroadbandDeviceServiceCommandSession:
        ...
    def open_data_session() -> MobileBroadbandDeviceServiceDataSession:
        ...

class MobileBroadbandDeviceServiceCommandResult(_winrt.Object):
    ...
    response_data: winsdk.windows.storage.streams.IBuffer
    status_code: _winrt.UInt32

class MobileBroadbandDeviceServiceCommandSession(_winrt.Object):
    ...
    def close_session() -> None:
        ...
    def send_query_command_async(command_id: _winrt.UInt32, data: winsdk.windows.storage.streams.IBuffer) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandDeviceServiceCommandResult]:
        ...
    def send_set_command_async(command_id: _winrt.UInt32, data: winsdk.windows.storage.streams.IBuffer) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandDeviceServiceCommandResult]:
        ...

class MobileBroadbandDeviceServiceDataReceivedEventArgs(_winrt.Object):
    ...
    received_data: winsdk.windows.storage.streams.IBuffer

class MobileBroadbandDeviceServiceDataSession(_winrt.Object):
    ...
    def close_session() -> None:
        ...
    def write_data_async(value: winsdk.windows.storage.streams.IBuffer) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def add_data_received(event_handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandDeviceServiceDataSession, MobileBroadbandDeviceServiceDataReceivedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_data_received(event_cookie: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MobileBroadbandDeviceServiceInformation(_winrt.Object):
    ...
    device_service_id: uuid.UUID
    is_data_read_supported: _winrt.Boolean
    is_data_write_supported: _winrt.Boolean

class MobileBroadbandDeviceServiceTriggerDetails(_winrt.Object):
    ...
    device_id: str
    device_service_id: uuid.UUID
    received_data: winsdk.windows.storage.streams.IBuffer

class MobileBroadbandModem(_winrt.Object):
    ...
    current_account: MobileBroadbandAccount
    current_network: MobileBroadbandNetwork
    device_information: MobileBroadbandDeviceInformation
    device_services: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandDeviceServiceInformation]
    is_reset_supported: _winrt.Boolean
    max_device_service_command_size_in_bytes: _winrt.UInt32
    max_device_service_data_size_in_bytes: _winrt.UInt32
    is_in_emergency_call_mode: _winrt.Boolean
    def from_id(device_id: str) -> MobileBroadbandModem:
        ...
    def get_current_configuration_async() -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandModemConfiguration]:
        ...
    def get_default() -> MobileBroadbandModem:
        ...
    def get_device_selector() -> str:
        ...
    def get_device_service(device_service_id: uuid.UUID) -> MobileBroadbandDeviceService:
        ...
    def get_is_passthrough_enabled_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]:
        ...
    def reset_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def set_is_passthrough_enabled_async(value: _winrt.Boolean) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandModemStatus]:
        ...
    def try_get_pco_async() -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPco]:
        ...
    def add_is_in_emergency_call_mode_changed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandModem, _winrt.Object]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_is_in_emergency_call_mode_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MobileBroadbandModemConfiguration(_winrt.Object):
    ...
    home_provider_id: str
    home_provider_name: str
    uicc: MobileBroadbandUicc
    sar_manager: MobileBroadbandSarManager

class MobileBroadbandModemIsolation(_winrt.Object):
    ...
    def __init__(self, modem_device_id: str, rule_group_id: str) -> None:
        ...
    def add_allowed_host(host: winsdk.windows.networking.HostName) -> None:
        ...
    def add_allowed_host_range(first: winsdk.windows.networking.HostName, last: winsdk.windows.networking.HostName) -> None:
        ...
    def apply_configuration_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def clear_configuration_async() -> winsdk.windows.foundation.IAsyncAction:
        ...

class MobileBroadbandNetwork(_winrt.Object):
    ...
    access_point_name: str
    activation_network_error: _winrt.UInt32
    network_adapter: winsdk.windows.networking.connectivity.NetworkAdapter
    network_registration_state: NetworkRegistrationState
    packet_attach_network_error: _winrt.UInt32
    registered_data_class: DataClasses
    registered_provider_id: str
    registered_provider_name: str
    registration_network_error: _winrt.UInt32
    registration_uicc_apps: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandUiccApp]
    def get_cells_info_async() -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandCellsInfo]:
        ...
    def get_voice_call_support_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]:
        ...
    def show_connection_u_i() -> None:
        ...

class MobileBroadbandNetworkRegistrationStateChange(_winrt.Object):
    ...
    device_id: str
    network: MobileBroadbandNetwork

class MobileBroadbandNetworkRegistrationStateChangeTriggerDetails(_winrt.Object):
    ...
    network_registration_state_changes: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandNetworkRegistrationStateChange]

class MobileBroadbandPco(_winrt.Object):
    ...
    data: winsdk.windows.storage.streams.IBuffer
    device_id: str
    is_complete: _winrt.Boolean

class MobileBroadbandPcoDataChangeTriggerDetails(_winrt.Object):
    ...
    updated_data: MobileBroadbandPco

class MobileBroadbandPin(_winrt.Object):
    ...
    attempts_remaining: _winrt.UInt32
    enabled: _winrt.Boolean
    format: MobileBroadbandPinFormat
    lock_state: MobileBroadbandPinLockState
    max_length: _winrt.UInt32
    min_length: _winrt.UInt32
    type: MobileBroadbandPinType
    def change_async(current_pin: str, new_pin: str) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPinOperationResult]:
        ...
    def disable_async(current_pin: str) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPinOperationResult]:
        ...
    def enable_async(current_pin: str) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPinOperationResult]:
        ...
    def enter_async(current_pin: str) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPinOperationResult]:
        ...
    def unblock_async(pin_unblock_key: str, new_pin: str) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandPinOperationResult]:
        ...

class MobileBroadbandPinLockStateChange(_winrt.Object):
    ...
    device_id: str
    pin_lock_state: MobileBroadbandPinLockState
    pin_type: MobileBroadbandPinType

class MobileBroadbandPinLockStateChangeTriggerDetails(_winrt.Object):
    ...
    pin_lock_state_changes: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandPinLockStateChange]

class MobileBroadbandPinManager(_winrt.Object):
    ...
    supported_pins: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandPinType]
    def get_pin(pin_type: MobileBroadbandPinType) -> MobileBroadbandPin:
        ...

class MobileBroadbandPinOperationResult(_winrt.Object):
    ...
    attempts_remaining: _winrt.UInt32
    is_successful: _winrt.Boolean

class MobileBroadbandRadioStateChange(_winrt.Object):
    ...
    device_id: str
    radio_state: MobileBroadbandRadioState

class MobileBroadbandRadioStateChangeTriggerDetails(_winrt.Object):
    ...
    radio_state_changes: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandRadioStateChange]

class MobileBroadbandSarManager(_winrt.Object):
    ...
    antennas: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandAntennaSar]
    hysteresis_timer_period: winsdk.windows.foundation.TimeSpan
    is_backoff_enabled: _winrt.Boolean
    is_sar_controlled_by_hardware: _winrt.Boolean
    is_wi_fi_hardware_integrated: _winrt.Boolean
    def disable_backoff_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def enable_backoff_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def get_is_transmitting_async() -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]:
        ...
    def revert_sar_to_hardware_control_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def set_configuration_async(antennas: typing.Iterable[MobileBroadbandAntennaSar]) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def set_transmission_state_changed_hysteresis_async(timer_period: winsdk.windows.foundation.TimeSpan) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def start_transmission_state_monitoring() -> None:
        ...
    def stop_transmission_state_monitoring() -> None:
        ...
    def add_transmission_state_changed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandSarManager, MobileBroadbandTransmissionStateChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_transmission_state_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MobileBroadbandSlotInfo(_winrt.Object):
    ...
    index: _winrt.Int32
    state: MobileBroadbandSlotState

class MobileBroadbandSlotInfoChangedEventArgs(_winrt.Object):
    ...
    slot_info: MobileBroadbandSlotInfo

class MobileBroadbandSlotManager(_winrt.Object):
    ...
    current_slot_index: _winrt.Int32
    slot_infos: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandSlotInfo]
    def set_current_slot(slot_index: _winrt.Int32) -> MobileBroadbandModemStatus:
        ...
    def set_current_slot_async(slot_index: _winrt.Int32) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandModemStatus]:
        ...
    def add_current_slot_index_changed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandSlotManager, MobileBroadbandCurrentSlotIndexChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_current_slot_index_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...
    def add_slot_info_changed(handler: winsdk.windows.foundation.TypedEventHandler[MobileBroadbandSlotManager, MobileBroadbandSlotInfoChangedEventArgs]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_slot_info_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class MobileBroadbandTransmissionStateChangedEventArgs(_winrt.Object):
    ...
    is_transmitting: _winrt.Boolean

class MobileBroadbandUicc(_winrt.Object):
    ...
    sim_icc_id: str
    def get_uicc_apps_async() -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandUiccAppsResult]:
        ...

class MobileBroadbandUiccApp(_winrt.Object):
    ...
    id: winsdk.windows.storage.streams.IBuffer
    kind: UiccAppKind
    def get_record_details_async(uicc_file_path: typing.Iterable[_winrt.UInt32]) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandUiccAppRecordDetailsResult]:
        ...
    def read_record_async(uicc_file_path: typing.Iterable[_winrt.UInt32], record_index: _winrt.Int32) -> winsdk.windows.foundation.IAsyncOperation[MobileBroadbandUiccAppReadRecordResult]:
        ...

class MobileBroadbandUiccAppReadRecordResult(_winrt.Object):
    ...
    data: winsdk.windows.storage.streams.IBuffer
    status: MobileBroadbandUiccAppOperationStatus

class MobileBroadbandUiccAppRecordDetailsResult(_winrt.Object):
    ...
    kind: UiccAppRecordKind
    read_access_condition: UiccAccessCondition
    record_count: _winrt.Int32
    record_size: _winrt.Int32
    status: MobileBroadbandUiccAppOperationStatus
    write_access_condition: UiccAccessCondition

class MobileBroadbandUiccAppsResult(_winrt.Object):
    ...
    status: MobileBroadbandUiccAppOperationStatus
    uicc_apps: winsdk.windows.foundation.collections.IVectorView[MobileBroadbandUiccApp]

class NetworkOperatorDataUsageTriggerDetails(_winrt.Object):
    ...
    notification_kind: NetworkOperatorDataUsageNotificationKind

class NetworkOperatorTetheringAccessPointConfiguration(_winrt.Object):
    ...
    ssid: str
    passphrase: str
    band: TetheringWiFiBand
    def __init__(self, ) -> None:
        ...
    def is_band_supported(band: TetheringWiFiBand) -> _winrt.Boolean:
        ...
    def is_band_supported_async(band: TetheringWiFiBand) -> winsdk.windows.foundation.IAsyncOperation[_winrt.Boolean]:
        ...

class NetworkOperatorTetheringClient(_winrt.Object):
    ...
    host_names: winsdk.windows.foundation.collections.IVectorView[winsdk.windows.networking.HostName]
    mac_address: str

class NetworkOperatorTetheringManager(_winrt.Object):
    ...
    client_count: _winrt.UInt32
    max_client_count: _winrt.UInt32
    tethering_operational_state: TetheringOperationalState
    def configure_access_point_async(configuration: NetworkOperatorTetheringAccessPointConfiguration) -> winsdk.windows.foundation.IAsyncAction:
        ...
    def create_from_connection_profile(profile: winsdk.windows.networking.connectivity.ConnectionProfile) -> NetworkOperatorTetheringManager:
        ...
    def create_from_connection_profile(profile: winsdk.windows.networking.connectivity.ConnectionProfile, adapter: winsdk.windows.networking.connectivity.NetworkAdapter) -> NetworkOperatorTetheringManager:
        ...
    def create_from_network_account_id(network_account_id: str) -> NetworkOperatorTetheringManager:
        ...
    def disable_no_connections_timeout() -> None:
        ...
    def disable_no_connections_timeout_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def enable_no_connections_timeout() -> None:
        ...
    def enable_no_connections_timeout_async() -> winsdk.windows.foundation.IAsyncAction:
        ...
    def get_current_access_point_configuration() -> NetworkOperatorTetheringAccessPointConfiguration:
        ...
    def get_tethering_capability(network_account_id: str) -> TetheringCapability:
        ...
    def get_tethering_capability_from_connection_profile(profile: winsdk.windows.networking.connectivity.ConnectionProfile) -> TetheringCapability:
        ...
    def get_tethering_clients() -> winsdk.windows.foundation.collections.IVectorView[NetworkOperatorTetheringClient]:
        ...
    def is_no_connections_timeout_enabled() -> _winrt.Boolean:
        ...
    def start_tethering_async() -> winsdk.windows.foundation.IAsyncOperation[NetworkOperatorTetheringOperationResult]:
        ...
    def stop_tethering_async() -> winsdk.windows.foundation.IAsyncOperation[NetworkOperatorTetheringOperationResult]:
        ...

class NetworkOperatorTetheringOperationResult(_winrt.Object):
    ...
    additional_error_message: str
    status: TetheringOperationStatus

class ProvisionFromXmlDocumentResults(_winrt.Object):
    ...
    all_elements_provisioned: _winrt.Boolean
    provision_results_xml: str

class ProvisionedProfile(_winrt.Object):
    ...
    def update_cost(value: winsdk.windows.networking.connectivity.NetworkCostType) -> None:
        ...
    def update_usage(value: ProfileUsage) -> None:
        ...

class ProvisioningAgent(_winrt.Object):
    ...
    def __init__(self, ) -> None:
        ...
    def create_from_network_account_id(network_account_id: str) -> ProvisioningAgent:
        ...
    def get_provisioned_profile(media_type: ProfileMediaType, profile_name: str) -> ProvisionedProfile:
        ...
    def provision_from_xml_document_async(provisioning_xml_document: str) -> winsdk.windows.foundation.IAsyncOperation[ProvisionFromXmlDocumentResults]:
        ...

class TetheringEntitlementCheckTriggerDetails(_winrt.Object):
    ...
    network_account_id: str
    def allow_tethering() -> None:
        ...
    def deny_tethering(entitlement_failure_reason: str) -> None:
        ...

class UssdMessage(_winrt.Object):
    ...
    payload_as_text: str
    data_coding_scheme: _winrt.UInt8
    def __init__(self, message_text: str) -> None:
        ...
    def get_payload() -> _winrt.UInt8:
        ...
    def set_payload(value: typing.Sequence[_winrt.UInt8]) -> None:
        ...

class UssdReply(_winrt.Object):
    ...
    message: UssdMessage
    result_code: UssdResultCode

class UssdSession(_winrt.Object):
    ...
    def close() -> None:
        ...
    def create_from_network_account_id(network_account_id: str) -> UssdSession:
        ...
    def create_from_network_interface_id(network_interface_id: str) -> UssdSession:
        ...
    def send_message_and_get_reply_async(message: UssdMessage) -> winsdk.windows.foundation.IAsyncOperation[UssdReply]:
        ...

