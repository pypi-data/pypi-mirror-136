# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

try:
    import winsdk.windows.storage
except Exception:
    pass

try:
    import winsdk.windows.storage.streams
except Exception:
    pass

try:
    import winsdk.windows.ui
except Exception:
    pass

class ResourceCandidateKind(enum.IntEnum):
    STRING = 0
    FILE = 1
    EMBEDDED_DATA = 2

class ResourceQualifierPersistence(enum.IntEnum):
    NONE = 0
    LOCAL_MACHINE = 1

class ResourceLayoutInfo:
    major_version: _winrt.UInt32
    minor_version: _winrt.UInt32
    resource_subtree_count: _winrt.UInt32
    named_resource_count: _winrt.UInt32
    checksum: _winrt.Int32
    def __init__(self, major_version: _winrt.UInt32, minor_version: _winrt.UInt32, resource_subtree_count: _winrt.UInt32, named_resource_count: _winrt.UInt32, checksum: _winrt.Int32) -> None: ...

class NamedResource(_winrt.Object):
    ...
    candidates: winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]
    uri: winsdk.windows.foundation.Uri
    def resolve() -> ResourceCandidate:
        ...
    def resolve(resource_context: ResourceContext) -> ResourceCandidate:
        ...
    def resolve_all() -> winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]:
        ...
    def resolve_all(resource_context: ResourceContext) -> winsdk.windows.foundation.collections.IVectorView[ResourceCandidate]:
        ...

class ResourceCandidate(_winrt.Object):
    ...
    is_default: _winrt.Boolean
    is_match: _winrt.Boolean
    is_match_as_default: _winrt.Boolean
    qualifiers: winsdk.windows.foundation.collections.IVectorView[ResourceQualifier]
    value_as_string: str
    kind: ResourceCandidateKind
    def get_qualifier_value(qualifier_name: str) -> str:
        ...
    def get_value_as_file_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.StorageFile]:
        ...
    def get_value_as_stream_async() -> winsdk.windows.foundation.IAsyncOperation[winsdk.windows.storage.streams.IRandomAccessStream]:
        ...

class ResourceCandidateVectorView(winsdk.windows.foundation.collections.IVectorView[ResourceCandidate], winsdk.windows.foundation.collections.IIterable[ResourceCandidate], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[ResourceCandidate]:
        ...
    def get_at(index: _winrt.UInt32) -> ResourceCandidate:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[ResourceCandidate]]:
        ...
    def index_of(value: ResourceCandidate) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...

class ResourceContext(_winrt.Object):
    ...
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    qualifier_values: winsdk.windows.foundation.collections.IObservableMap[str, str]
    def __init__(self, ) -> None:
        ...
    def clone() -> ResourceContext:
        ...
    def create_matching_context(result: typing.Iterable[ResourceQualifier]) -> ResourceContext:
        ...
    def get_for_current_view() -> ResourceContext:
        ...
    def get_for_u_i_context(context: winsdk.windows.ui.UIContext) -> ResourceContext:
        ...
    def get_for_view_independent_use() -> ResourceContext:
        ...
    def override_to_match(result: typing.Iterable[ResourceQualifier]) -> None:
        ...
    def reset() -> None:
        ...
    def reset(qualifier_names: typing.Iterable[str]) -> None:
        ...
    def reset_global_qualifier_values() -> None:
        ...
    def reset_global_qualifier_values(qualifier_names: typing.Iterable[str]) -> None:
        ...
    def set_global_qualifier_value(key: str, value: str) -> None:
        ...
    def set_global_qualifier_value(key: str, value: str, persistence: ResourceQualifierPersistence) -> None:
        ...

class ResourceContextLanguagesVectorView(winsdk.windows.foundation.collections.IVectorView[str], winsdk.windows.foundation.collections.IIterable[str], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[str]:
        ...
    def get_at(index: _winrt.UInt32) -> str:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[str]]:
        ...
    def index_of(value: str) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...

class ResourceManager(_winrt.Object):
    ...
    all_resource_maps: winsdk.windows.foundation.collections.IMapView[str, ResourceMap]
    default_context: ResourceContext
    main_resource_map: ResourceMap
    current: ResourceManager
    def get_all_named_resources_for_package(package_name: str, resource_layout_info: ResourceLayoutInfo) -> winsdk.windows.foundation.collections.IVectorView[NamedResource]:
        ...
    def get_all_subtrees_for_package(package_name: str, resource_layout_info: ResourceLayoutInfo) -> winsdk.windows.foundation.collections.IVectorView[ResourceMap]:
        ...
    def is_resource_reference(resource_reference: str) -> _winrt.Boolean:
        ...
    def load_pri_files(files: typing.Iterable[winsdk.windows.storage.IStorageFile]) -> None:
        ...
    def unload_pri_files(files: typing.Iterable[winsdk.windows.storage.IStorageFile]) -> None:
        ...

class ResourceMap(winsdk.windows.foundation.collections.IMapView[str, NamedResource], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]], _winrt.Object):
    ...
    uri: winsdk.windows.foundation.Uri
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]]:
        ...
    def get_subtree(reference: str) -> ResourceMap:
        ...
    def get_value(resource: str) -> ResourceCandidate:
        ...
    def get_value(resource: str, context: ResourceContext) -> ResourceCandidate:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> NamedResource:
        ...
    def split() -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, NamedResource], winsdk.windows.foundation.collections.IMapView[str, NamedResource]]:
        ...

class ResourceMapIterator(winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]], _winrt.Object):
    ...
    current: winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]
    has_current: _winrt.Boolean
    def get_many(items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.foundation.collections.IKeyValuePair[str, NamedResource]]]:
        ...
    def move_next() -> _winrt.Boolean:
        ...

class ResourceMapMapView(winsdk.windows.foundation.collections.IMapView[str, ResourceMap], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> ResourceMap:
        ...
    def split() -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, ResourceMap], winsdk.windows.foundation.collections.IMapView[str, ResourceMap]]:
        ...

class ResourceMapMapViewIterator(winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]], _winrt.Object):
    ...
    current: winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]
    has_current: _winrt.Boolean
    def get_many(items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[winsdk.windows.foundation.collections.IKeyValuePair[str, ResourceMap]]]:
        ...
    def move_next() -> _winrt.Boolean:
        ...

class ResourceQualifier(_winrt.Object):
    ...
    is_default: _winrt.Boolean
    is_match: _winrt.Boolean
    qualifier_name: str
    qualifier_value: str
    score: _winrt.Double

class ResourceQualifierMapView(winsdk.windows.foundation.collections.IMapView[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> str:
        ...
    def split() -> typing.Tuple[winsdk.windows.foundation.collections.IMapView[str, str], winsdk.windows.foundation.collections.IMapView[str, str]]:
        ...

class ResourceQualifierObservableMap(winsdk.windows.foundation.collections.IObservableMap[str, str], winsdk.windows.foundation.collections.IMap[str, str], winsdk.windows.foundation.collections.IIterable[winsdk.windows.foundation.collections.IKeyValuePair[str, str]], _winrt.Object):
    ...
    size: _winrt.UInt32
    def clear() -> None:
        ...
    def first() -> winsdk.windows.foundation.collections.IIterator[winsdk.windows.foundation.collections.IKeyValuePair[str, str]]:
        ...
    def get_view() -> winsdk.windows.foundation.collections.IMapView[str, str]:
        ...
    def has_key(key: str) -> _winrt.Boolean:
        ...
    def insert(key: str, value: str) -> _winrt.Boolean:
        ...
    def lookup(key: str) -> str:
        ...
    def remove(key: str) -> None:
        ...
    def add_map_changed(vhnd: winsdk.windows.foundation.collections.MapChangedEventHandler[str, str]) -> winsdk.windows.foundation.EventRegistrationToken:
        ...
    def remove_map_changed(token: winsdk.windows.foundation.EventRegistrationToken) -> None:
        ...

class ResourceQualifierVectorView(winsdk.windows.foundation.collections.IVectorView[ResourceQualifier], winsdk.windows.foundation.collections.IIterable[ResourceQualifier], _winrt.Object):
    ...
    size: _winrt.UInt32
    def first() -> winsdk.windows.foundation.collections.IIterator[ResourceQualifier]:
        ...
    def get_at(index: _winrt.UInt32) -> ResourceQualifier:
        ...
    def get_many(start_index: _winrt.UInt32, items_size: _winrt.UInt32) -> typing.Tuple[_winrt.UInt32, typing.List[ResourceQualifier]]:
        ...
    def index_of(value: ResourceQualifier) -> typing.Tuple[_winrt.Boolean, _winrt.UInt32]:
        ...

