# WARNING: Please don't edit this file. It was generated by Python/WinRT v1.0.0-beta.1

import enum
import sys
import types
import typing
import uuid

import winsdk._winrt as _winrt

try:
    import winsdk.windows.foundation
except Exception:
    pass

try:
    import winsdk.windows.foundation.collections
except Exception:
    pass

class CurrencyFormatterMode(enum.IntEnum):
    USE_SYMBOL = 0
    USE_CURRENCY_CODE = 1

class RoundingAlgorithm(enum.IntEnum):
    NONE = 0
    ROUND_DOWN = 1
    ROUND_UP = 2
    ROUND_TOWARDS_ZERO = 3
    ROUND_AWAY_FROM_ZERO = 4
    ROUND_HALF_DOWN = 5
    ROUND_HALF_UP = 6
    ROUND_HALF_TOWARDS_ZERO = 7
    ROUND_HALF_AWAY_FROM_ZERO = 8
    ROUND_HALF_TO_EVEN = 9
    ROUND_HALF_TO_ODD = 10

class CurrencyFormatter(INumberParser, INumberFormatter2, INumberFormatter, INumberFormatterOptions, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.Object):
    ...
    currency: str
    mode: CurrencyFormatterMode
    numeral_system: str
    is_grouped: _winrt.Boolean
    is_decimal_point_always_displayed: _winrt.Boolean
    integer_digits: _winrt.Int32
    fraction_digits: _winrt.Int32
    geographic_region: str
    resolved_geographic_region: str
    resolved_language: str
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    number_rounder: INumberRounder
    is_zero_signed: _winrt.Boolean
    significant_digits: _winrt.Int32
    def __init__(self, currency_code: str) -> None:
        ...
    def __init__(self, currency_code: str, languages: typing.Iterable[str], geographic_region: str) -> None:
        ...
    def apply_rounding_for_currency(rounding_algorithm: RoundingAlgorithm) -> None:
        ...
    def format(value: _winrt.Double) -> str:
        ...
    def format_double(value: _winrt.Double) -> str:
        ...
    def format_int(value: _winrt.Int64) -> str:
        ...
    def format_uint(value: _winrt.UInt64) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[_winrt.Double]:
        ...
    def parse_int(text: str) -> typing.Optional[_winrt.Int64]:
        ...
    def parse_uint(text: str) -> typing.Optional[_winrt.UInt64]:
        ...

class DecimalFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.Object):
    ...
    is_decimal_point_always_displayed: _winrt.Boolean
    integer_digits: _winrt.Int32
    is_grouped: _winrt.Boolean
    numeral_system: str
    fraction_digits: _winrt.Int32
    geographic_region: str
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: _winrt.Boolean
    significant_digits: _winrt.Int32
    def __init__(self, languages: typing.Iterable[str], geographic_region: str) -> None:
        ...
    def __init__(self, ) -> None:
        ...
    def format(value: _winrt.Double) -> str:
        ...
    def format_double(value: _winrt.Double) -> str:
        ...
    def format_int(value: _winrt.Int64) -> str:
        ...
    def format_uint(value: _winrt.UInt64) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[_winrt.Double]:
        ...
    def parse_int(text: str) -> typing.Optional[_winrt.Int64]:
        ...
    def parse_uint(text: str) -> typing.Optional[_winrt.UInt64]:
        ...

class IncrementNumberRounder(INumberRounder, _winrt.Object):
    ...
    rounding_algorithm: RoundingAlgorithm
    increment: _winrt.Double
    def __init__(self, ) -> None:
        ...
    def round_double(value: _winrt.Double) -> _winrt.Double:
        ...
    def round_int32(value: _winrt.Int32) -> _winrt.Int32:
        ...
    def round_int64(value: _winrt.Int64) -> _winrt.Int64:
        ...
    def round_single(value: _winrt.Single) -> _winrt.Single:
        ...
    def round_uint32(value: _winrt.UInt32) -> _winrt.UInt32:
        ...
    def round_uint64(value: _winrt.UInt64) -> _winrt.UInt64:
        ...

class NumeralSystemTranslator(_winrt.Object):
    ...
    numeral_system: str
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    resolved_language: str
    def __init__(self, languages: typing.Iterable[str]) -> None:
        ...
    def __init__(self, ) -> None:
        ...
    def translate_numerals(value: str) -> str:
        ...

class PercentFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.Object):
    ...
    is_decimal_point_always_displayed: _winrt.Boolean
    integer_digits: _winrt.Int32
    is_grouped: _winrt.Boolean
    numeral_system: str
    fraction_digits: _winrt.Int32
    geographic_region: str
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: _winrt.Boolean
    significant_digits: _winrt.Int32
    def __init__(self, languages: typing.Iterable[str], geographic_region: str) -> None:
        ...
    def __init__(self, ) -> None:
        ...
    def format(value: _winrt.Double) -> str:
        ...
    def format_double(value: _winrt.Double) -> str:
        ...
    def format_int(value: _winrt.Int64) -> str:
        ...
    def format_uint(value: _winrt.UInt64) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[_winrt.Double]:
        ...
    def parse_int(text: str) -> typing.Optional[_winrt.Int64]:
        ...
    def parse_uint(text: str) -> typing.Optional[_winrt.UInt64]:
        ...

class PermilleFormatter(INumberFormatterOptions, INumberFormatter, INumberFormatter2, INumberParser, ISignificantDigitsOption, INumberRounderOption, ISignedZeroOption, _winrt.Object):
    ...
    is_decimal_point_always_displayed: _winrt.Boolean
    integer_digits: _winrt.Int32
    is_grouped: _winrt.Boolean
    numeral_system: str
    fraction_digits: _winrt.Int32
    geographic_region: str
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    resolved_geographic_region: str
    resolved_language: str
    number_rounder: INumberRounder
    is_zero_signed: _winrt.Boolean
    significant_digits: _winrt.Int32
    def __init__(self, languages: typing.Iterable[str], geographic_region: str) -> None:
        ...
    def __init__(self, ) -> None:
        ...
    def format(value: _winrt.Double) -> str:
        ...
    def format_double(value: _winrt.Double) -> str:
        ...
    def format_int(value: _winrt.Int64) -> str:
        ...
    def format_uint(value: _winrt.UInt64) -> str:
        ...
    def parse_double(text: str) -> typing.Optional[_winrt.Double]:
        ...
    def parse_int(text: str) -> typing.Optional[_winrt.Int64]:
        ...
    def parse_uint(text: str) -> typing.Optional[_winrt.UInt64]:
        ...

class SignificantDigitsNumberRounder(INumberRounder, _winrt.Object):
    ...
    significant_digits: _winrt.UInt32
    rounding_algorithm: RoundingAlgorithm
    def __init__(self, ) -> None:
        ...
    def round_double(value: _winrt.Double) -> _winrt.Double:
        ...
    def round_int32(value: _winrt.Int32) -> _winrt.Int32:
        ...
    def round_int64(value: _winrt.Int64) -> _winrt.Int64:
        ...
    def round_single(value: _winrt.Single) -> _winrt.Single:
        ...
    def round_uint32(value: _winrt.UInt32) -> _winrt.UInt32:
        ...
    def round_uint64(value: _winrt.UInt64) -> _winrt.UInt64:
        ...

class INumberFormatter(_winrt.Object):
    ...
    def format(value: _winrt.Double) -> str:
        ...

class INumberFormatter2(_winrt.Object):
    ...
    def format_double(value: _winrt.Double) -> str:
        ...
    def format_int(value: _winrt.Int64) -> str:
        ...
    def format_uint(value: _winrt.UInt64) -> str:
        ...

class INumberFormatterOptions(_winrt.Object):
    ...
    fraction_digits: _winrt.Int32
    geographic_region: str
    integer_digits: _winrt.Int32
    is_decimal_point_always_displayed: _winrt.Boolean
    is_grouped: _winrt.Boolean
    languages: winsdk.windows.foundation.collections.IVectorView[str]
    numeral_system: str
    resolved_geographic_region: str
    resolved_language: str

class INumberParser(_winrt.Object):
    ...
    def parse_double(text: str) -> typing.Optional[_winrt.Double]:
        ...
    def parse_int(text: str) -> typing.Optional[_winrt.Int64]:
        ...
    def parse_uint(text: str) -> typing.Optional[_winrt.UInt64]:
        ...

class INumberRounder(_winrt.Object):
    ...
    def round_double(value: _winrt.Double) -> _winrt.Double:
        ...
    def round_int32(value: _winrt.Int32) -> _winrt.Int32:
        ...
    def round_int64(value: _winrt.Int64) -> _winrt.Int64:
        ...
    def round_single(value: _winrt.Single) -> _winrt.Single:
        ...
    def round_uint32(value: _winrt.UInt32) -> _winrt.UInt32:
        ...
    def round_uint64(value: _winrt.UInt64) -> _winrt.UInt64:
        ...

class INumberRounderOption(_winrt.Object):
    ...
    number_rounder: INumberRounder

class ISignedZeroOption(_winrt.Object):
    ...
    is_zero_signed: _winrt.Boolean

class ISignificantDigitsOption(_winrt.Object):
    ...
    significant_digits: _winrt.Int32

