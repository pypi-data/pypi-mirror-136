Metadata-Version: 2.1
Name: ddpw
Version: 1.0.2
Summary: A utility package to scaffold PyTorch's DDP
Home-page: http://ddpw.projects-tvs.surge.sh
Author: Sujal T.V.
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: absl-py (==1.0.0)
Requires-Dist: cloudpickle (==2.0.0)
Requires-Dist: dataclasses (==0.8)
Requires-Dist: grpcio (==1.43.0)
Requires-Dist: importlib-metadata (==4.10.1)
Requires-Dist: Markdown (==3.3.6)
Requires-Dist: numpy (==1.22.1)
Requires-Dist: pip (==21.3.1)
Requires-Dist: protobuf (==3.19.3)
Requires-Dist: setuptools (==60.5.0)
Requires-Dist: six (==1.16.0)
Requires-Dist: submitit (==1.2.1)
Requires-Dist: tensorboard (==1.15.0)
Requires-Dist: torch (==1.10.1)
Requires-Dist: typing-extensions (==4.0.1)
Requires-Dist: Werkzeug (==2.0.2)
Requires-Dist: wheel (==0.37.1)
Requires-Dist: zipp (==3.7.0)

# DDPW

[![Publish documentation to Surge](https://github.com/sujaltv/ddpw/actions/workflows/surge_publish.yaml/badge.svg)](https://github.com/sujaltv/ddpw/actions/workflows/surge_publish.yaml)
[![Publish to Anaconda](https://github.com/sujaltv/ddpw/actions/workflows/conda_publish.yaml/badge.svg)](https://github.com/sujaltv/ddpw/actions/workflows/conda_publish.yaml)
[![Publish to PyPI](https://github.com/sujaltv/ddpw/actions/workflows/pypi_publish.yaml/badge.svg)](https://github.com/sujaltv/ddpw/actions/workflows/pypi_publish.yaml)

The Distributed Data Parallel wrapper (DDPW) is created as a utility package to
encapsulate the scaffolding for PyTorch's Distributed Data Parallel.

This code is written in Python 3.8. The [DDPW
documentation](http://ddpw.projects-tvs.surge.sh) contains details on how to use
this package.

## Overview

### Installation

```bash
conda install -c tvsujal ddpw # with conda
pip install ddpw # with pip from PyPI
```

### Usage

```python
from ddpw import DDPWrapper, Platform

job = DDPWrapper(platform=Platform.GPU, nprocs=4, ...) # train on 4 GPUs
job.start(epoch=30) # start training
job.resume(ckpt=20, epochs=60) # resume training from 20th epoch
e = job.evaluate(ckpt=50) # evaluate the model saved at 50th epoch
```

